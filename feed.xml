<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TestCafe</title>
    <description></description>
    <link>https://devexpress.github.io/testcafe/</link>
    <atom:link href="https://devexpress.github.io/testcafe/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 30 Jul 2020 18:17:10 +0300</pubDate>
    <lastBuildDate>Thu, 30 Jul 2020 18:17:10 +0300</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Introducing the TestCafe Jenkins Plugin</title>
        <description>&lt;h1&gt;Introducing the TestCafe Jenkins Plugin&lt;/h1&gt;
&lt;p&gt;TestCafe can capture videos and screenshots so you can debug your tests and examine page UI. You can record all tests or only those that failed, generate unique video files for each test or record all of them in one take, and single out specific interactions. (For a full list of available options, see the following help topic: &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/screenshots-and-videos.html&quot;&gt;Screenshots and Videos&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Many TestCafe users take advantage of Jenkins — a CI/CD solution — to automate their tests. Until recently, they had to manually match the screenshots and videos taken by TestCafe to the individual test reports. The newly implemented &lt;a href=&quot;https://plugins.jenkins.io/testcafe/&quot;&gt;TestCafe Jenkins plugin&lt;/a&gt; simplifies this process. Links to screenshots and videos taken during the test now automatically appear on the Jenkins test results page. There is no need to keep the testing server running — all required files are stored inside the Jenkins build folder.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;With our plugin enabled, the test results page should appear as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/test-results-page.png&quot; alt=&quot;The updated test results page&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;test-case-the-disappearing-button&quot;&gt;&lt;/a&gt;Test case: the disappearing button &lt;a class=&quot;permalink&quot; href=&quot;#test-case-the-disappearing-button&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s assume that the &amp;#39;Add to Cart&amp;#39; button disappears on the mobile version of your website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/button-example.png&quot; alt=&quot;The 'Add To Cart' button is absent from the mobile version of the website&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;TestCafe supports the following mobile device emulation methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/interact-with-the-page.html#resize-window&quot;&gt;Resize the browser window&lt;/a&gt; during the test&lt;/li&gt;
&lt;li&gt;Run the test through a &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#browsers-in-cloud-testing-services&quot;&gt;third-party cloud testing service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#use-chromium-device-emulation&quot;&gt;Chromium&amp;#39;s built-in emulation mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third option offers greater speed and stability. We describe it going forward and recommend that you use it if possible.&lt;/p&gt;

&lt;p&gt;First, let&amp;#39;s write a simple test that checks if the &amp;#39;Add to Cart&amp;#39; button exists:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot; data-lang=&quot;JavaScript&quot;&gt;test('`Add To Cart` button should exist', async t =&amp;gt; {
    await t
        .expect(Selector('button').withText('Add To Cart').visible).ok();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s configure Jenkins to launch this test every time we build our project.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;basic-setup&quot;&gt;&lt;/a&gt;Basic setup &lt;a class=&quot;permalink&quot; href=&quot;#basic-setup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-1-install-prerequisites&quot;&gt;&lt;/a&gt;Step 1. Install prerequisites &lt;a class=&quot;permalink&quot; href=&quot;#step-1-install-prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TestCafe requires a working Node.js installation to run. If your testing environment does not contain node.js, &lt;a href=&quot;https://plugins.jenkins.io/nodejs/&quot;&gt;the Node.js Jenkins plugin&lt;/a&gt; can install it for you. Also ensure that Chromium is installed: TestCafe cannot function without a browser.&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-2-install-the-testcafe-jenkins-plugin&quot;&gt;&lt;/a&gt;Step 2. Install the TestCafe Jenkins plugin &lt;a class=&quot;permalink&quot; href=&quot;#step-2-install-the-testcafe-jenkins-plugin&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To install the TestCafe Jenkins plugin, click the &amp;quot;Manage Plugins&amp;quot; link on the Manage Jenkins page, select the &amp;quot;Available&amp;quot; tab, and enter &amp;quot;testcafe&amp;quot; into the search field. Check the box next to our plugin and click the &amp;#39;Install without restart&amp;#39; button below it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/plugin-search-ui.png&quot; alt=&quot;Jenkins plugin search UI&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-3-install-the-required-node-packages&quot;&gt;&lt;/a&gt;Step 3. Install the required Node packages &lt;a class=&quot;permalink&quot; href=&quot;#step-3-install-the-required-node-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Add the following &lt;em&gt;build step&lt;/em&gt; to your Jenkins project:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm i testcafe testcafe-reporter-jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command installs the main testcafe library, as well as the &lt;a href=&quot;https://www.npmjs.com/package/testcafe-reporter-jenkins&quot;&gt;testcafe-reporter-jenkins&lt;/a&gt; package. The latter is needed to generate Jenkins-friendly JUnit format reports.&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-4-configure-the-tests&quot;&gt;&lt;/a&gt;Step 4. Configure the tests &lt;a class=&quot;permalink&quot; href=&quot;#step-4-configure-the-tests&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can configure your tests via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html&quot;&gt;command line interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the JavaScript/TypeScript API&lt;/li&gt;
&lt;li&gt;the .testcaferc.json &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/configuration-file.html&quot;&gt;configuration file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last option provides an easy, declarative way to define your test settings. You can store this file in the same folder as your tests. Below is the configuration used in this tutorial:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chromium:headless:emulation:device=iPhone 4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chromium:headless:emulation:device=iPad Mini&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chromium:headless&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test/e2e/**/*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;screenshots&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;takeOnFails&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fullPage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;videoPath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;videos&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;report.xml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;appCommand&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;node server.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;Browser&lt;/em&gt; array contains the list of browsers TestCafe will use to run our test. The &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#use-chromium-device-emulation&quot;&gt;TestCafe browser syntax&lt;/a&gt; allows us to specify the mobile devices we want Chromium to emulate.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;name&lt;/em&gt; property of the &lt;em&gt;reporter&lt;/em&gt; object is set as &lt;em&gt;jenkins&lt;/em&gt;, which ensures that the reports generated by TestCafe can be properly parsed by the server.&lt;/p&gt;

&lt;p&gt;If you decide not to use a config file, be sure to &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-r-nameoutput---reporter-nameoutput&quot;&gt;manually set&lt;/a&gt; the report format when you launch the tests as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;testcafe chrome test.js &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; jenkins:report.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otherwise, simply run the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npx testcafe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-5-configure-the-reporter&quot;&gt;&lt;/a&gt;Step 5. Configure the reporter &lt;a class=&quot;permalink&quot; href=&quot;#step-5-configure-the-reporter&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Turn on the &lt;a href=&quot;https://plugins.jenkins.io/junit/&quot;&gt;JUnit&lt;/a&gt; reporter plugin: add the &amp;quot;Publish JUnit test result report&amp;quot; &lt;em&gt;post-build action&lt;/em&gt;. To display screenshots and videos alongside your test results, select the &amp;quot;Include links to TestCafe artifacts&amp;quot; option from the &amp;quot;Additional test report features&amp;quot; drop-down menu.&lt;/p&gt;

&lt;p&gt;Important: Remember to check the &amp;quot;Retain long standard output/error&amp;quot; box. Otherwise, the reporter plugin will automatically truncate the URLs of your videos and screenshots.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/junit-reporter-configuration.png&quot; alt=&quot;JUnit reporter configuration screen&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-6-run-the-build&quot;&gt;&lt;/a&gt;Step 6. Run the build &lt;a class=&quot;permalink&quot; href=&quot;#step-6-run-the-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Save the changes to your project and click the &amp;quot;Build now&amp;quot; button on the project page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/build-now-button.png&quot; alt=&quot;Jenkins Project menu with the Build Now Button highlighted&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;review-the-results&quot;&gt;&lt;/a&gt;Review the results &lt;a class=&quot;permalink&quot; href=&quot;#review-the-results&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the tests are completed, click the following link on the build page to view the results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/test-results-link.png&quot; alt=&quot;Test results link&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;You will see links to screenshots and videos taken during the test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/test-results-view.png&quot; alt=&quot;Test results view&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;These artifacts instantly indicate if the Cart button is present on the page.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;jenkins-pipeline-integration&quot;&gt;&lt;/a&gt;Jenkins Pipeline integration &lt;a class=&quot;permalink&quot; href=&quot;#jenkins-pipeline-integration&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you do not wish to use the Jenkins GUI to launch these tests, you can always use the &lt;a href=&quot;https://www.jenkins.io/doc/book/pipeline/&quot;&gt;Jenkins Pipeline&lt;/a&gt;. It lets you declaratively configure your CI/CD setup via a Jenkinsfile - a text file checked into the project&amp;#39;s source control repository. The following is a sample Jenkinsfile to be used with TestCafe:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E2E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e2e&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;keepLongStdio:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nl&quot;&gt;testDataPublishers:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestCafePublisher&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt;
                          &lt;span class=&quot;nl&quot;&gt;testResults:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: The &lt;code&gt;test-e2e&lt;/code&gt; npm script in this example launches TestCafe. As mentioned earlier in this topic, be sure to manually set the reporter option. For more information on the TestCafe CLI, see the following help topic: &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html&quot;&gt;Command Line Interface&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;If you enjoyed this guide and would like more tips on debugging, please see the following blog articles: &lt;a href=&quot;https://devexpress.github.io/testcafe/media/team-blog/how-to-debug-tests-in-testcafe-quick-guide.html&quot;&gt;How to Debug Tests in TestCafe: Quick Guide&lt;/a&gt; and &lt;a href=&quot;https://devexpress.github.io/testcafe/media/team-blog/how-to-speed-up-debugging-in-testcafe-tips-and-tricks.html&quot;&gt;How to speed up debugging in TestCafe: Tips and Tricks&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/introducing-the-testcafe-jenkins-plugin.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/introducing-the-testcafe-jenkins-plugin.html</guid>
        
        
      </item>
    
      <item>
        <title>Upcoming Webinar: 10 Ways to Simplify Your UI Testing</title>
        <description>&lt;h1&gt;Upcoming Webinar: 10 Ways to Simplify Your UI Testing&lt;/h1&gt;
&lt;p&gt;In this free webinar, our Technical Evangelist &lt;a href=&quot;https://twitter.com/paul__usher&quot;&gt;Paul Usher&lt;/a&gt; will show you how to easily incorporate UI testing in your development workflow. Paul will demonstrate how TestCafe can fit in any organization and how its features can be leveraged to deliver high quality web apps that always meet end-user expectations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this webinar, you’ll learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to setup TestCafe and start testing in under 10 minutes.&lt;/li&gt;
&lt;li&gt;How to create customizable tests that can easily evolve as business requirements change.&lt;/li&gt;
&lt;li&gt;The purpose of Custom Selectors and why they make web testing so much easier.&lt;/li&gt;
&lt;li&gt;The purpose of the Page Model approach and why it helps increase productivity.&lt;/li&gt;
&lt;li&gt;And you&amp;#39;ll learn how to master use of Smart Assertions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;experience-the-testcafe-difference&quot;&gt;&lt;/a&gt;Experience the TestCafe Difference &lt;a class=&quot;permalink&quot; href=&quot;#experience-the-testcafe-difference&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe Open Source and TestCafe Studio are driver free and do not require you to manage complex plug-ins. If you’re ready to test your web apps and want to deliver more reliable solutions to your end-users, be sure to click the link below and register your interest in this live webinar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Webinar Date:&lt;/strong&gt; Wednesday, July 29, 2020&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start Time:&lt;/strong&gt; 10AM Pacific Time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://dxpr.es/10_ways_to_simplify_ui_testing&quot;&gt;Register&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jul 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/10-ways-to-simplify-your-ui-testing.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/10-ways-to-simplify-your-ui-testing.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Speed up Debugging in TestCafe: Tips and Tricks</title>
        <description>&lt;h1&gt;How to Speed up Debugging in TestCafe: Tips and Tricks&lt;/h1&gt;
&lt;p&gt;In the previous post, we talked about the approaches you can follow to debug TestCafe tests. In this post, we will focus on best practices that help you save time while debugging.  We will also mention a few things to keep in mind in order to write easy-to-debug tests.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;tips-on-how-to-debug-tests&quot;&gt;&lt;/a&gt;Tips on how to debug tests &lt;a class=&quot;permalink&quot; href=&quot;#tips-on-how-to-debug-tests&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If you know which test throws an error, run this test separately.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you only need to check one test, do not wait until all tests pass. TestCafe can run any single test separately. Add the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#-t-name---test-name&quot;&gt;--test shell argument&lt;/a&gt; or use the &lt;a href=&quot;../../documentation/reference/test-api/test/only.html&quot;&gt;test.only&lt;/a&gt; method in test code. (Be sure to remove &lt;code&gt;.only&lt;/code&gt; before you commit changes.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome ./tests &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My test name&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My first test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use live mode when you edit tests.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you find yourself running a test repeatedly while you write or debug it, try live mode. In this mode, TestCafe watches the test file and restarts the test automatically after you save changes. To enable live mode, run the test with the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#-l---live&quot;&gt;--live flag&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome ./tests &lt;span class=&quot;nt&quot;&gt;--live&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;To identify an issue visually, decrease the test speed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By default, tests are executed at full speed – with minimum delays between actions and assertions. This makes it difficult to identify problems visually during a test run. To slow the test down, use the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#--speed-factor&quot;&gt;--speed flag&lt;/a&gt;. The argument value is between &lt;code&gt;1&lt;/code&gt; (fastest) and &lt;code&gt;0.01&lt;/code&gt; (slowest).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome ./tests &lt;span class=&quot;nt&quot;&gt;--speed&lt;/span&gt; 0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use TestCafe Studio to determine why a selector does not work.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TestCafe may report that a selector does not return any element, although you have written it correctly. The reason may be an invisible DOM element that matches the same selector expression. To get a better understanding of the issue, record a similar test in TestCafe Studio and compare your selector to the selector that is generated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If a test fails on CI, use screenshots and videos to clarify the reason.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You do not have to run a test locally to determine the reason why a test fails on CI. TestCafe can take a screenshot when the test fails and record a video of the test run. To enable screenshots and video recording, use the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#-s---screenshots-on-fails&quot;&gt;--screenshots-on-fail&lt;/a&gt; and &lt;a href=&quot;../../documentation/reference/command-line-interface.html#--video-basepath&quot;&gt;--video&lt;/a&gt; CLI options. See the following help topic for details: &lt;a href=&quot;../../documentation/guides/advanced-guides/screenshots-and-videos.html&quot;&gt;Screenshots and Videos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;tips-on-how-to-write-tests-that-are-easy-to-debug&quot;&gt;&lt;/a&gt;Tips on how to write tests that are easy to debug &lt;a class=&quot;permalink&quot; href=&quot;#tips-on-how-to-write-tests-that-are-easy-to-debug&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tests should be easy to run locally.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If it is difficult to run a test locally, developers are likely to delay test fixes, so that they turn &amp;#39;green&amp;#39; only shortly before the release. These delays may complicate the debug process.&lt;/p&gt;

&lt;p&gt;Developers can easily reproduce test scenarios locally and maintain &amp;#39;green&amp;#39; tests if the following is true:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests are isolated from each other.&lt;/li&gt;
&lt;li&gt;The workstation environment is similar to the test environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, a developer must be able to run any test locally with a single command, which requires the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The product test build is easy to run in a Docker container (or by another approach that emulates the test environment).&lt;/li&gt;
&lt;li&gt;Test data is seeded in test code (for example, within the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; hooks).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tests should be independent.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If subsequent tests use data produced by previous tests, you can expect the following two issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a previous test fails, all dependent tests will also fail.&lt;/li&gt;
&lt;li&gt;You cannot debug a test until all previous tests are complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To simplify debugging in the future, be sure to avoid dependencies between tests.&lt;/p&gt;

&lt;p&gt;For more best practice tips, see the following help topic: &lt;a href=&quot;https://devexpress.github.io/testcafe/media/team-blog/how-to-scroll-web-pages-using-testcafe.html&quot;&gt;How to Scroll Web Pages Using TestCafe&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/how-to-speed-up-debugging-in-testcafe-tips-and-tricks.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/how-to-speed-up-debugging-in-testcafe-tips-and-tricks.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Debug Tests in TestCafe: Quick Guide</title>
        <description>&lt;h1&gt;How to Debug Tests in TestCafe: Quick Guide&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;ve ever written a TestCafe test, you may be familiar with the following errors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cannot obtain information about the node because the specified selector does not match any node in the DOM tree.&lt;/li&gt;
&lt;li&gt;The specified selector does not match any element in the DOM tree.&lt;/li&gt;
&lt;li&gt;The element that matches the specified selector is not visible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two errors are self-explanatory. The last error, however, can easily be misinterpreted. This error frequently occurs if multiple elements match the same selector. The first matching element may be hidden, while the required element is visible.&lt;/p&gt;

&lt;p&gt;What should you do next? How do you update the selector so that it produces expected results? What should you do if the test previously passed, but it now fails?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, check the application to ensure that the test didn&amp;#39;t fail due to a bug. If the app runs as expected, then you can begin debugging the test.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;client-side-debugging&quot;&gt;&lt;/a&gt;Client-side Debugging &lt;a class=&quot;permalink&quot; href=&quot;#client-side-debugging&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe uses CSS selectors to identify page elements. To see if a selector matches an element, pause test execution in the browser and debug the test.&lt;/p&gt;

&lt;p&gt;To stop the test, you can use the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#--debug-on-fail&quot;&gt;--debug-on-fail&lt;/a&gt; CLI flag or the &lt;a href=&quot;../../documentation/reference/test-api/testcontroller/debug.html&quot;&gt;t.debug()&lt;/a&gt; test action. The difference between these approaches is summarized below:&lt;/p&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;&lt;code&gt;t.debug()&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;--debug-on-fail&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Allows you to define the moment when the test stops.&lt;/td&gt;
&lt;td&gt;Suspends the test only if it fails.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You only need to modify the test code to use it.&lt;/td&gt;
&lt;td&gt;Requires that you edit the test run command (which may take longer than the &lt;a href=&quot;../../documentation/reference/test-api/testcontroller/debug.html&quot;&gt;t.debug()&lt;/a&gt; action).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s look at a test from the TestCafe &lt;a href=&quot;../../documentation/getting-started/&quot;&gt;Getting Started&lt;/a&gt; topic. Assume the &lt;strong&gt;Submit&lt;/strong&gt; button&amp;#39;s selector changed and the test failed:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Getting Started`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`http://devexpress.github.io/testcafe/example`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My first test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#developer-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;John Smith&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit-button-invalid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Use the assertion to check if the actual header text is equal to the expected one&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#article-header&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Thank you, John Smith!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test now throws the following error when we run it:&lt;/p&gt;

&lt;p&gt;&lt;img srcset=&quot;/testcafe/images/blog/2020-5-25-test-results.png,
            /testcafe/images/blog/2020-5-25-test-results@2x.png 2x&quot;
        src=&quot;/testcafe/images/blog/2020-5-25-test-results.png&quot;
        alt=&quot;Test results showing an error&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Insert &lt;a href=&quot;../../documentation/reference/test-api/testcontroller/debug.html&quot;&gt;t.debug()&lt;/a&gt; before the line that fails:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#developer-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;John Smith&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit-button-invalid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test pauses before the button click. You can now use browser utilities to see if any elements match the selector.&lt;/p&gt;

&lt;p&gt;&lt;img srcset=&quot;/testcafe/images/blog/2020-5-25-dev-tools.png,
            /testcafe/images/blog/2020-5-25-dev-tools@2x.png 2x&quot;
        src=&quot;/testcafe/images/blog/2020-5-25-dev-tools.png&quot;
        alt=&quot;Check a selector in development tools&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;document.querySelectorAll&lt;/code&gt; returns an empty list, you can see that there is no such element on the page, but the &lt;strong&gt;Submit&lt;/strong&gt; button is visible. Use the &lt;strong&gt;Inspect&lt;/strong&gt; command to see how this button is rendered in markup:&lt;/p&gt;

&lt;p&gt;&lt;img srcset=&quot;/testcafe/images/blog/2020-5-25-inspect.png,
            /testcafe/images/blog/2020-5-25-inspect@2x.png 2x&quot;
        src=&quot;/testcafe/images/blog/2020-5-25-inspect.png&quot;
        alt=&quot;Inspect the button in development tools&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The browser&amp;#39;s development tools pane shows that the button&amp;#39;s ID is &lt;code&gt;submit-button&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;div class=&quot;blockquote-content&quot;&gt;&lt;p&gt;You can use Chrome Dev Tools&amp;#39; shortcuts (&lt;code&gt;$&lt;/code&gt; and &lt;code&gt;$$&lt;/code&gt;) to query selectors. However, if your website uses jQuery, the &lt;code&gt;$&lt;/code&gt; shortcut is overridden. TestCafe searches for elements with &lt;code&gt;document.querySelectorAll&lt;/code&gt;, which behaves in a slightly different way than jQuery. Please keep this in mind.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;To use an element inside an iframe, switch the browsing context with &lt;a href=&quot;../../documentation/reference/test-api/testcontroller/switchtoiframe.html&quot;&gt;t.switchToIframe&lt;/a&gt; before the action.&lt;/p&gt;
&lt;blockquote&gt;&lt;div class=&quot;blockquote-content&quot;&gt;&lt;p&gt;Google Chrome lets you pause complex animations that your website might play when elements appear. To stop JavaScript execution, press &lt;code&gt;F8&lt;/code&gt; when the &lt;strong&gt;Sources&lt;/strong&gt; tab is open.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;debugging-client-functions&quot;&gt;&lt;/a&gt;Debugging Client Functions &lt;a class=&quot;permalink&quot; href=&quot;#debugging-client-functions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another client-side debugging trick in TestCafe allows you to execute code within the browser to obtain client-side data or identify page elements.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStoredValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To debug this code, add the &lt;code&gt;debugger&lt;/code&gt; statement. The browser will stop the script and open developer tools.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStoredValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;server-side-debugging&quot;&gt;&lt;/a&gt;Server-side Debugging &lt;a class=&quot;permalink&quot; href=&quot;#server-side-debugging&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Test flow can be complicated if it includes data preparation, HTTP requests or database access. You can use Node.js to debug this code, along with Visual Studio Code, WebStorm, or Chrome Developer Tools. See the &lt;a href=&quot;../../documentation/recipes/&quot;&gt;Recipes&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Note that it is easier to use client-side debugging to execute chained actions step by step. The server treats the entire chain as a single action, so you must divide it into separate actions to debug.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;stay-tuned-for-more-information-on-test-debugging&quot;&gt;&lt;/a&gt;Stay Tuned for More Information on Test Debugging &lt;a class=&quot;permalink&quot; href=&quot;#stay-tuned-for-more-information-on-test-debugging&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As explained in this blog post, TestCafe and modern browsers offer all the tools necessary to debug your application or test. Note, however, that tools do not always locate errors quickly and easily. We&amp;#39;ve often spent more time debugging than desired. In our next blog post, I&amp;#39;ll share a few techniques that may save time when you debug a test.&lt;/p&gt;

&lt;p&gt;If you have any questions or want to share your test debugging story – write to us directly at &lt;a href=&quot;mailto:testcafeteam@devexpress.com&quot;&gt;testcafeteam@devexpress.com&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 May 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/how-to-debug-tests-in-testcafe-quick-guide.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/how-to-debug-tests-in-testcafe-quick-guide.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Scroll Web Pages Using TestCafe</title>
        <description>&lt;h1&gt;How to Scroll Web Pages Using TestCafe&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;re writing functional tests, you may need to scroll tested pages to display specific elements. In this article, we look at several test scenarios to show how TestCafe navigates pages.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;built-in-testcafe-actions-scroll-the-page-automatically&quot;&gt;&lt;/a&gt;Built-in TestCafe Actions Scroll the Page Automatically &lt;a class=&quot;permalink&quot; href=&quot;#built-in-testcafe-actions-scroll-the-page-automatically&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each TestCafe API action scrolls a page to show the target element. You don&amp;#39;t need to write extra code to click a button or input text. Simply pass a selector to the action method. TestCafe will automatically scroll to the element and execute the action.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// scroll to the &quot;#submit-btn&quot; element and click it&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit-btn&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;scroll-to-a-rendered-dom-element&quot;&gt;&lt;/a&gt;Scroll to a Rendered DOM Element &lt;a class=&quot;permalink&quot; href=&quot;#scroll-to-a-rendered-dom-element&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you need to scroll a page to display a specific element or area, but don&amp;#39;t need to perform an action on the target element, use the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/hover.html&quot;&gt;hover&lt;/a&gt; method.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// scroll to the &quot;#country-map&quot; element&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#country-map&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;scroll-to-a-dynamically-generated-element&quot;&gt;&lt;/a&gt;Scroll to a Dynamically Generated Element &lt;a class=&quot;permalink&quot; href=&quot;#scroll-to-a-dynamically-generated-element&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In certain scenarios, elements cannot be identified by a selector. For instance, a page may contain a dynamically generated list of identical items. Another example is virtual scrolling: the element might not exist on a page when the action starts.&lt;/p&gt;

&lt;p&gt;A solution in these cases is to use the browser&amp;#39;s native API. For example, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy&quot;&gt;window.scrollBy&lt;/a&gt; method. To access this method, utilize the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/clientfunction/constructor.html&quot;&gt;ClientFunction&lt;/a&gt; generator. Calculate the offset between the element and the top of the container, and pass these values to the scrollBy method.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Fixture`&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://github.com/DevExpress/testcafe`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetElementPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetElementPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes offset calculation is not an option. If a page uses virtual scrolling, element heights can change. You may not even know the number of elements above the element to be displayed. You might only know the element&amp;#39;s content, such as its display text.&lt;/p&gt;

&lt;p&gt;To find an element by text, scroll to the last rendered item on the list so that the next portion of elements are loaded. Continue the process until you locate the element. A selector&amp;#39;s &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/select-page-elements.html#check-if-an-element-exists&quot;&gt;exists&lt;/a&gt; property allows you to scan rendered elements and see if an element with that text exists. If it does exist, the search is over. If not, repeat the cycle.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Getting Started`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://bvaughn.github.io/react-virtualized/#/components/List&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Test 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;._1oXCrgdVudv-QMFo7eQCLb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;._113CIjCFcgg_BK6pEtLzCZ&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withExactText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Tisha Wurster&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bottomItemIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bottomItemText&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bottomItemIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bottomItem&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withExactText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bottomItemText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bottomItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We hope you find these tips useful.&lt;/p&gt;

&lt;p&gt;Want to learn more about TestCafe? Feel free to mention &lt;a href=&quot;https://twitter.com/DXTestCafe&quot;&gt;@DXTestCafe&lt;/a&gt; on Twitter and suggest a topic for the next post.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/how-to-scroll-web-pages-using-testcafe.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/how-to-scroll-web-pages-using-testcafe.html</guid>
        
        
      </item>
    
      <item>
        <title>TestCafe v1.8.0 Released</title>
        <description>&lt;h1&gt;TestCafe v1.8.0 Released&lt;/h1&gt;
&lt;p&gt;In this release, we have added support for the new Chromium-based Microsoft Edge.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;support-for-the-new-microsoft-edge&quot;&gt;&lt;/a&gt;🌟 Support for the New Microsoft Edge &lt;a class=&quot;permalink&quot; href=&quot;#support-for-the-new-microsoft-edge&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe v1.8.0 supports the new Microsoft Edge based on Chromium. The new Edge is available under the same &lt;a href=&quot;../documentation/guides/concepts/browsers.html#locally-installed-browsers&quot;&gt;alias&lt;/a&gt;: &lt;code&gt;edge&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe edge test.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runner&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;test.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Supported Edge&amp;#39;s features include &lt;a href=&quot;../documentation/guides/concepts/browsers.html#test-in-headless-mode&quot;&gt;headless mode&lt;/a&gt;, &lt;a href=&quot;../documentation/guides/concepts/browsers.html#use-chromium-device-emulation&quot;&gt;mobile device emulation&lt;/a&gt;, and &lt;a href=&quot;../documentation/guides/advanced-guides/screenshots-and-videos.html#record-videos&quot;&gt;video recording&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;bug-fixes&quot;&gt;&lt;/a&gt;Bug Fixes &lt;a class=&quot;permalink&quot; href=&quot;#bug-fixes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an error thrown when the webpage creates a &lt;code&gt;Proxy&lt;/code&gt; (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2206&quot;&gt;testcafe-hammerhead/#2206&lt;/a&gt;) by &lt;a href=&quot;https://github.com/link89&quot;&gt;@link89&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event handlers are no longer cleared after the &lt;code&gt;document.open&lt;/code&gt; function call (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/1881&quot;&gt;testcafe-hammerhead/#1881&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 17 Jan 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/blog/testcafe-v1-8-0-released.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/blog/testcafe-v1-8-0-released.html</guid>
        
        
      </item>
    
      <item>
        <title>TestCafe v1.7.0 Released</title>
        <description>&lt;h1&gt;TestCafe v1.7.0 Released&lt;/h1&gt;
&lt;p&gt;This release introduces access to the browser and platform information from test code.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;enhancements&quot;&gt;&lt;/a&gt;Enhancements &lt;a class=&quot;permalink&quot; href=&quot;#enhancements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;identify-the-browser-and-platform-in-test-code-481&quot;&gt;&lt;/a&gt;⚙️ Identify the Browser and Platform in Test Code (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/481&quot;&gt;#481&lt;/a&gt;) &lt;a class=&quot;permalink&quot; href=&quot;#identify-the-browser-and-platform-in-test-code-481&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TestCafe now allows you to obtain information about the current user agent. These data identify the operating system, platform type, browser, engine, etc.&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html&quot;&gt;t.browser&lt;/a&gt; property to access user agent data.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://example.com`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Chrome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Browser not supported&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html&quot;&gt;t.browser&lt;/a&gt; object exposes the following properties:&lt;/p&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#alias&quot;&gt;alias&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;The browser alias string specified when tests were launched.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;firefox:headless&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#name&quot;&gt;name&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;The browser name.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Chrome&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#version&quot;&gt;version&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;The browser version.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;77.0.3865.120&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#platform&quot;&gt;platform&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;The platform type.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;desktop&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#headless&quot;&gt;headless&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt; if the browser runs in headless mode.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#os&quot;&gt;os&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;The name and version of the operating system.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{ name: &amp;#39;macOS&amp;#39;, version: &amp;#39;10.15.1&amp;#39; }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#engine&quot;&gt;engine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td&gt;The name and version of the browser engine.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{ name: &amp;#39;Gecko&amp;#39;, version: &amp;#39;20100101&amp;#39; }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#useragent&quot;&gt;userAgent&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;The user agent string.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/77.0.3865.120 Safari/537.36&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#prettyuseragent&quot;&gt;prettyUserAgent&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Formatted string with the browser&amp;#39;s and operating system&amp;#39;s name and version.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Chrome 77.0.3865.75 / macOS 10.14.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;The following example shows how to create a &lt;a href=&quot;../documentation/reference/test-api/fixture/beforeeach.html&quot;&gt;beforeEach&lt;/a&gt; hook that runs for specific &lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#engine&quot;&gt;browser engines&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://example.com`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Blink&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use &lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html&quot;&gt;t.browser&lt;/a&gt; to generate the screenshot path based on the &lt;a href=&quot;../documentation/reference/test-api/testcontroller/browser.html#name&quot;&gt;browser name&lt;/a&gt;. This prevents screenshots taken with &lt;a href=&quot;../documentation/reference/test-api/testcontroller/takeelementscreenshot.html&quot;&gt;t.takeElementScreenshot&lt;/a&gt; in different browsers from being overwritten.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://example.com`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeElementScreenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`auth/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/login-button.png`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more information and examples, see &lt;a href=&quot;../documentation/guides/advanced-guides/detect-the-client-browser-and-platform.html&quot;&gt;Identify the Browser and Platform&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;bug-fixes&quot;&gt;&lt;/a&gt;Bug Fixes &lt;a class=&quot;permalink&quot; href=&quot;#bug-fixes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an error on pages that submit forms immediately after loading (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4360&quot;&gt;#4360&lt;/a&gt; by &lt;a href=&quot;https://github.com/bill-looby-i&quot;&gt;@bill-looby-i&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;TestCafe now scrolls to elements located inside Shadow DOM roots (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4222&quot;&gt;#4222&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an error that occurred when TypeScripts tests that use Node.js globals were run with TestCafe installed globally (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4437&quot;&gt;#4437&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed the TypeScript definition for the &lt;code&gt;Selector.withAttribute&lt;/code&gt; method&amp;#39;s return type (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4448&quot;&gt;#4448&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an issue when custom browser providers could not take screenshots (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4477&quot;&gt;#4477&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Support pages that use advanced ES6 module export (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2137&quot;&gt;testcafe-hammerhead/#2137&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed compatibility issues with Salesforce Lightning Web Components (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2152&quot;&gt;testcafe-hammerhead/#2152&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Nov 2019 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/blog/testcafe-v1-7-0-released.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/blog/testcafe-v1-7-0-released.html</guid>
        
        
      </item>
    
      <item>
        <title>TestCafe v1.6.0 Released</title>
        <description>&lt;h1&gt;TestCafe v1.6.0 Released&lt;/h1&gt;
&lt;p&gt;This release adds support for macOS 10.15 Catalina, introduces full-page screenshots and compound screenshot options.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;support-for-macos-1015-catalina&quot;&gt;&lt;/a&gt;🌟 Support for macOS 10.15 Catalina &lt;a class=&quot;permalink&quot; href=&quot;#support-for-macos-1015-catalina&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This version provides compatibility with macOS 10.15. Update TestCafe to v1.6.0 if you run macOS Catalina.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;enhancements&quot;&gt;&lt;/a&gt;Enhancements &lt;a class=&quot;permalink&quot; href=&quot;#enhancements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;full-page-screenshots-1520&quot;&gt;&lt;/a&gt;⚙ Full-Page Screenshots (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/1520&quot;&gt;#1520&lt;/a&gt;) &lt;a class=&quot;permalink&quot; href=&quot;#full-page-screenshots-1520&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TestCafe can now take screenshots that show the full page, including content that is not visible due to overflow.&lt;/p&gt;

&lt;p&gt;Enable the &lt;code&gt;fullPage&lt;/code&gt; option in CLI, API or configuration file to capture the full page on all screenshots. You can also pass this option to &lt;code&gt;t.takeScreenshot&lt;/code&gt; to capture a single full-page screenshot.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Command line interface&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enable the &lt;a href=&quot;../documentation/reference/command-line-interface.html#fullpage&quot;&gt;fullPage&lt;/a&gt; parameter of the &lt;a href=&quot;../documentation/reference/command-line-interface.html#-s---screenshots-optionvalueoption2value2&quot;&gt;-s (--screenshots)&lt;/a&gt; flag:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome test.js &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fullPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;API&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pass the &lt;code&gt;fullPage&lt;/code&gt; option to &lt;a href=&quot;../documentation/reference/testcafe-api/runner/screenshots.html&quot;&gt;runner.screenshots&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fullPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Configuration file&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Set the &lt;a href=&quot;../documentation/reference/configuration-file.html#screenshotsfullpage&quot;&gt;screenshots.fullPage&lt;/a&gt; property:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;screenshots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;fullPage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Test code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pass the &lt;code&gt;fullPage&lt;/code&gt; option to the &lt;a href=&quot;../documentation/reference/test-api/testcontroller/takescreenshot.html&quot;&gt;t.takeScreenshot&lt;/a&gt; action:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeScreenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fullPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;compound-screenshot-options&quot;&gt;&lt;/a&gt;⚙ Compound Screenshot Options &lt;a class=&quot;permalink&quot; href=&quot;#compound-screenshot-options&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The command line interface and configuration file schema have been updated to provide a more concise way to specify the screenshot options.&lt;/p&gt;
&lt;blockquote&gt;&lt;div class=&quot;blockquote-content&quot;&gt;&lt;p&gt;TestCafe v1.6.0 also supports the existing options to maintain backward compatibility. However, these options are now marked &lt;em&gt;obsolete&lt;/em&gt; in the documentation. In the future updates, we will deprecate them and emit warnings.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Command line interface&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Screenshot options in CLI are now consolidated under the &lt;a href=&quot;../documentation/reference/command-line-interface.html#-s---screenshots-optionvalueoption2value2&quot;&gt;-s (--screenshots)&lt;/a&gt; flag in an &lt;code&gt;option=value&lt;/code&gt; string:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome test.js &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;takeOnFails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,pathPattern&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILE_INDEX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;table-wrapper&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Old Usage&lt;/th&gt;
&lt;th&gt;New Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-s artifacts/screenshots&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-s path=artifacts/screenshots&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-S&lt;/code&gt;, &lt;code&gt;--screenshots-on-fails&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-s takeOnFails=true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p ${DATE}_${TIME}/${FILE_INDEX}.png&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-s pathPattern=${DATE}_${TIME}/${FILE_INDEX}.png&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Configuration file&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Configuration file properties that specify screenshot options are now combined in the &lt;a href=&quot;../documentation/reference/configuration-file.html#screenshots&quot;&gt;screenshots&lt;/a&gt; object:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;screenshots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;artifacts/screenshots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;takeOnFails&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;pathPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${DATE}_${TIME}/${FILE_INDEX}.png&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;table-wrapper&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Old Property&lt;/th&gt;
&lt;th&gt;New Property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;screenshotPath&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;screenshots.path&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;takeScreenshotsOnFails&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;screenshots.takeOnFails&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;screenshotPathPattern&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;screenshots.pathPattern&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;default-screenshot-directory&quot;&gt;&lt;/a&gt;⚙ Default Screenshot Directory &lt;a class=&quot;permalink&quot; href=&quot;#default-screenshot-directory&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TestCafe now saves the screenshots to &lt;code&gt;./screenshots&lt;/code&gt; if the base directory is not specified.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;../documentation/reference/command-line-interface.html#-s---screenshots-optionvalueoption2value2&quot;&gt;--screenshots&lt;/a&gt; CLI flag, the &lt;a href=&quot;../documentation/reference/testcafe-api/runner/screenshots.html&quot;&gt;runner.screenshots&lt;/a&gt; method or the &lt;a href=&quot;../documentation/reference/configuration-file.html#screenshotpath&quot;&gt;screenshotPath&lt;/a&gt; configuration option are not required to take screenshots. For instance, you can run TestCafe with no additional parameters and use the &lt;a href=&quot;../documentation/reference/test-api/testcontroller/takescreenshot.html&quot;&gt;t.takeScreenshot&lt;/a&gt; action in test code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome test.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;test.js&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://example.com`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Take a screenshot&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeScreenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; argument in &lt;a href=&quot;../documentation/reference/testcafe-api/runner/screenshots.html&quot;&gt;runner.screenshots&lt;/a&gt; is now optional.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;takeOnFails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;new-option-to-disable-screenshots&quot;&gt;&lt;/a&gt;⚙ New Option to Disable Screenshots &lt;a class=&quot;permalink&quot; href=&quot;#new-option-to-disable-screenshots&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We have added an option that allows you to disable taking screenshots. If this option is specified, TestCafe does not take screenshots when a test fails and when the &lt;a href=&quot;../documentation/reference/test-api/testcontroller/takescreenshot.html&quot;&gt;t.takeScreenshot&lt;/a&gt; or &lt;a href=&quot;../documentation/reference/test-api/testcontroller/takeelementscreenshot.html&quot;&gt;t.takeElementScreenshot&lt;/a&gt; action is executed.&lt;/p&gt;

&lt;p&gt;You can disable screenshots with a command line, API or configuration file option:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href=&quot;../documentation/reference/command-line-interface.html#--disable-screenshots&quot;&gt;--disable-screenshots&lt;/a&gt; command line flag&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome my-tests &lt;span class=&quot;nt&quot;&gt;--disable-screenshots&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;disableScreenshots&lt;/code&gt; option in the &lt;a href=&quot;../documentation/reference/testcafe-api/runner/run.html&quot;&gt;runner.run&lt;/a&gt; method&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disableScreenshots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href=&quot;../documentation/reference/configuration-file.html#disablescreenshots&quot;&gt;disableScreenshots&lt;/a&gt; configuration file property&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;disableScreenshots&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;bug-fixes&quot;&gt;&lt;/a&gt;Bug Fixes &lt;a class=&quot;permalink&quot; href=&quot;#bug-fixes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an error thrown when you pass the &lt;code&gt;-b&lt;/code&gt; command line flag (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4294&quot;&gt;#4294&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;TestCafe no longer hangs when Firefox downloads a file (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/2741&quot;&gt;#2741&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;You can now start tests from TypeScript code executed with &lt;code&gt;ts-node&lt;/code&gt; (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4276&quot;&gt;#4276&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed TypeScript definitions for client script injection API (&lt;a href=&quot;https://github.com/DevExpress/testcafe/pull/4272&quot;&gt;PR #4272&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed TypeScript definitions for &lt;code&gt;disablePageCaching&lt;/code&gt; (&lt;a href=&quot;https://github.com/DevExpress/testcafe/pull/4274&quot;&gt;PR #4274&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a bug when anchor links did not navigate to their target destinations (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2080&quot;&gt;testcafe-hammerhead/#2080&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 16 Oct 2019 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/blog/testcafe-v1-6-0-released.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/blog/testcafe-v1-6-0-released.html</guid>
        
        
      </item>
    
      <item>
        <title>TestCafe v1.5.0 Released</title>
        <description>&lt;h1&gt;TestCafe v1.5.0 Released&lt;/h1&gt;
&lt;p&gt;This release introduces the capability to disable page caching in TestCafe.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;enhancements&quot;&gt;&lt;/a&gt;Enhancements &lt;a class=&quot;permalink&quot; href=&quot;#enhancements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;page-caching-can-be-disabled-3780&quot;&gt;&lt;/a&gt;⚙ Page Caching Can be Disabled (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/3780&quot;&gt;#3780&lt;/a&gt;) &lt;a class=&quot;permalink&quot; href=&quot;#page-caching-can-be-disabled-3780&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TestCafe may be unable to log in to the tested website correctly if the web server uses caching for authentication pages or pages to which users are redirected after login. See the &lt;a href=&quot;../documentation/guides/advanced-guides/authentication.html#test-actions-fail-after-authentication&quot;&gt;User Roles&lt;/a&gt; topic for details.&lt;/p&gt;

&lt;p&gt;If tests fail unexpectedly after authentication, disable page caching in TestCafe.&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&quot;../documentation/reference/test-api/fixture/disablepagecaching.html&quot;&gt;fixture.disablePageCaching&lt;/a&gt; and &lt;a href=&quot;../documentation/reference/test-api/test/disablepagecaching.html&quot;&gt;test.disablePageCaching&lt;/a&gt; methods to disable caching during a particular fixture or test.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disablePageCaching&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://example.com`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disablePageCaching&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To disable page caching during the entire test run, use either of the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href=&quot;../documentation/reference/command-line-interface.html#--disable-page-caching&quot;&gt;--disable-page-caching&lt;/a&gt; command line flag&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome my-tests &lt;span class=&quot;nt&quot;&gt;--disable-page-caching&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;disablePageCaching&lt;/code&gt; option in the &lt;a href=&quot;../documentation/reference/testcafe-api/runner/run.html&quot;&gt;runner.run&lt;/a&gt; method&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disablePageCaching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href=&quot;../documentation/reference/configuration-file.html#disablepagecaching&quot;&gt;disablePageCaching&lt;/a&gt; configuration file property&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;disablePageCaching&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If tests run correctly without page caching, we recommend that you adjust the server settings to disable caching for authentication pages and pages to which the server redirects from them.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;bug-fixes&quot;&gt;&lt;/a&gt;Bug Fixes &lt;a class=&quot;permalink&quot; href=&quot;#bug-fixes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an error that occured when a selector matched an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/3684&quot;&gt;#3684&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an issue when the &lt;code&gt;reporter&lt;/code&gt; configuration file option was not applied (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4234&quot;&gt;#4234&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a warning message about invalid &lt;code&gt;tsconfig.json&lt;/code&gt; file (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4154&quot;&gt;#4154&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LiveRunner.stop()&lt;/code&gt; now closes the browsers (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4107&quot;&gt;#4107&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Quarantined tests now re-run correctly in live mode (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4093&quot;&gt;#4093&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a bug when client scripts were not injected in live mode when it re-executed tests (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4183&quot;&gt;#4183&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;form.elements.length&lt;/code&gt; now returns the correct value for forms with file inputs (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2034&quot;&gt;testcafe-hammerhead/#2034&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a bug when images were not displayed in inputs with the &lt;code&gt;image&lt;/code&gt; type (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2116&quot;&gt;testcafe-hammerhead/#2116&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed an AngularJS compatibility issue that caused a &lt;code&gt;TypeError&lt;/code&gt; (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2099&quot;&gt;testcafe-hammerhead/#2099&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;TestCafe now works correctly with servers that use &lt;code&gt;JSZip&lt;/code&gt; to unpack uploaded files (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2115&quot;&gt;testcafe-hammerhead/#2115&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 12 Sep 2019 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/blog/testcafe-v1-5-0-released.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/blog/testcafe-v1-5-0-released.html</guid>
        
        
      </item>
    
      <item>
        <title>TestCafe v1.4.0 Released</title>
        <description>&lt;h1&gt;TestCafe v1.4.0 Released&lt;/h1&gt;
&lt;p&gt;This release introduces the capability to inject custom scripts into tested pages.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;enhancements&quot;&gt;&lt;/a&gt;Enhancements &lt;a class=&quot;permalink&quot; href=&quot;#enhancements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;inject-scripts-into-tested-pages-1739&quot;&gt;&lt;/a&gt;⚙ Inject Scripts Into Tested Pages (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/1739&quot;&gt;#1739&lt;/a&gt;) &lt;a class=&quot;permalink&quot; href=&quot;#inject-scripts-into-tested-pages-1739&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TestCafe now allows you to &lt;a href=&quot;../documentation/guides/advanced-guides/inject-client-scripts.html&quot;&gt;inject scripts&lt;/a&gt; into pages visited during the tests. Use this feature to add helper functions, mock browser API or import modules.&lt;/p&gt;

&lt;p&gt;To add client scripts to all tests, specify them in the command line, API or configuration file. Use the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href=&quot;../documentation/reference/command-line-interface.html#--cs-pathpath2---client-scripts-pathpath2&quot;&gt;--cs (--client-scripts)&lt;/a&gt; command line argument&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome test.js &lt;span class=&quot;nt&quot;&gt;--client-scripts&lt;/span&gt; mockDate.js,assets/react-helpers.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href=&quot;../documentation/reference/testcafe-api/runner/clientscripts.html&quot;&gt;runner.clientScripts&lt;/a&gt; API method&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;runner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mockDate.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;scripts/react-helpers.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;a href=&quot;../documentation/reference/configuration-file.html#clientscripts&quot;&gt;clientScripts&lt;/a&gt; configuration file property&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;clientScripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mockDate.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts/react-helpers.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need to add scripts to individual fixtures or tests, use the &lt;a href=&quot;../documentation/reference/test-api/fixture/clientscripts.html&quot;&gt;fixture.clientScripts&lt;/a&gt; and &lt;a href=&quot;../documentation/reference/test-api/test/clientscripts.html&quot;&gt;test.clientScripts&lt;/a&gt; methods in test code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`http://example.com`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mockDate.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;scripts/react-helpers.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mockDate.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;scripts/react-helpers.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TestCafe also allows you to &lt;a href=&quot;../documentation/guides/advanced-guides/inject-client-scripts.html#provide-scripts-for-specific-pages&quot;&gt;inject scripts into specific pages&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://myapp.com/page/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;scripts/vue-helpers.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is helpful when you need to override the browser API on particular pages and use the default behavior everywhere else.&lt;/p&gt;

&lt;p&gt;You can specify the scripts to inject as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pass the &lt;a href=&quot;../documentation/guides/advanced-guides/inject-client-scripts.html#inject-a-javascript-file&quot;&gt;path to a JavaScript file&lt;/a&gt; to inject its content:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;assets/jquery.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use the &lt;a href=&quot;../documentation/guides/advanced-guides/inject-client-scripts.html#inject-a-module&quot;&gt;module name&lt;/a&gt; to inject a module:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TestCafe searches for the module&amp;#39;s entry point with Node.js mechanisms and injects its content. Note that the browser must be able to execute this module.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pass the &lt;a href=&quot;../documentation/guides/advanced-guides/inject-client-scripts.html#inject-script-code&quot;&gt;code&lt;/a&gt; you need to inject:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`My fixture`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientScripts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Geolocation.prototype.getCurrentPosition = () =&amp;gt; new Positon(0, 0);&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;../documentation/guides/advanced-guides/inject-client-scripts.html&quot;&gt;Inject Scripts into Tested Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;bug-fixes&quot;&gt;&lt;/a&gt;Bug Fixes &lt;a class=&quot;permalink&quot; href=&quot;#bug-fixes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The browser no longer displays 404 errors after the test submits a form (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/3560&quot;&gt;#3560&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TestCafe can now download files when testing in headless mode (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/3127&quot;&gt;#3127&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;TypeScript no longer throws an error when &lt;code&gt;fixture&lt;/code&gt; or &lt;code&gt;fixture.page&lt;/code&gt; uses a tag function (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4042&quot;&gt;#4042&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;load&lt;/code&gt; event now correctly fires for cached images (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/1959&quot;&gt;testcafe-hammerhead/#1959&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;TestCafe can now read resources from &lt;code&gt;asar&lt;/code&gt; archives (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2033&quot;&gt;testcafe-hammerhead/#2033&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a bug when &lt;code&gt;testcafe-hammerhead&lt;/code&gt; event listeners were called twice (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2062&quot;&gt;testcafe-hammerhead/#2062&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 07 Aug 2019 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/blog/testcafe-v1-4-0-released.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/blog/testcafe-v1-4-0-released.html</guid>
        
        
      </item>
    
  </channel>
</rss>
