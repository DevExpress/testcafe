<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TestCafe</title>
    <description></description>
    <link>https://devexpress.github.io/testcafe/</link>
    <atom:link href="https://devexpress.github.io/testcafe/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 03 Sep 2020 12:53:28 +0300</pubDate>
    <lastBuildDate>Thu, 03 Sep 2020 12:53:28 +0300</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>How TestCafe Can Help You to Deliver Faster</title>
        <description>&lt;h1&gt;How TestCafe Can Help You to Deliver Faster&lt;/h1&gt;
&lt;p&gt;DevOps teams must make certain that applications ship on time and meet appropriate quality standards. To achieve the latter objective, DevOps must carefully consider what checks to include in the pipeline and what to leave as smoke tests. In this brief article, we argue that end-to-end tests are crucial to product quality and are worth running each time an organization delivers a build. We will illustrate how TestCafe can streamline this process and help you integrate end-to-end tests into your CI/CD workflow with minimum time and effort.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;unit-tests-are-not-enough&quot;&gt;&lt;/a&gt;Unit Tests are not Enough &lt;a class=&quot;permalink&quot; href=&quot;#unit-tests-are-not-enough&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As you know, some organizations/dev teams require use of unit tests. Unit tests allow developers to verify whether &amp;quot;small&amp;quot; portions of a solution work as intended, but do so &lt;strong&gt;independent of the whole&lt;/strong&gt;. While it may be tempting to use green unit tests as the prime delivery condition within a CI/CD system, unit tests will always remain granular and limited in scope.&lt;/p&gt;

&lt;p&gt;Unit tests allow developers to flag problematic code modifications, but unit tests cannot accurately determine whether all parts of a given system are working &lt;strong&gt;together flawlessly&lt;/strong&gt;.  Said differently, unit tests cannot establish whether all usage scenarios are fully tested and meet an organization&amp;#39;s quality standards.&lt;/p&gt;

&lt;p&gt;By contrast, end-to-end tests can check/analyze whether the entire system operates as expected (the whole and not just its parts). End-to-end tests can emulate user actions and determine whether real output matches expected outcomes. Unit tests are important, but we believe that only end-to-end test automation can deliver the reliability users have come to expect from today&amp;#39;s top software organizations.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;testcafe-end-to-end-testing-made-easy&quot;&gt;&lt;/a&gt;TestCafe – End-to-End Testing Made Easy &lt;a class=&quot;permalink&quot; href=&quot;#testcafe-end-to-end-testing-made-easy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe is an enterprise-ready end-to-end testing framework with an intuitive API. Unlike legacy frameworks such as Selenium, TestCafe is easy to install, run, and integrate within an organization&amp;#39;s CI/CD pipeline. You can install the framework via npm with a single command. Since TestCafe does not require tedious configuration or plugins, it can be wound up in a new CI system within minutes. And yes, with TestCafe, you do not need to locate, install, and configure additional testing software/modules. TestCafe is self-contained and only requires Node.js and your preferred browser (no browser plugins are needed).&lt;/p&gt;

&lt;p&gt;In addition, TestCafe allows you to test next-gen web features with absolute ease. TestCafe supports all major modern browsers (either locally or cloud-based) – across a variety of mobile or desktop devices. TestCafe can execute its tests on macOS, Windows, Linux, iOS, and Android. You can use Chrome, Firefox, Safari, Edge and Internet Explorer when and where appropriate – you can even use headless browsers (a great way to decrease testing time and to execute browser tests on VMs with no graphical system).&lt;/p&gt;

&lt;p&gt;As you&amp;#39;ll see below, we&amp;#39;ve taken care of everything under the hood so you and your team can avoid configuration hassles and the steep learning curve associated with legacy testing frameworks.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;how-to-integrate-testcafe-in-your-cicd&quot;&gt;&lt;/a&gt;How to Integrate TestCafe in Your CI/CD &lt;a class=&quot;permalink&quot; href=&quot;#how-to-integrate-testcafe-in-your-cicd&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe can be incorporated into a pipeline with a few simple steps:  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Install Node.js&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Install TestCafe&lt;/strong&gt;. As mentioned earlier, TestCafe can be installed with a simple command: &lt;code&gt;npm install -g testcafe&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run TestCafe tests&lt;/strong&gt;. Only a single command is required to execute a test (for instance: &lt;code&gt;testcafe chrome:headless ./tests&lt;/code&gt;). With this simple command, TestCafe will auto detect the browser (if installed), launch it, and run your tests automatically.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TestCafe ships with five reporters – modules that can generate test execution reports for your CI/CD. JSON, JUnit, xUnit, and console output (with rich formatting) are built-in. You can also use reporters developed by the TestCafe user community for &lt;a href=&quot;https://www.npmjs.com/package/testcafe-reporter-nunit&quot;&gt;NUnit&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/testcafe-reporter-teamcity&quot;&gt;TeamCity&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/testcafe-reporter-slack&quot;&gt;Slack&lt;/a&gt;, etc. Should you require these community plugins, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the desired third-party reporter via npm: &lt;code&gt;npm install testcafe testcafe-reporter-nunit&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Run TestCafe tests much like step 3: &lt;code&gt;testcafe chrome:headless ./tests -r nunit:report.xml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn more and about TestCafe and CI system integration via the following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/jenkins.html&quot;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/github-actions.html&quot;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/travis.html&quot;&gt;Travis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/circleci.html&quot;&gt;CircleCI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/teamcity.html&quot;&gt;TeamCity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/gitlab.html&quot;&gt;GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/azure-devops.html&quot;&gt;Azure DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/bitbucket-pipelines.html&quot;&gt;BitBucket Pipelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/appveyor.html&quot;&gt;AppVeyor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: For Jenkins, TestCafe can post videos and screenshot it captured during test execution. To enable this functionality, you will need to install &lt;a href=&quot;https://plugins.jenkins.io/testcafe/&quot;&gt;the Jenkins plugin&lt;/a&gt; and use a dedicated &lt;a href=&quot;https://www.npmjs.com/package/testcafe-reporter-jenkins&quot;&gt;Jenkins reporter&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;docker-image&quot;&gt;&lt;/a&gt;Docker Image &lt;a class=&quot;permalink&quot; href=&quot;#docker-image&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe is easy to install and requires a very basic environment. Of course, you can wind it up even faster with Docker. To get started, download a pre-configured image from Docker Hub:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker pull testcafe/testcafe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The image is based on ArcLinux and includes Node.js, TestCafe, Chrome, and Firefox. It is ready to execute tests as needed:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; //d/tests:/tests &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; testcafe/testcafe firefox:headless /tests/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use this image on your computer to perform tests on a host machine or remote machines within your network. See the following help topic for additional Docker-related information: &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/use-testcafe-docker-image.html&quot;&gt;Use TestCafe&amp;#39;s Docker Image&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;github-actions&quot;&gt;&lt;/a&gt;GitHub Actions &lt;a class=&quot;permalink&quot; href=&quot;#github-actions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The GitHub Actions CI service is ideal for projects developed on GitHub. To help you quickly integrate TestCafe into your Actions workflows, we created the &lt;a href=&quot;https://github.com/DevExpress/testcafe-action&quot;&gt;Run TestCafe&lt;/a&gt; action. This action installs TestCafe and runs tests on your behalf. To begin, you simply need to add TestCafe command line arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DevExpress/testcafe-action@latest&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tests&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;testcafe-adoption-made-easy&quot;&gt;&lt;/a&gt;TestCafe: Adoption Made Easy &lt;a class=&quot;permalink&quot; href=&quot;#testcafe-adoption-made-easy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ready to see TestCafe&amp;#39;s capabilities in action? Want to see how quickly you can incorporate test automation into your CI/CD workflow?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/getting-started/&quot;&gt;Get Started Today&lt;/a&gt; or &lt;a href=&quot;https://devexpress.github.io/testcafe/support/&quot;&gt;Ask Us&lt;/a&gt; for more information. We are here to help.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Sep 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/how-testcafe-can-help-you-to-deliver-faster.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/how-testcafe-can-help-you-to-deliver-faster.html</guid>
        
        
      </item>
    
      <item>
        <title>Introducing Multi-window Tests (Beta)</title>
        <description>&lt;h1&gt;Introducing Multi-window Tests (Beta)&lt;/h1&gt;
&lt;p&gt;Modern web apps often launch new browser windows to authenticate users through third-party websites or display additional interactive content.&lt;/p&gt;

&lt;p&gt;TestCafe v1.9.0 introduces partial support for multi-window tests. You can now use client-side calls to open and close browser windows. The updated API includes additional window management methods. During the &amp;#39;beta&amp;#39; stage, this functionality is only enabled in local instances of Chrome and Firefox. Keep in mind that this feature is not ready for use in production environments. Both the syntax and capabilities are subject to change.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;client-side-window-events&quot;&gt;&lt;/a&gt;Client-side window events &lt;a class=&quot;permalink&quot; href=&quot;#client-side-window-events&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The TestCafe browser automation driver detects and automatically activates newly launched windows. After the content is loaded, and all asynchronous requests are resolved, the test continues in the new window. When that window is closed, TestCafe switches back to the parent window and resumes the test.&lt;/p&gt;

&lt;p&gt;The sample code below demonstrates an OAuth login scenario. Lines &lt;code&gt;8&lt;/code&gt; through &lt;code&gt;10&lt;/code&gt; run in the external OAuth window.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Login via &amp;lt;Service Name&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://my-page&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Should log in via &amp;lt;Service Name&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#login-popup&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#username&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#pass&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mySecret&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#user&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Hello %Username%!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Make sure we are logged in&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/testcafe/images/blog/2020-8-26-multi-window-scheme-auto-switching.svg&quot; alt=&quot;A scheme that illustrates automatic window switching&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;You do not need to write extra code to create basic multi-window tests. When you need to arbitrarily open, close and switch between windows, use the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/multiple-browser-windows.html&quot;&gt;TestCafe API&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;switch-between-windows&quot;&gt;&lt;/a&gt;Switch between windows &lt;a class=&quot;permalink&quot; href=&quot;#switch-between-windows&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtopreviouswindow.html&quot;&gt;t.switchToPreviousWindow&lt;/a&gt; method activates the last active window. If you only have two windows open, this method will cycle between them. This is useful in a variety of scenarios.&lt;/p&gt;

&lt;p&gt;Imagine, for example, that you&amp;#39;re testing a real estate listings website. You want to make sure that once a new property is added, it appears in the window with all available listings. The following test implements this scenario:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Property List&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://url.com/properties&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Open the listings page&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Check the property list&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://url.com/addnewproperty&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Open the 'add new property' page in a new window&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#make-public&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Publish the listing&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToPreviousWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Go back to the listings page&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.property-list li&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;New &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Check if the new listing is displayed&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/testcafe/images/blog/2020-8-26-multi-window-scheme-switchtowindow-scenario.svg&quot; alt=&quot;A scheme that illustrates switching between windows&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;manage-multiple-windows&quot;&gt;&lt;/a&gt;Manage multiple windows &lt;a class=&quot;permalink&quot; href=&quot;#manage-multiple-windows&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Test scenarios with more than two open windows require more precision. The &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtowindow.html&quot;&gt;t.switchToWindow&lt;/a&gt; method can activate any open browser window if you pass a window descriptor object or a predicate function with the window description.&lt;/p&gt;

&lt;p&gt;To obtain a window descriptor, call the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getcurrentwindow.html&quot;&gt;t.getCurrentWindow&lt;/a&gt; method or save the return value when you open a new window.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;windowDesc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://devexpress.github.io/testcafe/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;windowDesc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The predicate function must contain a description of the window&amp;#39;s URL or title. The URL object has the same structure as its &lt;a href=&quot;https://nodejs.org/api/url.html&quot;&gt;Node.JS counterpart&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://devexpress.github.io/testcafe/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Imagine you are debugging a task manager app. To ensure that both the task list and the notification feed are updated in real time, use the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtowindow.html&quot;&gt;t.switchToWindow&lt;/a&gt; method.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Tasks View&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://url.com/add-task&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Add a new task&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://url.com/tasks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Open a new window with the task list&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://url.com/feed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Open the notification feed&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/add-task&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Go back to the new task form&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#task-description&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Redesign the landing page by 1 Feb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fill in the new task form&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit-task&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Submit the task&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/tasks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Switch back to the task list&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.task-item&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Check if the new task is displayed&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Switch to the notification feed&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;.message&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Redesign the landing page by 1 Feb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Check for the corresponding notification&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/testcafe/images/blog/2020-8-26-multi-window-scheme-task-manager.svg&quot; alt=&quot;A scheme that illustrates the task manager example&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;api-overview&quot;&gt;&lt;/a&gt;API overview &lt;a class=&quot;permalink&quot; href=&quot;#api-overview&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The updated API includes a number of useful window management methods.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/openwindow.html&quot;&gt;t.openWindow(url)&lt;/a&gt; opens a new window and points it to the specified URL.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getcurrentwindow.html&quot;&gt;t.getCurrentWindow()&lt;/a&gt; obtains the window descriptor that corresponds to the active window.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtowindow.html#tswitchtowindowwindow&quot;&gt;t.switchToWindow(windowDescriptor)&lt;/a&gt; activates the window that corresponds to the window descriptor.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtowindow.html#tswitchtowindowpredicate&quot;&gt;t.switchToWindow(predicate)&lt;/a&gt; uses the predicate function to find a matching window, and activates it. The predicate can include the window&amp;#39;s title and URL.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtoparentwindow.html&quot;&gt;t.switchToParentWindow()&lt;/a&gt; activates the parent of the active window.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtopreviouswindow.html&quot;&gt;t.switchToPreviousWindow()&lt;/a&gt; activates the last active window.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/closewindow.html&quot;&gt;t.closeWindow()&lt;/a&gt; closes the active window.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/closewindow.html&quot;&gt;t.closeWindow(windowDescriptor)&lt;/a&gt; closes the window that corresponds to the window descriptor.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;try-the-new-api-and-let-us-know-what-you-think&quot;&gt;&lt;/a&gt;Try the new API and let us know what you think &lt;a class=&quot;permalink&quot; href=&quot;#try-the-new-api-and-let-us-know-what-you-think&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To try the functionality described in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install TestCafe version 1.9.0 or later;&lt;/li&gt;
&lt;li&gt;Create a test scenario that incorporates more than one browser window;&lt;/li&gt;
&lt;li&gt;Include the window management methods from this article in the test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The TestCafe team is proud to create API that realistically model user behavior. If you find that the new window management capabilities can be modified to better serve your needs, please let us know. Submit your feedback and bug reports to &lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/new/choose&quot;&gt;our GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Refer to the TestCafe help topics for additional information about these methods.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Aug 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/introducing-multi-window-tests-beta.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/introducing-multi-window-tests-beta.html</guid>
        
        
      </item>
    
      <item>
        <title>Upcoming Webinar: The Fastest Way to Your Next Test – TestCafe + TestCafe Studio</title>
        <description>&lt;h1&gt;Upcoming Webinar: The Fastest Way to Your Next Test – TestCafe + TestCafe Studio&lt;/h1&gt;
&lt;p&gt;In this webinar, our Technical Evangelist Paul Usher will demonstrate the difference between TestCafe and TestCafe Studio. Paul will show you how to write code-based tests more quickly and he&amp;#39;ll explore the power of TestCafe Studio&amp;#39;s integrated visual test recorder (for those who don&amp;#39;t want to manually write test code).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Paul&amp;#39;s topics will include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to create and debug tests in TestCafe Studio without writing any code.&lt;/li&gt;
&lt;li&gt;How to create stable selectors for your tests.&lt;/li&gt;
&lt;li&gt;The advantages of TestCafe&amp;#39;s Smart Assertion mechanism.&lt;/li&gt;
&lt;li&gt;How to leverage both TestCafe and TestCafe Studio within your organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;end-to-end-web-testing-made-easy&quot;&gt;&lt;/a&gt;End-to-End web testing made easy &lt;a class=&quot;permalink&quot; href=&quot;#end-to-end-web-testing-made-easy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe Open Source and TestCafe Studio are driver free and do not require you to manage complex plug-ins. If you&amp;#39;re ready to test your web apps and want to deliver more reliable solutions to your end-users, be sure to click the link below and register your interest in this live webinar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Webinar Date:&lt;/strong&gt; Tuesday, September 8, 2020&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start Time:&lt;/strong&gt; 10AM Pacific Time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://dxpr.es/34jU51F&quot;&gt;Register&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Aug 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/the-fastest-way-to-your-next-test.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/the-fastest-way-to-your-next-test.html</guid>
        
        
      </item>
    
      <item>
        <title>TestCafe Webinar - Your Questions Answered</title>
        <description>&lt;h1&gt;TestCafe Webinar - Your Questions Answered&lt;/h1&gt;
&lt;p&gt;We recently hosted a webinar on TestCafe and found the response overwhelming. During the presentation a large number of questions were raised, and as promised, the team have been through and answered them all.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;watch-the-webinar&quot;&gt;&lt;/a&gt;Watch the Webinar &lt;a class=&quot;permalink&quot; href=&quot;#watch-the-webinar&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;!-- markdownlint-disable MD033 --&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/kwV_HCE7neM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;!-- markdownlint-enable MD033 --&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;webinar-resources&quot;&gt;&lt;/a&gt;Webinar Resources &lt;a class=&quot;permalink&quot; href=&quot;#webinar-resources&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does the book (&lt;em&gt;End-to-End Testing with TestCafe&lt;/em&gt; by Dennis Martinez) go over the examples from the Webinar?&lt;/strong&gt;&lt;br&gt;
This webinar is based on the book, so you will certainly find details about the examples we showed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is the webinar available in other languages?&lt;/strong&gt;&lt;br&gt;
We currently hold online events in English only.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In what language the application you show is written?&lt;/strong&gt;&lt;br&gt;
It is JavaScript, the ES6 standard.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;testcafe-benefits&quot;&gt;&lt;/a&gt;TestCafe Benefits &lt;a class=&quot;permalink&quot; href=&quot;#testcafe-benefits&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What are the advantages of TestCafe over Selenium/Cypress/Nightwatch.js/Robot Framework/WebdriverIO?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TestCafe does not require browser plugins, SDKs or other tools and libraries - just Node.js and browsers.&lt;/li&gt;
&lt;li&gt;You don&amp;#39;t need to configure testing environment. Install TestCafe from npm and you are ready to test.&lt;/li&gt;
&lt;li&gt;TestCafe is truly cross-browser and cross-platform. It can run tests on Windows, macOS, Linux, iOS, and Android.  Supported browsers include Chrome, Firefox, Safari, Edge, and Internet Explorer.&lt;/li&gt;
&lt;li&gt;TestCafe features a built-in wait mechanism. You don&amp;#39;t need to insert manual waiting in your tests. TestCafe waits for all kinds of loadings and animations automatically, so your tests are stable even when they slow down for whatever reason.&lt;/li&gt;
&lt;li&gt;TestCafe allows you to test even the most complex scenarios like those with cross-domain navigation, file upload, sophisticated iframe use cases, secure services (payment, geolocation) or multiple windows (in beta).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;license&quot;&gt;&lt;/a&gt;License &lt;a class=&quot;permalink&quot; href=&quot;#license&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Do I need to purchase a separate license for TestCafe? Is it included in any of the DevExpress subscriptions?&lt;/strong&gt;&lt;br&gt;
TestCafe is open-source and free. It is licensed under &lt;a href=&quot;https://github.com/DevExpress/testcafe/blob/master/LICENSE&quot;&gt;the MIT license&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;desktop-application-testing&quot;&gt;&lt;/a&gt;Desktop Application Testing &lt;a class=&quot;permalink&quot; href=&quot;#desktop-application-testing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does TestCafe only work in a browser? Can I use it to test desktop applications, like WinForms?&lt;/strong&gt;&lt;br&gt;
TestCafe is designed for Web applications only. Thankfully, if you use Electron.js for your desktop application, you can easily &lt;a href=&quot;https://github.com/DevExpress/testcafe-browser-provider-electron&quot;&gt;test it with TestCafe&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;parallelization&quot;&gt;&lt;/a&gt;Parallelization &lt;a class=&quot;permalink&quot; href=&quot;#parallelization&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Can I start 100 TestCafe tests to simulate high load?&lt;/strong&gt;&lt;br&gt;
You can start 100 parallel browser instances if your computer has sufficient resources to run such a number of browsers. But we recommend using TestCafe for end-to-end rather than load testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I run the tests in parallel in multiple browser windows?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe allows you to execute tests concurrently. In concurrent mode, TestCafe invokes multiple instances of each browser. These instances constitute the pool of browsers against which tests run concurrently, i.e. each test runs in the first available instance. You can find information how to run tests in parallel &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/run-tests.html#run-tests-concurrently&quot;&gt;in this topic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How well does TestCafe scale when it comes to parallelization? What is the ideal number of tests that can be run in parallel?&lt;/strong&gt;&lt;br&gt;
You can run any number of tests in concurrent mode. Regarding the number of browser instances that can be used to run these test, it&amp;#39;s hard to name an optimal number. It all depends on the resources available on your machine and the tests themselves. It is best to choose this number on a case-by-case basis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I have multiple TestCafe instances running tests?&lt;/strong&gt;&lt;br&gt;
Yes, you can use several TestCafe instances. There are no special restrictions here. But in this case you will have to make sure that the instances do not conflict for resources (open ports, access to files, etc.).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is there a way to start more parallel tests in memory without running browsers?&lt;/strong&gt;&lt;br&gt;
Concurrent mode implies launching the specified number of browser instances. All instances will be launched even if the number of tests is not enough to run at least one on each of them. Therefore, now there is no way to use this mode without launching browsers.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;integrations&quot;&gt;&lt;/a&gt;Integrations &lt;a class=&quot;permalink&quot; href=&quot;#integrations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does TestCafe integrate with BrowserStack?&lt;/strong&gt;&lt;br&gt;
Yes, you can run tests in Cloud Testing Services (BrowserStack, Sauce Labs) via the corresponding plugins. See more &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#browsers-in-cloud-testing-services&quot;&gt;in the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I run TestCafe on Azure DevOps?&lt;/strong&gt;&lt;br&gt;
You can find a topic about Azure DevOps integration in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/azure-devops.html&quot;&gt;the TestCafe documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I run TestCafe on Jenkins where there are no local browsers installed? Should I use headless mode on Jenkins?&lt;/strong&gt;&lt;br&gt;
If the machine that runs Jenkins does not have local browsers installed, you can use &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/run-tests.html#test-in-portable-browsers&quot;&gt;portable&lt;/a&gt; browsers or &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/run-tests.html#test-in-cloud-testing-services&quot;&gt;cloud testing services&lt;/a&gt; (BrowserStack, SauceLabs).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/run-tests.html#use-headless-mode&quot;&gt;Headless mode&lt;/a&gt; is supported for both locally installed and portable browsers. We recommend that you use headless mode to decrease testing time. You can run browsers in headless mode even on machines without graphical system.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/continuous-integration/jenkins.html&quot;&gt;This tutorial&lt;/a&gt; describes how to integrate TestCafe with Jenkins.&lt;/p&gt;

&lt;p&gt;You may also wish to check &lt;a href=&quot;https://devexpress.github.io/testcafe/media/team-blog/introducing-the-testcafe-jenkins-plugin.html&quot;&gt;the TestCafe plugin for Jenkins&lt;/a&gt; that attaches screenshots and videos to the Jenkins test results page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is TestCafe compatible with Angular applications?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe has full support for Angular applications. You can use &lt;a href=&quot;https://github.com/DevExpress/testcafe-angular-selectors&quot;&gt;the Angular selector plugin&lt;/a&gt; that adds selector extensions to make it easier to test Angular applications with TestCafe. These extensions allow you to create a Selector to find elements on the page in a way that is native to Angular applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe support Vue?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe allows you test Vue applications the same way as any other apps. You can use &lt;a href=&quot;https://github.com/DevExpress/testcafe-vue-selectors&quot;&gt;the Vue selector plugin&lt;/a&gt; that contains selector extensions to make it easier to test Vue components with TestCafe. These extensions allow you to test Vue component state and result markup alongside.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can TestCafe pick elements by their React component name?&lt;/strong&gt;&lt;br&gt;
You can use &lt;a href=&quot;https://github.com/DevExpress/testcafe-react-selectors&quot;&gt;the TestCafe selector plugin for React components&lt;/a&gt;. This plugin adds selector extensions that allow you to select page elements in a way that is native to React. For instance, you can use component names to identify page elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is TestCafe compatible with Knockout?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe can test applications based on Knockout. There are no known issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe support Bamboo?&lt;/strong&gt;&lt;br&gt;
You can use &amp;quot;Script Task&amp;quot; in Bamboo setting to write a wrapper that invokes automated tests. Alternatively, you can use &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/use-testcafe-docker-image.html&quot;&gt;the TestCafe Docker image&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;blazor&quot;&gt;&lt;/a&gt;Blazor &lt;a class=&quot;permalink&quot; href=&quot;#blazor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Can I use TestCafe to test a Blazor application?&lt;/strong&gt;&lt;br&gt;
TestCafe supports testing for Blazor apps. You can test your Blazor app the same way as any other application. There are no known issues.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;action-chaining&quot;&gt;&lt;/a&gt;Action Chaining &lt;a class=&quot;permalink&quot; href=&quot;#action-chaining&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Are there limitations as to what kinds of actions can be chained? Is it the best practice to chain as many actions as I can?&lt;/strong&gt;&lt;br&gt;
Almost all TestCafe &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/&quot;&gt;test controller&amp;#39;s methods&lt;/a&gt; can be chained, except those that return a value and hence break the chain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/eval.html&quot;&gt;t.eval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getbrowserconsolemessages.html&quot;&gt;t.getBrowserConsoleMessages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getnativedialoghistory.html&quot;&gt;t.getNativeDialogHistory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can chain these methods in any desirable manner but we recommend adding blank lines between logical parts of the action chain to improve tests readability, e.g.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#id1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//some settings&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#id1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#id1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#result&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;expected text&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//assertion&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Can I extend the TestController object with my own chainable methods? Or only helpers and pageobjects are the way to go?&lt;/strong&gt;&lt;br&gt;
TestController cannot be extended with custom methods at the moment. We may consider adding this feature, but it isn&amp;#39;t in our current roadmap. As you correctly suggested, you can use helpers and page objects to implement custom methods.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;testcafe-studio&quot;&gt;&lt;/a&gt;TestCafe Studio &lt;a class=&quot;permalink&quot; href=&quot;#testcafe-studio&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Can TestCafe record my actions (some tests need many entries and writing them is very time-consuming)?&lt;/strong&gt;&lt;br&gt;
You can use &lt;a href=&quot;https://www.devexpress.com/products/testcafestudio/&quot;&gt;TestCafe Studio&lt;/a&gt; that has a built-in test recorder. It allows you to record your actions without coding them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is there a user interface for building tests, or is it all JS-based?&lt;/strong&gt;&lt;br&gt;
You can use TestCafe Studio which is a UI tool to maintain your tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is TestCafe Studio a desktop application or is it available as a Web service?&lt;/strong&gt;&lt;br&gt;
TestCafe Studio is a cross-platform desktop application (powered by Electron.js). You can download its installer for Windows, macOS or Linux and install on your machine. Offline registration is available for computers without internet access. Read more in the &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/400163/guides/installation&quot;&gt;Installation topic&lt;/a&gt; in the Docs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe Studio require a license?&lt;/strong&gt;&lt;br&gt;
Yes, this is a &lt;a href=&quot;https://devexpress.com/testcafestudio&quot;&gt;commercial product&lt;/a&gt; that requires obtaining a license. There are two options available: TestCafe Studio and TestCafe Studio Pro with DevExpress Technical support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can TestCafe Studio generate tests steps in a more user-friendly form than code?&lt;/strong&gt;&lt;br&gt;
TestCafe Studio has the built-in &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/400190/user-interface/test-editor&quot;&gt;Test Editor&lt;/a&gt; designed for codeless test creation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can you change the order of tests on the side panel on the left?&lt;/strong&gt;&lt;br&gt;
The &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/400182/user-interface/explorer-panel&quot;&gt;Explorer Panel&lt;/a&gt; allows you to view and manage files in your testing directory. For recorded tests, the Explorer Panel displays fixtures and tests. You can create new tests, copy/paste them and more. But currently you can&amp;#39;t change the order of the tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are there more formats of report logs in TestCafe Studio?&lt;/strong&gt;&lt;br&gt;
In the Report View you can see tests run report in the TestCafe Studio format - &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/400187/user-interface/report-view&quot;&gt;Grid View&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following built-in reports formats are also available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;xUnit&lt;/li&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Minimal&lt;/li&gt;
&lt;li&gt;Spec&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can install TestCafe reporter plugins to add more formats: &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/400187/user-interface/report-view#get-more-report-formats&quot;&gt;Get More Report Formats&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is there any guide with comprehensive instructions and examples for TestCafe Studio?&lt;/strong&gt;&lt;br&gt;
See the guides, videos, and examples &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/400157/testcafe-studio&quot;&gt;in the TestCafe Studio documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the element locator strategy?&lt;/strong&gt;&lt;br&gt;
TestCafe Studio use some characteristic of the DOM element in order to identify it on the page, such as id, class, text etc. You can set the usage priority of these characteristics, switch them off (e.g. for auto generated id) or create new ones based on custom attributes. See the details in &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/400407/test-actions/element-selectors&quot;&gt;the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is TestCafe Studio a part of the Universal Subscription?&lt;/strong&gt;&lt;br&gt;
Yes, &lt;a href=&quot;https://www.devexpress.com/subscriptions/universal.xml&quot;&gt;TestCafe Studio Pro version is&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe Studio support console.log output? I am currently running tests from the command line so I&amp;#39;d like to see my console.log statements.&lt;/strong&gt;&lt;br&gt;
You can add &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/401265/test-actions/custom-scripts&quot;&gt;the Run TestCafe Script action&lt;/a&gt;. In this action, you can use &lt;code&gt;console.log()&lt;/code&gt; to print messages directly, or even call &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/getbrowserconsolemessages.html&quot;&gt;t.getBrowserConsoleMessages()&lt;/a&gt; to fetch messages from the browser&amp;#39;s console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can TestCafe Studio generate reports with statistics, graphs, pies, etc., illustrating execution results?&lt;/strong&gt;&lt;br&gt;
Currently there is no such capability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In TestCafe Studio, moving a line becomes almost impossible over 100 lines. Is that a memory issue that can be changed via config?&lt;/strong&gt;&lt;br&gt;
We cannot reproduce this behavior on our side. Please create an inquiry on &lt;a href=&quot;https://www.devexpress.com/ask&quot;&gt;https://www.devexpress.com/ask&lt;/a&gt; and provide more detail about the issue you encounter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are using both DevExpress and custom controls in our application. We record tests in TestCafe Studio, but they fail when we run them. Can you tell why this happens?&lt;/strong&gt;&lt;br&gt;
To resolve the issue, please refer to the Troubleshooting section on our &lt;a href=&quot;https://docs.devexpress.com/TestCafeStudio/400610/faq&quot;&gt;FAQ page&lt;/a&gt;. If suggestions described there do not help or apply to your case, create a ticket on &lt;a href=&quot;https://www.devexpress.com/ask&quot;&gt;https://www.devexpress.com/ask&lt;/a&gt; and describe your issue in detail.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;page-model&quot;&gt;&lt;/a&gt;Page Model &lt;a class=&quot;permalink&quot; href=&quot;#page-model&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Do you create the page models manually? Can the page models be dynamically generated?&lt;/strong&gt;&lt;br&gt;
Page Models should be created manually, there is no built-in way to generate page models automatically. A page model reflects the internal structure of the testing page: what is the container, what is the parent and what is the child, etc., which distinguishing characteristics are best used to identify elements. Any automatically generated model is unlikely to reflect these semantics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it necessary to create selectors with the Selector constructor in a page object class?&lt;/strong&gt;&lt;br&gt;
No, you can use CSS strings:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submitButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if you want to extend or chain such a selector with &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/&quot;&gt;selector&amp;#39;s methods&lt;/a&gt;, you will need to use the Selector constructor:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submitButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Submit&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cancelButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Cancel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Can I add additional methods to page object in TestCafe?&lt;/strong&gt;&lt;br&gt;
Yes, you can add methods to a page model. Usually these methods are the most frequently repeated actions specific to this page. See an example in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/page-model.html#step-7---add-actions-to-the-page-model&quot;&gt;the TestCafe docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe support the PageObjects library?&lt;/strong&gt;&lt;br&gt;
If you mean &lt;a href=&quot;https://github.com/devcon5io/pageobjects&quot;&gt;this PageObjects library&lt;/a&gt;, then TestCafe does not support it because this library is designed for Selenium.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;database-access&quot;&gt;&lt;/a&gt;Database Access &lt;a class=&quot;permalink&quot; href=&quot;#database-access&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Can test results be sent to a database?&lt;/strong&gt;&lt;br&gt;
There&amp;#39;s no built-in functionality for this, but you can certainly &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/extend-testcafe/reporter-plugin.html&quot;&gt;make a plugin&lt;/a&gt; that will do this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can TestCafe connect to databases to verify that the correct data was written?&lt;/strong&gt;&lt;br&gt;
TestCafe doesn&amp;#39;t have built-in functionality for interaction with databases. But you can use any npm module for it.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;browsers&quot;&gt;&lt;/a&gt;Browsers &lt;a class=&quot;permalink&quot; href=&quot;#browsers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does TestCafe support Microsoft Edge? Can TestCafe create mocks and run tests in IE11?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe supports both browsers. You can find the list of supported browsers in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#officially-supported-browsers&quot;&gt;the TestCafe docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;selectors&quot;&gt;&lt;/a&gt;Selectors &lt;a class=&quot;permalink&quot; href=&quot;#selectors&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What type of selectors are available? Is it only HTML element IDs and/or classes?&lt;/strong&gt;&lt;br&gt;
You can use any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;pure CSS selectors&lt;/a&gt; or &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/&quot;&gt;TestCafe Selector API&lt;/a&gt; that extends capabilities offered by CSS selectors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I target elements based on text that is actually visible to the end-user?&lt;/strong&gt;&lt;br&gt;
TestCafe Selector&amp;#39;s &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/withtext.html&quot;&gt;withText&lt;/a&gt; method finds elements by text that is visible to the end-user (the element&amp;#39;s &lt;code&gt;innerText&lt;/code&gt; property). You can also create a selector that uses custom logic to find an element. Pass a function to the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/constructor.html#initialize-selectors&quot;&gt;selector&amp;#39;s constructor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it possible to set the waiting time for an element? What if I mistyped the selector&amp;#39;s &amp;quot;name&amp;quot; or the page is loading really slow? How long does TestCafe wait by default?&lt;/strong&gt;&lt;br&gt;
You can specify the Selector&amp;#39;s &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/constructor.html#optionstimeout&quot;&gt;timeout option&lt;/a&gt;. During this timeout, the selector waits for the element. The default timeout duration is &lt;code&gt;10000&lt;/code&gt; ms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I use auto-generated names for DevExpress control&amp;#39;s elements in my application. Can TestCafe interact with them?&lt;/strong&gt;&lt;br&gt;
Yes, you can identify these elements by their static parts. See an example in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/select-page-elements.html#select-elements-with-dynamic-ids&quot;&gt;our docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I use XPath to locate elements?&lt;/strong&gt;&lt;br&gt;
XPath selectors are not built-in with TestCafe, but you can implement a simple helper method to use them. &lt;a href=&quot;https://github.com/DevExpress/testcafe-examples/tree/master/examples/use-xpath-selectors&quot;&gt;See an example here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I verify a certain element does not exist or will that cause a failure?&lt;/strong&gt;&lt;br&gt;
If an element used in some action doesn&amp;#39;t exist, a test fails. A test run report then indicates that the test failed because a target element doesn&amp;#39;t exist on the page. To check if the element exists before TestCafe attempts to interact with it, use the following approach&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#element&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For instance, you would use this verification to close ad popups (should they appear).&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;debug&quot;&gt;&lt;/a&gt;Debug &lt;a class=&quot;permalink&quot; href=&quot;#debug&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Are there any approaches that help debug tests? How can I debug TestCafe and the Hammerhead proxy?&lt;/strong&gt;&lt;br&gt;
Check out &lt;a href=&quot;https://devexpress.github.io/testcafe/media/team-blog/how-to-debug-tests-in-testcafe-quick-guide.html&quot;&gt;this blog post&lt;/a&gt; on how to debug your application and tests.&lt;/p&gt;

&lt;p&gt;You can also find the instruction about how to debug in other IDEs in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/debug.html&quot;&gt;our guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To debug TestCafe and Hammerhead, enable the development mode. Use the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--dev&quot;&gt;--dev flag&lt;/a&gt; when you run tests:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome my-tests &lt;span class=&quot;nt&quot;&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;What are the available debug options?&lt;/strong&gt;&lt;br&gt;
The following capabilities help you determine the cause of errors and failures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#takeonfails&quot;&gt;Take screenshots automatically when tests fail&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--video-basepath&quot;&gt;Capture videos of test runs&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--speed-factor&quot;&gt;Set the speed of test execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#--debug-on-fail&quot;&gt;Enter debug mode&lt;/a&gt; automatically when the first test fails,&lt;/li&gt;
&lt;li&gt;Execute tests step by step in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-d---debug-mode&quot;&gt;debug mode&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Can TestCafe capture a screenshot when a test fails?&lt;/strong&gt;&lt;br&gt;
Absolutely, enable the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#takeonfails&quot;&gt;takeOnFails&lt;/a&gt; option to do this.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;authentication&quot;&gt;&lt;/a&gt;Authentication &lt;a class=&quot;permalink&quot; href=&quot;#authentication&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Can I log in once and execute multiple tests under the same account rather than logging in in every test?&lt;/strong&gt;&lt;br&gt;
Yes, you can use roles to perform actions that log you in only once. In the subsequent tests, you just activate the role you defined earlier to log in without repeating the authentication process each time. See &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/authentication.html#user-roles&quot;&gt;User Roles&lt;/a&gt; in the documentation for details.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do roles work with auth0/openid which has JWT in headers?&lt;/strong&gt;&lt;br&gt;
Roles can process the JWT if it is sent in the cookies or stored in the local or session storage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Would we run into any issues if we&amp;#39;re using Microsoft authentication tokens for permissions?&lt;/strong&gt;&lt;br&gt;
You should not have any issue. Please try this and see how it works. If you face any issues, let us know, so we can research it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does TestCafe log out the user to switch to a different role? Does it just re-open the page?&lt;/strong&gt;&lt;br&gt;
When you switch to a role that was active previously in the current session, TestCafe restores cookies and browser&amp;#39;s local and session storage where authentication data is located. If the new role wasn&amp;#39;t used yet, TestCafe just resets the cookies and storage and then performs authentication actions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can you create Roles with API calls instead of functional steps?&lt;/strong&gt;
If your question is about REST API, then yes, you can call REST API to authenticate a user in a role. Just note that you need to use a &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/obtain-client-side-info.html&quot;&gt;client function&lt;/a&gt; to call REST API from the browser. You may want to &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/inject-client-scripts.html&quot;&gt;inject a library that can call API into the tested page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the options for smart card logins?&lt;/strong&gt;
TestCafe only supports web-based authentication. That is, your website should be able to authenticate you by your actions in the web browser, without relying on additional hardware. The only way is to deploy a testing instance of your web app without smart card authentication.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;multiple-apps-windows-and-tabs&quot;&gt;&lt;/a&gt;Multiple Apps, Windows, and Tabs &lt;a class=&quot;permalink&quot; href=&quot;#multiple-apps-windows-and-tabs&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Can TestCafe test integration across multiple applications?&lt;/strong&gt;&lt;br&gt;
Yes, you can test any number of web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can you test multiple browser windows at the same time? For example, I may need to access application A, then check application B and come back to A.&lt;/strong&gt;&lt;br&gt;
Yes, you can do this. We released multiple window support in beta in v1.9.0. Please find more information in the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/multiple-browser-windows.html&quot;&gt;Multiple Browser Windows&lt;/a&gt; topic and don&amp;#39;t hesitate to leave your feedback. Your opinion helps us make sure you get the best experience when this feature is released.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe support multiple tabs?&lt;/strong&gt;&lt;br&gt;
You can open and switch between multiple browser windows with &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/multiple-browser-windows.html&quot;&gt;this new beta feature&lt;/a&gt;. TestCafe will open a new popup window instead of a tab when necessary. This is because tabs can be throttled which interrupts TestCafe scripts.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;iframes&quot;&gt;&lt;/a&gt;iframes &lt;a class=&quot;permalink&quot; href=&quot;#iframes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does TestCafe support iframes?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe supports iframes and provides two simple methods to interact with their content: &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtoiframe.html&quot;&gt;switchToIframe&lt;/a&gt; to switch the test&amp;#39;s browsing context to iframe&amp;#39;s context and &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/switchtomainwindow.html&quot;&gt;switchToMainWindow&lt;/a&gt; to switch it back to the main window.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;reports&quot;&gt;&lt;/a&gt;Reports &lt;a class=&quot;permalink&quot; href=&quot;#reports&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;How does TestCafe output test run reports? Where can I find test results?&lt;/strong&gt;&lt;br&gt;
TestCafe shows the test run report in the console by default. You can redirect output to a file or use dedicated reporters to post reports to a CI system or elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What happens when a test fails? What logs are produced?&lt;/strong&gt;&lt;br&gt;
If a test fails, you will see a comprehensive report in the console. For instance:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/blog/2020-8-19-report-example.png&quot; alt=&quot;Report example&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Multiple report formats are supported, including the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;spec&lt;/li&gt;
&lt;li&gt;list&lt;/li&gt;
&lt;li&gt;minimal&lt;/li&gt;
&lt;li&gt;xUnit&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read more in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/reporters.html&quot;&gt;the TestCafe documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In what format does TestCafe generate the reports? Is it XML or HTML?&lt;/strong&gt;&lt;br&gt;
The format depends on the reporter. It can be XML, JSON, HTML, and many others. You can &lt;a href=&quot;https://www.npmjs.com/search?q=testcafe-reporter&quot;&gt;explore the available reporter packages on npm&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;test-organization&quot;&gt;&lt;/a&gt;Test Organization &lt;a class=&quot;permalink&quot; href=&quot;#test-organization&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Can I use logic operators to have different conditional &amp;quot;paths&amp;quot; during a test?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe can do conditional testing. You can use standard JavaScript if-clauses to make this happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it possible to share fixtures between test files?&lt;/strong&gt;&lt;br&gt;
TestCafe treats fixtures declared in different files separately. If you can share your use case when merging fixtures is useful, please &lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/new?template=feature_request.md&quot;&gt;open an issue&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;how-testcafe-works&quot;&gt;&lt;/a&gt;How TestCafe Works &lt;a class=&quot;permalink&quot; href=&quot;#how-testcafe-works&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Did I miss what the &lt;code&gt;async&lt;/code&gt; keyword means in code? Is that to say TestCafe commands can run as other tests are running?&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;async&lt;/code&gt; is a JavaScript keyword that indicates that the function is asynchronous. Technically, an asynchronous function means that this function returns a Promise. TestCafe actions are asynchronous because so are the page events. Page loading, animations, HTTP requests take different amounts of time. The test function is asynchronous as well because it uses asynchronous TestCafe actions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;await&lt;/code&gt; means that the next command should not execute until the previous (&amp;quot;awaited&amp;quot;) command is completed. This is required to execute test actions in the right sequence (and, in the same manner, TestCafe &amp;quot;awaits&amp;quot; tests in a fixture to run them one by one). Note that, by contrast, tests in different browsers can run in parallel, just like in concurrency mode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please provide technical insight about how TestCafe avoids installing special plug-ins in order to interact with the browser. How does it actually interact with browsers?&lt;/strong&gt;&lt;br&gt;
TestCafe proxies the tested webpage and injects automation scripts right inside the proxied copy. This way, browsers do all the work when they execute the injected scripts. You can find more details in the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/how-it-works/&quot;&gt;How It Works&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it possible to access runtimeJS objects from application client libraries loaded in the browser?&lt;/strong&gt;
TestCafe is designed to conceal itself from application&amp;#39;s JavaScript code. This is necessary to ensure that pages proxied by TestCafe run exactly in the same way as they do on the website. For this reason, application code cannot access TestCafe scripts or test code entities.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;waiting-and-asynchrony&quot;&gt;&lt;/a&gt;Waiting and Asynchrony &lt;a class=&quot;permalink&quot; href=&quot;#waiting-and-asynchrony&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What if a portion of a page takes a while to render (for instance, the page uses AJAX). Can TestCafe take it into account?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe tests wait automatically until the page is rendered completely. You can also insert manual waiting, but it shouldn&amp;#39;t be necessary in almost all cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I set up my page in a jQuery callback: &lt;code&gt;$(document).ready(function(){})&lt;/code&gt;. Will there be JS races with TestCafe?&lt;/strong&gt;&lt;br&gt;
TestCafe will wait until the page loads completely and run tests only after that. TestCafe wait mechanisms are designed to prevent races with JS code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It is great that TestCafe handles waiting internally. Would there be a need to override default timeout functionality though? How should a user go about it?&lt;/strong&gt;&lt;br&gt;
You may need to override the default timeout if your page requires extra long waiting. All TestCafe auto-wait timeouts are customizable. You can find more information in the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/built-in-wait-mechanisms.html&quot;&gt;Built-in Wait Mechanisms&lt;/a&gt; topic.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;other-features&quot;&gt;&lt;/a&gt;Other Features &lt;a class=&quot;permalink&quot; href=&quot;#other-features&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Does TestCafe support all ES6 or later features? Do I need plugins to support arrow functions or the async/await syntax?&lt;/strong&gt;&lt;br&gt;
TestCafe supports all modern JavaScript and TypeScript features. No plugins needed, everything works out of the box.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can TestCafe work with the Service Worker?&lt;/strong&gt;&lt;br&gt;
We are currently in the progress of implementing full support for Service Workers. Stay tuned for our updates to be the first to know when we are ready.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe work with Python?&lt;/strong&gt;&lt;br&gt;
You can write tests in JavaScript/TypeScript/CoffeeScript only.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe support upload ( excel ) data functionality?&lt;/strong&gt;&lt;br&gt;
TestCafe can upload files, including Excel, to websites if it is a part of the test scenario. However, if you are asking about API to access Excel data sheets from test code, TestCafe does not provide one out of the box. You can search for npm modules that implement the functionality you need and use them from TestCafe tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about functional test coverage? Does TestCafe support it?&lt;/strong&gt;&lt;br&gt;
Test coverage estimation is not available at the moment.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;miscellaneous&quot;&gt;&lt;/a&gt;Miscellaneous &lt;a class=&quot;permalink&quot; href=&quot;#miscellaneous&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If TestCafe runs in headless mode, is it still possible to grab screenshots on failures?&lt;/strong&gt;&lt;br&gt;
Yes, TestCafe can take screenshots even in headless mode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does this require a test framework like jest/mocha/jasmine?&lt;/strong&gt;&lt;br&gt;
No additional frameworks are required for TestCafe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I use TestCafe to test different resolutions?&lt;/strong&gt;&lt;br&gt;
You can use the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/resizewindow.html&quot;&gt;t.resizeWindow&lt;/a&gt; action to change the browser window size and test adaptive UIs. TestCafe also supports &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/run-tests.html#enable-mobile-device-emulation&quot;&gt;Chromium device emulation&lt;/a&gt; to test on emulated mobile devices of various sizes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we use Test Cafe to compare two documents? Like documents with logos, disclaimers and other information?&lt;/strong&gt;&lt;br&gt;
If you mean visual comparison, TestCafe does not provide this functionality out of the box. However, you can find multiple open-source packages that try to solve this task, like &lt;a href=&quot;https://github.com/tacoss/testcafe-blink-diff&quot;&gt;testcafe-blink-diff&lt;/a&gt;. Note that they are maintained by the community and are not related to the TestCafe team.&lt;/p&gt;

&lt;p&gt;If your goal is to compare HTML, you can pass &lt;code&gt;innerHTML&lt;/code&gt; to a TestCafe assertion as shown in the example in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/selector/addcustomdomproperties.html&quot;&gt;this topic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you change the base URL to test in different environments?&lt;/strong&gt;&lt;br&gt;
You can import the base URL from a configuration file or an environment variable, and then use it to build start page URLs in test code. See &lt;a href=&quot;https://devexpress.github.io/testcafe/faq/#how-do-i-work-with-configuration-files-and-environment-variables&quot;&gt;this example&lt;/a&gt; on the FAQ page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I run TestCafe on a Linux computer without the UI?&lt;/strong&gt;&lt;br&gt;
Yes, you can run your tests on Linux and use headless browsers to run your tests without the UI.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Could you please share ideas about how to do localization testing? Does TestCafe support that?&lt;/strong&gt;&lt;br&gt;
TestCafe does not have built-in functionality for localization testing. As a suggestion, you can fetch the localization strings from a resource file or database with Node.js means or third-party npm modules. Then, you can create &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/recipes/best-practices/create-data-driven-tests.html&quot;&gt;data-driven tests&lt;/a&gt; that check if the displayed strings are localized (present in the localization resources).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When do you plan to release version 1.9.0?&lt;/strong&gt;&lt;br&gt;
1.9.0 was released on August 6th. If you are asking about the multi-window support final release, we do not have an exact date yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does TestCafe handle exceptions?&lt;/strong&gt;&lt;br&gt;
TestCafe considers the test failed if its code throws an exception. The report will indicate the line of code and call stack where this exception originated. Exceptions in JavaScript code on the tested page also make tests fail. However, this behavior is customizable. You can use the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-e---skip-js-errors&quot;&gt;--skip-js-errors&lt;/a&gt; flag to ignore page errors. Similarly, the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-u---skip-uncaught-errors&quot;&gt;--skip-uncaught-errors&lt;/a&gt; flag allows you to continue tests when test code throws an exception.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we measure client-side performance using TestCafe (both HTTP and script execution time)?&lt;/strong&gt;&lt;br&gt;
TestCafe is not intended for this task. In fact, TestCafe impacts webpage performance when it runs tests. We are constantly optimizing our code to minimize this slowdown, but we do not aim to precisely match the original performance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are tests executed in sequence within a fixture?&lt;/strong&gt;&lt;br&gt;
Yes, tests are executed as they are declared in code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I add my custom element library to the context object?&lt;/strong&gt;&lt;br&gt;
You can add anything to the feature and test context objects. However, keep in mind that test code does not run in the browser, so adding browser libraries to the context objects might not help. If this is the case, you may be more interested in the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/inject-client-scripts.html&quot;&gt;custom script injection functionality&lt;/a&gt; designed for user&amp;#39;s client libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can TestCafe test HTML5 features like fullscreen, camera, audio, or video interaction?&lt;/strong&gt;&lt;br&gt;
Yes, you can test these HTML 5 features with TestCafe.&lt;/p&gt;

&lt;p&gt;Note that you might need to set the &lt;code&gt;--autoplay-policy=no-user-gesture-required&lt;/code&gt; browser flag as explained in &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#start-a-browser-with-arguments&quot;&gt;this article&lt;/a&gt; to test the fullscreen mode and audio/video. The camera can be mocked using &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/obtain-client-side-info.html&quot;&gt;ClientFunctions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe support multiple domains in a test?&lt;/strong&gt;&lt;br&gt;
Yes, navigation and requests between different domains work out of the box. You do not need to care if you visit pages on one or several domains.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What happens if TestCafe loses network connection with a remote device that runs tests?&lt;/strong&gt;&lt;br&gt;
Tests cannot run without a network connection because TestCafe must be able to send commands to the remote device. If the connection is interrupted, TestCafe will throw an error saying that a browser connection is lost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it possible to run all JS in one command? Could you please specify this command?&lt;/strong&gt;&lt;br&gt;
If I understand you correctly, yes, you can run all your JS tests using a single console command.
Here is the CLI reference where you can see the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html&quot;&gt;testcafe command syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I noticed non-standard code indentation. Is a respective formatter for VS Code available?&lt;/strong&gt;&lt;br&gt;
We didn&amp;#39;t release a specific formatter because you can use any indentation you prefer with TestCafe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I use TestCafe to test the development and production instances of my app? If so, how can I configure different URLs for my instances?&lt;/strong&gt;&lt;br&gt;
Yes, you can import the base URL from a configuration file or an environment variable, and then use it to build start page URLs in test code. See &lt;a href=&quot;https://devexpress.github.io/testcafe/faq/#how-do-i-work-with-configuration-files-and-environment-variables&quot;&gt;this example&lt;/a&gt; on the FAQ page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does TestCafe have support for file download? Can you set the default file download location using TestCafe API?&lt;/strong&gt;&lt;br&gt;
Yes, if test actions on the page trigger file download, the browser will download it as usually. Then you can access the file from test code to perform verification. Currently, TestCafe API does not allow you to set the default download location.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Aug 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/testcafe-webinar-your-questions-answered.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/testcafe-webinar-your-questions-answered.html</guid>
        
        
      </item>
    
      <item>
        <title>TestCafe v1.9.0 Released</title>
        <description>&lt;h1&gt;TestCafe v1.9.0 Released&lt;/h1&gt;
&lt;p&gt;We are happy to announce that multiple window support ships in a beta form with &lt;code&gt;v1.9.0&lt;/code&gt;.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;enhancements&quot;&gt;&lt;/a&gt;Enhancements &lt;a class=&quot;permalink&quot; href=&quot;#enhancements&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;multi-window-support-beta&quot;&gt;&lt;/a&gt;🌟 Multi Window Support (Beta) &lt;a class=&quot;permalink&quot; href=&quot;#multi-window-support-beta&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TestCafe can now automate user actions in multiple windows. You can switch between open windows during the test. Make edits in one window and check that the other window&amp;#39;s content changes dynamically to reflect these modifications.&lt;/p&gt;

&lt;p&gt;&lt;video autoplay loop muted playsinline&gt;    &lt;source src=&quot;../images/blog/2020-07-23-multi-window.webm&quot; type=&quot;video/webm&quot;&gt;    &lt;source src=&quot;../images/blog/2020-07-23-multi-window.mp4&quot; type=&quot;video/mp4&quot;&gt;Testing in multiple windows&lt;/video&gt;&lt;/p&gt;

&lt;p&gt;When the main window opens a child window, TestCafe automatically switches to this new window and continues test actions there:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Login page`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://login.wrike.com/login/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;googleButton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;div.login-panel-footer__login-with &amp;gt; button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Login via Google&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;googleButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;input[type=email]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;This text will be entered inside the pop-up&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use the &lt;a href=&quot;../documentation/reference/test-api/testcontroller/openwindow.html&quot;&gt;t.openWindow&lt;/a&gt; method to open a child window in test code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Test page`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://devexpress.github.io/testcafe/example/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Open a new window&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://example.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://example.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&quot;../documentation/reference/test-api/testcontroller/switchtowindow.html&quot;&gt;t.switchToWindow&lt;/a&gt; method enables you to switch between open windows. You can use a window descriptor or a predicate to specify the window that should be activated:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Example page`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://example.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Switch to a specific window&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getCurrentWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;popUp1&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://devexpress.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;popUp2&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://github.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://example.com/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchToWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;github.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://github.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;a href=&quot;../documentation/reference/test-api/testcontroller/switchtoparentwindow.html&quot;&gt;t.switchToParentWindow&lt;/a&gt; and &lt;a href=&quot;../documentation/reference/test-api/testcontroller/switchtopreviouswindow.html&quot;&gt;t.switchToPreviousWindow&lt;/a&gt; methods allow you to switch back to the parent window or the previously active window.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;../documentation/reference/test-api/testcontroller/closewindow.html&quot;&gt;t.closeWindow&lt;/a&gt; method closes the current window when called without arguments, or the specified window if you pass a descriptor or predicate:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Example page`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://www.example.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Close the current window&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;window1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://devexpress.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closeWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentURI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://www.example.com/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Close a specific window&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;window1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;http://devexpress.com&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;closeWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;window1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;detailed-diffs-in-failed-assertions&quot;&gt;&lt;/a&gt;Detailed Diffs in Failed Assertions &lt;a class=&quot;permalink&quot; href=&quot;#detailed-diffs-in-failed-assertions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Test run reports now show the differences between an assertion&amp;#39;s actual and expected values:&lt;/p&gt;

&lt;p&gt;&lt;img srcset=&quot;../images/blog/2020-07-23-rich-diffs.png,
            ../images/blog/2020-07-23-rich-diffs@2x.png 2x&quot;
        src=&quot;../images/blog/2020-07-23-rich-diffs.png&quot;
        alt=&quot;A report showing differences between asserted values&quot;/&gt;&lt;/p&gt;

&lt;p&gt;TestCafe can display difference between values, arrays, objects, and even functions.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;bug-fixes&quot;&gt;&lt;/a&gt;Bug Fixes &lt;a class=&quot;permalink&quot; href=&quot;#bug-fixes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TestCafe now throws a descriptive error when it attempts to start the browser UI on Linux without the X11 server (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4461&quot;&gt;4461&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Exception no longer thrown when you use remote browsers on Linux without X11 or run Windows browsers from WSL2 (&lt;a href=&quot;https://github.com/DevExpress/testcafe/issues/4742&quot;&gt;#4742&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a syntax error on pages whose code destructures empty function parameters (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2391&quot;&gt;testcafe-hammerhead/#2391&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Fixed a bug when page titles were displayed incorrectly (&lt;a href=&quot;https://github.com/DevExpress/testcafe-hammerhead/issues/2374&quot;&gt;testcafe-hammerhead/#2374&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 06 Aug 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/blog/testcafe-v1-9-0-released.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/blog/testcafe-v1-9-0-released.html</guid>
        
        
      </item>
    
      <item>
        <title>Introducing the TestCafe Jenkins Plugin</title>
        <description>&lt;h1&gt;Introducing the TestCafe Jenkins Plugin&lt;/h1&gt;
&lt;p&gt;TestCafe can capture videos and screenshots so you can debug your tests and examine page UI. You can record all tests or only those that failed, generate unique video files for each test or record all of them in one take, and single out specific interactions. (For a full list of available options, see the following help topic: &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/screenshots-and-videos.html&quot;&gt;Screenshots and Videos&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Many TestCafe users take advantage of Jenkins — a CI/CD solution — to automate their tests. Until recently, they had to manually match the screenshots and videos taken by TestCafe to the individual test reports. The newly implemented &lt;a href=&quot;https://plugins.jenkins.io/testcafe/&quot;&gt;TestCafe Jenkins plugin&lt;/a&gt; simplifies this process. Links to screenshots and videos taken during the test now automatically appear on the Jenkins test results page. There is no need to keep the testing server running — all required files are stored inside the Jenkins build folder.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;With our plugin enabled, the test results page should appear as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/test-results-page.png&quot; alt=&quot;The updated test results page&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;test-case-the-disappearing-button&quot;&gt;&lt;/a&gt;Test case: the disappearing button &lt;a class=&quot;permalink&quot; href=&quot;#test-case-the-disappearing-button&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;#39;s assume that the &amp;#39;Add to Cart&amp;#39; button disappears on the mobile version of your website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/button-example.png&quot; alt=&quot;The 'Add To Cart' button is absent from the mobile version of the website&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;TestCafe supports the following mobile device emulation methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/interact-with-the-page.html#resize-window&quot;&gt;Resize the browser window&lt;/a&gt; during the test&lt;/li&gt;
&lt;li&gt;Run the test through a &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#browsers-in-cloud-testing-services&quot;&gt;third-party cloud testing service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#use-chromium-device-emulation&quot;&gt;Chromium&amp;#39;s built-in emulation mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third option offers greater speed and stability. We describe it going forward and recommend that you use it if possible.&lt;/p&gt;

&lt;p&gt;First, let&amp;#39;s write a simple test that checks if the &amp;#39;Add to Cart&amp;#39; button exists:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot; data-lang=&quot;JavaScript&quot;&gt;test('`Add To Cart` button should exist', async t =&amp;gt; {
    await t
        .expect(Selector('button').withText('Add To Cart').visible).ok();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;#39;s configure Jenkins to launch this test every time we build our project.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;basic-setup&quot;&gt;&lt;/a&gt;Basic setup &lt;a class=&quot;permalink&quot; href=&quot;#basic-setup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-1-install-prerequisites&quot;&gt;&lt;/a&gt;Step 1. Install prerequisites &lt;a class=&quot;permalink&quot; href=&quot;#step-1-install-prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;TestCafe requires a working Node.js installation to run. If your testing environment does not contain node.js, &lt;a href=&quot;https://plugins.jenkins.io/nodejs/&quot;&gt;the Node.js Jenkins plugin&lt;/a&gt; can install it for you. Also ensure that Chromium is installed: TestCafe cannot function without a browser.&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-2-install-the-testcafe-jenkins-plugin&quot;&gt;&lt;/a&gt;Step 2. Install the TestCafe Jenkins plugin &lt;a class=&quot;permalink&quot; href=&quot;#step-2-install-the-testcafe-jenkins-plugin&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To install the TestCafe Jenkins plugin, click the &amp;quot;Manage Plugins&amp;quot; link on the Manage Jenkins page, select the &amp;quot;Available&amp;quot; tab, and enter &amp;quot;testcafe&amp;quot; into the search field. Check the box next to our plugin and click the &amp;#39;Install without restart&amp;#39; button below it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/plugin-search-ui.png&quot; alt=&quot;Jenkins plugin search UI&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-3-install-the-required-node-packages&quot;&gt;&lt;/a&gt;Step 3. Install the required Node packages &lt;a class=&quot;permalink&quot; href=&quot;#step-3-install-the-required-node-packages&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Add the following &lt;em&gt;build step&lt;/em&gt; to your Jenkins project:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm i testcafe testcafe-reporter-jenkins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command installs the main testcafe library, as well as the &lt;a href=&quot;https://www.npmjs.com/package/testcafe-reporter-jenkins&quot;&gt;testcafe-reporter-jenkins&lt;/a&gt; package. The latter is needed to generate Jenkins-friendly JUnit format reports.&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-4-configure-the-tests&quot;&gt;&lt;/a&gt;Step 4. Configure the tests &lt;a class=&quot;permalink&quot; href=&quot;#step-4-configure-the-tests&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can configure your tests via:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html&quot;&gt;command line interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the JavaScript/TypeScript API&lt;/li&gt;
&lt;li&gt;the .testcaferc.json &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/configuration-file.html&quot;&gt;configuration file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last option provides an easy, declarative way to define your test settings. You can store this file in the same folder as your tests. Below is the configuration used in this tutorial:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chromium:headless:emulation:device=iPhone 4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chromium:headless:emulation:device=iPad Mini&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;chromium:headless&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;test/e2e/**/*&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;screenshots&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;takeOnFails&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;fullPage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;videoPath&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;videos&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;jenkins&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;report.xml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;appCommand&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;node server.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;Browser&lt;/em&gt; array contains the list of browsers TestCafe will use to run our test. The &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#use-chromium-device-emulation&quot;&gt;TestCafe browser syntax&lt;/a&gt; allows us to specify the mobile devices we want Chromium to emulate.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;name&lt;/em&gt; property of the &lt;em&gt;reporter&lt;/em&gt; object is set as &lt;em&gt;jenkins&lt;/em&gt;, which ensures that the reports generated by TestCafe can be properly parsed by the server.&lt;/p&gt;

&lt;p&gt;If you decide not to use a config file, be sure to &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html#-r-nameoutput---reporter-nameoutput&quot;&gt;manually set&lt;/a&gt; the report format when you launch the tests as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;testcafe chrome test.js &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; jenkins:report.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otherwise, simply run the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npx testcafe
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-5-configure-the-reporter&quot;&gt;&lt;/a&gt;Step 5. Configure the reporter &lt;a class=&quot;permalink&quot; href=&quot;#step-5-configure-the-reporter&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Turn on the &lt;a href=&quot;https://plugins.jenkins.io/junit/&quot;&gt;JUnit&lt;/a&gt; reporter plugin: add the &amp;quot;Publish JUnit test result report&amp;quot; &lt;em&gt;post-build action&lt;/em&gt;. To display screenshots and videos alongside your test results, select the &amp;quot;Include links to TestCafe artifacts&amp;quot; option from the &amp;quot;Additional test report features&amp;quot; drop-down menu.&lt;/p&gt;

&lt;p&gt;Important: Remember to check the &amp;quot;Retain long standard output/error&amp;quot; box. Otherwise, the reporter plugin will automatically truncate the URLs of your videos and screenshots.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/junit-reporter-configuration.png&quot; alt=&quot;JUnit reporter configuration screen&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a class=&quot;anchor&quot; id=&quot;step-6-run-the-build&quot;&gt;&lt;/a&gt;Step 6. Run the build &lt;a class=&quot;permalink&quot; href=&quot;#step-6-run-the-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Save the changes to your project and click the &amp;quot;Build now&amp;quot; button on the project page:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/build-now-button.png&quot; alt=&quot;Jenkins Project menu with the Build Now Button highlighted&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;review-the-results&quot;&gt;&lt;/a&gt;Review the results &lt;a class=&quot;permalink&quot; href=&quot;#review-the-results&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the tests are completed, click the following link on the build page to view the results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/test-results-link.png&quot; alt=&quot;Test results link&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;You will see links to screenshots and videos taken during the test.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/testcafe/images/jenkins-plugin/test-results-view.png&quot; alt=&quot;Test results view&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;These artifacts instantly indicate if the Cart button is present on the page.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;jenkins-pipeline-integration&quot;&gt;&lt;/a&gt;Jenkins Pipeline integration &lt;a class=&quot;permalink&quot; href=&quot;#jenkins-pipeline-integration&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you do not wish to use the Jenkins GUI to launch these tests, you can always use the &lt;a href=&quot;https://www.jenkins.io/doc/book/pipeline/&quot;&gt;Jenkins Pipeline&lt;/a&gt;. It lets you declaratively configure your CI/CD setup via a Jenkinsfile - a text file checked into the project&amp;#39;s source control repository. The following is a sample Jenkinsfile to be used with TestCafe:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E2E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e2e&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;always&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                          &lt;span class=&quot;n&quot;&gt;junit&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;keepLongStdio:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;nl&quot;&gt;testDataPublishers:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestCafePublisher&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]],&lt;/span&gt;
                          &lt;span class=&quot;nl&quot;&gt;testResults:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;xml&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: The &lt;code&gt;test-e2e&lt;/code&gt; npm script in this example launches TestCafe. As mentioned earlier in this topic, be sure to manually set the reporter option. For more information on the TestCafe CLI, see the following help topic: &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/command-line-interface.html&quot;&gt;Command Line Interface&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;If you enjoyed this guide and would like more tips on debugging, please see the following blog articles: &lt;a href=&quot;https://devexpress.github.io/testcafe/media/team-blog/how-to-debug-tests-in-testcafe-quick-guide.html&quot;&gt;How to Debug Tests in TestCafe: Quick Guide&lt;/a&gt; and &lt;a href=&quot;https://devexpress.github.io/testcafe/media/team-blog/how-to-speed-up-debugging-in-testcafe-tips-and-tricks.html&quot;&gt;How to speed up debugging in TestCafe: Tips and Tricks&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/introducing-the-testcafe-jenkins-plugin.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/introducing-the-testcafe-jenkins-plugin.html</guid>
        
        
      </item>
    
      <item>
        <title>Upcoming Webinar: 10 Ways to Simplify Your UI Testing</title>
        <description>&lt;h1&gt;Upcoming Webinar: 10 Ways to Simplify Your UI Testing&lt;/h1&gt;
&lt;p&gt;In this free webinar, our Technical Evangelist &lt;a href=&quot;https://twitter.com/paul__usher&quot;&gt;Paul Usher&lt;/a&gt; will show you how to easily incorporate UI testing in your development workflow. Paul will demonstrate how TestCafe can fit in any organization and how its features can be leveraged to deliver high quality web apps that always meet end-user expectations.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this webinar, you’ll learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to setup TestCafe and start testing in under 10 minutes.&lt;/li&gt;
&lt;li&gt;How to create customizable tests that can easily evolve as business requirements change.&lt;/li&gt;
&lt;li&gt;The purpose of Custom Selectors and why they make web testing so much easier.&lt;/li&gt;
&lt;li&gt;The purpose of the Page Model approach and why it helps increase productivity.&lt;/li&gt;
&lt;li&gt;And you&amp;#39;ll learn how to master use of Smart Assertions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;experience-the-testcafe-difference&quot;&gt;&lt;/a&gt;Experience the TestCafe Difference &lt;a class=&quot;permalink&quot; href=&quot;#experience-the-testcafe-difference&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe Open Source and TestCafe Studio are driver free and do not require you to manage complex plug-ins. If you’re ready to test your web apps and want to deliver more reliable solutions to your end-users, be sure to click the link below and register your interest in this live webinar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Webinar Date:&lt;/strong&gt; Wednesday, July 29, 2020&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start Time:&lt;/strong&gt; 10AM Pacific Time&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://dxpr.es/10_ways_to_simplify_ui_testing&quot;&gt;Register&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jul 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/10-ways-to-simplify-your-ui-testing.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/10-ways-to-simplify-your-ui-testing.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Speed up Debugging in TestCafe: Tips and Tricks</title>
        <description>&lt;h1&gt;How to Speed up Debugging in TestCafe: Tips and Tricks&lt;/h1&gt;
&lt;p&gt;In the previous post, we talked about the approaches you can follow to debug TestCafe tests. In this post, we will focus on best practices that help you save time while debugging.  We will also mention a few things to keep in mind in order to write easy-to-debug tests.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;tips-on-how-to-debug-tests&quot;&gt;&lt;/a&gt;Tips on how to debug tests &lt;a class=&quot;permalink&quot; href=&quot;#tips-on-how-to-debug-tests&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If you know which test throws an error, run this test separately.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you only need to check one test, do not wait until all tests pass. TestCafe can run any single test separately. Add the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#-t-name---test-name&quot;&gt;--test shell argument&lt;/a&gt; or use the &lt;a href=&quot;../../documentation/reference/test-api/test/only.html&quot;&gt;test.only&lt;/a&gt; method in test code. (Be sure to remove &lt;code&gt;.only&lt;/code&gt; before you commit changes.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome ./tests &lt;span class=&quot;nt&quot;&gt;--test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My test name&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My first test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use live mode when you edit tests.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you find yourself running a test repeatedly while you write or debug it, try live mode. In this mode, TestCafe watches the test file and restarts the test automatically after you save changes. To enable live mode, run the test with the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#-l---live&quot;&gt;--live flag&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome ./tests &lt;span class=&quot;nt&quot;&gt;--live&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;To identify an issue visually, decrease the test speed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By default, tests are executed at full speed – with minimum delays between actions and assertions. This makes it difficult to identify problems visually during a test run. To slow the test down, use the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#--speed-factor&quot;&gt;--speed flag&lt;/a&gt;. The argument value is between &lt;code&gt;1&lt;/code&gt; (fastest) and &lt;code&gt;0.01&lt;/code&gt; (slowest).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;testcafe chrome ./tests &lt;span class=&quot;nt&quot;&gt;--speed&lt;/span&gt; 0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Use TestCafe Studio to determine why a selector does not work.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TestCafe may report that a selector does not return any element, although you have written it correctly. The reason may be an invisible DOM element that matches the same selector expression. To get a better understanding of the issue, record a similar test in TestCafe Studio and compare your selector to the selector that is generated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If a test fails on CI, use screenshots and videos to clarify the reason.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You do not have to run a test locally to determine the reason why a test fails on CI. TestCafe can take a screenshot when the test fails and record a video of the test run. To enable screenshots and video recording, use the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#-s---screenshots-on-fails&quot;&gt;--screenshots-on-fail&lt;/a&gt; and &lt;a href=&quot;../../documentation/reference/command-line-interface.html#--video-basepath&quot;&gt;--video&lt;/a&gt; CLI options. See the following help topic for details: &lt;a href=&quot;../../documentation/guides/advanced-guides/screenshots-and-videos.html&quot;&gt;Screenshots and Videos&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;tips-on-how-to-write-tests-that-are-easy-to-debug&quot;&gt;&lt;/a&gt;Tips on how to write tests that are easy to debug &lt;a class=&quot;permalink&quot; href=&quot;#tips-on-how-to-write-tests-that-are-easy-to-debug&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tests should be easy to run locally.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If it is difficult to run a test locally, developers are likely to delay test fixes, so that they turn &amp;#39;green&amp;#39; only shortly before the release. These delays may complicate the debug process.&lt;/p&gt;

&lt;p&gt;Developers can easily reproduce test scenarios locally and maintain &amp;#39;green&amp;#39; tests if the following is true:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests are isolated from each other.&lt;/li&gt;
&lt;li&gt;The workstation environment is similar to the test environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ideally, a developer must be able to run any test locally with a single command, which requires the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The product test build is easy to run in a Docker container (or by another approach that emulates the test environment).&lt;/li&gt;
&lt;li&gt;Test data is seeded in test code (for example, within the &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; hooks).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tests should be independent.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If subsequent tests use data produced by previous tests, you can expect the following two issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a previous test fails, all dependent tests will also fail.&lt;/li&gt;
&lt;li&gt;You cannot debug a test until all previous tests are complete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To simplify debugging in the future, be sure to avoid dependencies between tests.&lt;/p&gt;

&lt;p&gt;For more best practice tips, see the following help topic: &lt;a href=&quot;https://devexpress.github.io/testcafe/media/team-blog/how-to-scroll-web-pages-using-testcafe.html&quot;&gt;How to Scroll Web Pages Using TestCafe&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jun 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/how-to-speed-up-debugging-in-testcafe-tips-and-tricks.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/how-to-speed-up-debugging-in-testcafe-tips-and-tricks.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Debug Tests in TestCafe: Quick Guide</title>
        <description>&lt;h1&gt;How to Debug Tests in TestCafe: Quick Guide&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;ve ever written a TestCafe test, you may be familiar with the following errors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cannot obtain information about the node because the specified selector does not match any node in the DOM tree.&lt;/li&gt;
&lt;li&gt;The specified selector does not match any element in the DOM tree.&lt;/li&gt;
&lt;li&gt;The element that matches the specified selector is not visible.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two errors are self-explanatory. The last error, however, can easily be misinterpreted. This error frequently occurs if multiple elements match the same selector. The first matching element may be hidden, while the required element is visible.&lt;/p&gt;

&lt;p&gt;What should you do next? How do you update the selector so that it produces expected results? What should you do if the test previously passed, but it now fails?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;First, check the application to ensure that the test didn&amp;#39;t fail due to a bug. If the app runs as expected, then you can begin debugging the test.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;client-side-debugging&quot;&gt;&lt;/a&gt;Client-side Debugging &lt;a class=&quot;permalink&quot; href=&quot;#client-side-debugging&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TestCafe uses CSS selectors to identify page elements. To see if a selector matches an element, pause test execution in the browser and debug the test.&lt;/p&gt;

&lt;p&gt;To stop the test, you can use the &lt;a href=&quot;../../documentation/reference/command-line-interface.html#--debug-on-fail&quot;&gt;--debug-on-fail&lt;/a&gt; CLI flag or the &lt;a href=&quot;../../documentation/reference/test-api/testcontroller/debug.html&quot;&gt;t.debug()&lt;/a&gt; test action. The difference between these approaches is summarized below:&lt;/p&gt;
&lt;div class=&quot;table-wrapper&quot;&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;&lt;code&gt;t.debug()&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;--debug-on-fail&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Allows you to define the moment when the test stops.&lt;/td&gt;
&lt;td&gt;Suspends the test only if it fails.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You only need to modify the test code to use it.&lt;/td&gt;
&lt;td&gt;Requires that you edit the test run command (which may take longer than the &lt;a href=&quot;../../documentation/reference/test-api/testcontroller/debug.html&quot;&gt;t.debug()&lt;/a&gt; action).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s look at a test from the TestCafe &lt;a href=&quot;../../documentation/getting-started/&quot;&gt;Getting Started&lt;/a&gt; topic. Assume the &lt;strong&gt;Submit&lt;/strong&gt; button&amp;#39;s selector changed and the test failed:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Getting Started`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`http://devexpress.github.io/testcafe/example`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;My first test&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#developer-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;John Smith&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit-button-invalid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Use the assertion to check if the actual header text is equal to the expected one&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#article-header&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Thank you, John Smith!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test now throws the following error when we run it:&lt;/p&gt;

&lt;p&gt;&lt;img srcset=&quot;/testcafe/images/blog/2020-5-25-test-results.png,
            /testcafe/images/blog/2020-5-25-test-results@2x.png 2x&quot;
        src=&quot;/testcafe/images/blog/2020-5-25-test-results.png&quot;
        alt=&quot;Test results showing an error&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Insert &lt;a href=&quot;../../documentation/reference/test-api/testcontroller/debug.html&quot;&gt;t.debug()&lt;/a&gt; before the line that fails:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;typeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#developer-name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;John Smith&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit-button-invalid&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The test pauses before the button click. You can now use browser utilities to see if any elements match the selector.&lt;/p&gt;

&lt;p&gt;&lt;img srcset=&quot;/testcafe/images/blog/2020-5-25-dev-tools.png,
            /testcafe/images/blog/2020-5-25-dev-tools@2x.png 2x&quot;
        src=&quot;/testcafe/images/blog/2020-5-25-dev-tools.png&quot;
        alt=&quot;Check a selector in development tools&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;document.querySelectorAll&lt;/code&gt; returns an empty list, you can see that there is no such element on the page, but the &lt;strong&gt;Submit&lt;/strong&gt; button is visible. Use the &lt;strong&gt;Inspect&lt;/strong&gt; command to see how this button is rendered in markup:&lt;/p&gt;

&lt;p&gt;&lt;img srcset=&quot;/testcafe/images/blog/2020-5-25-inspect.png,
            /testcafe/images/blog/2020-5-25-inspect@2x.png 2x&quot;
        src=&quot;/testcafe/images/blog/2020-5-25-inspect.png&quot;
        alt=&quot;Inspect the button in development tools&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The browser&amp;#39;s development tools pane shows that the button&amp;#39;s ID is &lt;code&gt;submit-button&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;div class=&quot;blockquote-content&quot;&gt;&lt;p&gt;You can use Chrome Dev Tools&amp;#39; shortcuts (&lt;code&gt;$&lt;/code&gt; and &lt;code&gt;$$&lt;/code&gt;) to query selectors. However, if your website uses jQuery, the &lt;code&gt;$&lt;/code&gt; shortcut is overridden. TestCafe searches for elements with &lt;code&gt;document.querySelectorAll&lt;/code&gt;, which behaves in a slightly different way than jQuery. Please keep this in mind.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;To use an element inside an iframe, switch the browsing context with &lt;a href=&quot;../../documentation/reference/test-api/testcontroller/switchtoiframe.html&quot;&gt;t.switchToIframe&lt;/a&gt; before the action.&lt;/p&gt;
&lt;blockquote&gt;&lt;div class=&quot;blockquote-content&quot;&gt;&lt;p&gt;Google Chrome lets you pause complex animations that your website might play when elements appear. To stop JavaScript execution, press &lt;code&gt;F8&lt;/code&gt; when the &lt;strong&gt;Sources&lt;/strong&gt; tab is open.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;debugging-client-functions&quot;&gt;&lt;/a&gt;Debugging Client Functions &lt;a class=&quot;permalink&quot; href=&quot;#debugging-client-functions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another client-side debugging trick in TestCafe allows you to execute code within the browser to obtain client-side data or identify page elements.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStoredValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To debug this code, add the &lt;code&gt;debugger&lt;/code&gt; statement. The browser will stop the script and open developer tools.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getStoredValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getCell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;debugger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;server-side-debugging&quot;&gt;&lt;/a&gt;Server-side Debugging &lt;a class=&quot;permalink&quot; href=&quot;#server-side-debugging&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Test flow can be complicated if it includes data preparation, HTTP requests or database access. You can use Node.js to debug this code, along with Visual Studio Code, WebStorm, or Chrome Developer Tools. See the &lt;a href=&quot;../../documentation/recipes/&quot;&gt;Recipes&lt;/a&gt; for details.&lt;/p&gt;

&lt;p&gt;Note that it is easier to use client-side debugging to execute chained actions step by step. The server treats the entire chain as a single action, so you must divide it into separate actions to debug.&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;stay-tuned-for-more-information-on-test-debugging&quot;&gt;&lt;/a&gt;Stay Tuned for More Information on Test Debugging &lt;a class=&quot;permalink&quot; href=&quot;#stay-tuned-for-more-information-on-test-debugging&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As explained in this blog post, TestCafe and modern browsers offer all the tools necessary to debug your application or test. Note, however, that tools do not always locate errors quickly and easily. We&amp;#39;ve often spent more time debugging than desired. In our next blog post, I&amp;#39;ll share a few techniques that may save time when you debug a test.&lt;/p&gt;

&lt;p&gt;If you have any questions or want to share your test debugging story – write to us directly at &lt;a href=&quot;mailto:testcafeteam@devexpress.com&quot;&gt;testcafeteam@devexpress.com&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 May 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/how-to-debug-tests-in-testcafe-quick-guide.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/how-to-debug-tests-in-testcafe-quick-guide.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Scroll Web Pages Using TestCafe</title>
        <description>&lt;h1&gt;How to Scroll Web Pages Using TestCafe&lt;/h1&gt;
&lt;p&gt;If you&amp;#39;re writing functional tests, you may need to scroll tested pages to display specific elements. In this article, we look at several test scenarios to show how TestCafe navigates pages.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;built-in-testcafe-actions-scroll-the-page-automatically&quot;&gt;&lt;/a&gt;Built-in TestCafe Actions Scroll the Page Automatically &lt;a class=&quot;permalink&quot; href=&quot;#built-in-testcafe-actions-scroll-the-page-automatically&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each TestCafe API action scrolls a page to show the target element. You don&amp;#39;t need to write extra code to click a button or input text. Simply pass a selector to the action method. TestCafe will automatically scroll to the element and execute the action.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// scroll to the &quot;#submit-btn&quot; element and click it&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#submit-btn&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;scroll-to-a-rendered-dom-element&quot;&gt;&lt;/a&gt;Scroll to a Rendered DOM Element &lt;a class=&quot;permalink&quot; href=&quot;#scroll-to-a-rendered-dom-element&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you need to scroll a page to display a specific element or area, but don&amp;#39;t need to perform an action on the target element, use the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/testcontroller/hover.html&quot;&gt;hover&lt;/a&gt; method.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// scroll to the &quot;#country-map&quot; element&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;#country-map&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class=&quot;anchor&quot; id=&quot;scroll-to-a-dynamically-generated-element&quot;&gt;&lt;/a&gt;Scroll to a Dynamically Generated Element &lt;a class=&quot;permalink&quot; href=&quot;#scroll-to-a-dynamically-generated-element&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In certain scenarios, elements cannot be identified by a selector. For instance, a page may contain a dynamically generated list of identical items. Another example is virtual scrolling: the element might not exist on a page when the action starts.&lt;/p&gt;

&lt;p&gt;A solution in these cases is to use the browser&amp;#39;s native API. For example, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy&quot;&gt;window.scrollBy&lt;/a&gt; method. To access this method, utilize the &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/reference/test-api/clientfunction/constructor.html&quot;&gt;ClientFunction&lt;/a&gt; generator. Calculate the offset between the element and the top of the container, and pass these values to the scrollBy method.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Fixture`&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://github.com/DevExpress/testcafe`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClientFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`test`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetElementPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetElementPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes offset calculation is not an option. If a page uses virtual scrolling, element heights can change. You may not even know the number of elements above the element to be displayed. You might only know the element&amp;#39;s content, such as its display text.&lt;/p&gt;

&lt;p&gt;To find an element by text, scroll to the last rendered item on the list so that the next portion of elements are loaded. Continue the process until you locate the element. A selector&amp;#39;s &lt;a href=&quot;https://devexpress.github.io/testcafe/documentation/guides/basic-guides/select-page-elements.html#check-if-an-element-exists&quot;&gt;exists&lt;/a&gt; property allows you to scan rendered elements and see if an element with that text exists. If it does exist, the search is over. If not, repeat the cycle.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;testcafe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fixture&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Getting Started`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://bvaughn.github.io/react-virtualized/#/components/List&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Test 1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;._1oXCrgdVudv-QMFo7eQCLb&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;._113CIjCFcgg_BK6pEtLzCZ&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withExactText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Tisha Wurster&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targetItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bottomItemIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bottomItemText&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bottomItemIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bottomItem&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withExactText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bottomItemText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bottomItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;targetItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We hope you find these tips useful.&lt;/p&gt;

&lt;p&gt;Want to learn more about TestCafe? Feel free to mention &lt;a href=&quot;https://twitter.com/DXTestCafe&quot;&gt;@DXTestCafe&lt;/a&gt; on Twitter and suggest a topic for the next post.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2020 00:00:00 +0300</pubDate>
        <link>https://devexpress.github.io/testcafe/media/team-blog/how-to-scroll-web-pages-using-testcafe.html</link>
        <guid isPermaLink="true">https://devexpress.github.io/testcafe/media/team-blog/how-to-scroll-web-pages-using-testcafe.html</guid>
        
        
      </item>
    
  </channel>
</rss>
