{
  "name": "gulp-util",
  "description": "Utility functions for gulp plugins",
  "version": "3.0.1",
  "homepage": "http://github.com/wearefractal/gulp-util",
  "repository": {
    "type": "git",
    "url": "git://github.com/wearefractal/gulp-util.git"
  },
  "author": {
    "name": "Fractal",
    "email": "contact@wearefractal.com",
    "url": "http://wearefractal.com/"
  },
  "main": "./index.js",
  "dependencies": {
    "chalk": "^0.5.0",
    "dateformat": "^1.0.7-1.2.3",
    "lodash": "^2.4.1",
    "lodash._reinterpolate": "^2.4.1",
    "lodash.template": "^2.4.1",
    "minimist": "^1.1.0",
    "multipipe": "^0.1.0",
    "through2": "^0.6.1",
    "vinyl": "^0.4.0"
  },
  "devDependencies": {
    "mocha": "^1.17.0",
    "should": "^4.0.0",
    "mocha-lcov-reporter": "^0.0.1",
    "coveralls": "^2.7.0",
    "istanbul": "^0.3.0",
    "rimraf": "^2.2.5",
    "jshint": "^2.4.1",
    "buffer-equal": "~0.0.1",
    "lodash.templatesettings": "^2.4.1",
    "event-stream": "^3.1.0"
  },
  "scripts": {
    "test": "mocha --reporter spec && jshint",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/wearefractal/gulp-util/raw/master/LICENSE"
    }
  ],
  "readme": "# gulp-util [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Coveralls Status][coveralls-image]][coveralls-url] [![Dependency Status][depstat-image]][depstat-url]\n\n## Information\n\n<table>\n<tr> \n<td>Package</td><td>gulp-util</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Utility functions for gulp plugins</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>>= 0.9</td>\n</tr>\n</table>\n\n## Usage\n\n```javascript\nvar gutil = require('gulp-util');\n\ngutil.log('stuff happened', 'Really it did', gutil.colors.cyan('123'));\ngutil.beep();\n\ngutil.replaceExtension('file.coffee', '.js'); // file.js\n\nvar opt = {\n  name: 'todd',\n  file: someGulpFile\n};\ngutil.template('test <%= name %> <%= file.path %>', opt) // test todd /js/hi.js\n```\n\n### log(msg...)\n\nLogs stuff. Already prefixed with [gulp] and all that. Use the right colors for values. If you pass in multiple arguments it will join them by a space.\n\n```\nvalues (files, module names, etc.) = magenta\nnumbers (times, counts, etc) = cyan\n```\n\n### replaceExtension(path, newExtension)\n\nReplaces a file extension in a path. Returns the new path.\n\n### isStream(obj)\n\nReturns true or false if an object is a stream.\n\n### isBuffer(obj)\n\nReturns true or false if an object is a Buffer.\n\n### template(string[, data])\n\nThis is a lodash.template function wrapper. You must pass in a valid gulp file object so it is available to the user or it will error. You can not configure any of the delimiters. Look at the [lodash docs](http://lodash.com/docs#template) for more info.\n\n## new File(obj)\n\nThis is just [vinyl](https://github.com/wearefractal/vinyl)\n\n```javascript\nvar file = new gutil.File({\n  base: path.join(__dirname, './fixtures/'),\n  cwd: __dirname,\n  path: path.join(__dirname, './fixtures/test.coffee')\n});\n```\n\n## noop()\n\nReturns a stream that does nothing but pass data straight through.\n\n```javascript\n// gulp should be called like this :\n// $ gulp --type production\ngulp.task('scripts', function() {\n  gulp.src('src/**/*.js')\n    .pipe(concat('script.js'))\n    .pipe(gutil.env.type === 'production' ? uglify() : gutil.noop())\n    .pipe(gulp.dest('dist/');\n});\n```\n\n## buffer(cb)\n\nThis is similar to es.wait but instead of buffering text into one string it buffers anything into an array (so very useful for file objects).\n\nReturns a stream that can be piped to.\n\nThe stream will emit one data event after the stream piped to it has ended. The data will be the same array passed to the callback.\n\nCallback is optional and receives two arguments: error and data\n\n```javascript\ngulp.src('stuff/*.js')\n  .pipe(gutil.buffer(function(err, files){\n  \n  });\n```\n\n## new PluginError(pluginName, message[, options])\n\n- pluginName should be the module name of your plugin\n- message can be a string or an existing error\n- By default the stack will not be shown. Set `options.showStack` to true if you think the stack is important for your error.\n- If you pass an error in as the message the stack will be pulled from that, otherwise one will be created.\n- Note that if you pass in a custom stack string you need to include the message along with that.\n- Error properties will be included in `err.toString()`. Can be omitted by including `{showProperties: false}` in the options.\n\nThese are all acceptable forms of instantiation:\n\n```javascript\nvar err = new gutil.PluginError('test', {\n  message: 'something broke'\n});\n\nvar err = new gutil.PluginError({\n  plugin: 'test',\n  message: 'something broke'\n});\n\nvar err = new gutil.PluginError('test', 'something broke');\n\nvar err = new gutil.PluginError('test', 'something broke', {showStack: true});\n\nvar existingError = new Error('OMG');\nvar err = new gutil.PluginError('test', existingError, {showStack: true});\n```\n\n[npm-url]: https://npmjs.org/package/gulp-util\n[npm-image]: https://badge.fury.io/js/gulp-util.svg\n[travis-url]: https://travis-ci.org/gulpjs/gulp-util\n[travis-image]: https://travis-ci.org/gulpjs/gulp-util.svg?branch=master\n[coveralls-url]: https://coveralls.io/r/gulpjs/gulp-util\n[coveralls-image]: https://coveralls.io/repos/gulpjs/gulp-util/badge.png\n[depstat-url]: https://david-dm.org/gulpjs/gulp-util\n[depstat-image]: https://david-dm.org/gulpjs/gulp-util.svg\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/wearefractal/gulp-util/issues"
  },
  "_id": "gulp-util@3.0.1",
  "dist": {
    "shasum": "8ee8c782353ee0c2b081c0ce4e7542daaf06efd7"
  },
  "_from": "gulp-util@3.0.1",
  "_resolved": "https://registry.npmjs.org/gulp-util/-/gulp-util-3.0.1.tgz"
}
