{
  "name": "gulp-uglify",
  "description": "Minify files with UglifyJS.",
  "version": "1.0.0",
  "author": {
    "name": "Terin Stock",
    "email": "terinjokes@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/terinjokes/gulp-uglify/issues"
  },
  "dependencies": {
    "deepmerge": ">=0.2.7 <0.3.0-0",
    "gulp-util": ">=3.0.0 <4.0.0-0",
    "through2": ">=0.6.1 <1.0.0-0",
    "uglify-js": "2.4.15",
    "vinyl-sourcemaps-apply": ">=0.1.1 <0.2.0-0"
  },
  "devDependencies": {
    "argg": "0.0.1",
    "codeclimate-test-reporter": "0.0.3",
    "gulp-concat": ">=2.3.4 <3.0.0-0",
    "gulp-sourcemaps": ">=1.1.1 <2.0.0-0",
    "istanbul": ">=0.3.0 <0.4.0-0",
    "rimraf": ">=2.2.8 <3.0.0-0",
    "tape": ">=2.12.3 <3.0.0-0",
    "vinyl": ">=0.3.2 <0.4.0-0"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "homepage": "https://github.com/terinjokes/gulp-uglify/",
  "keywords": [
    "gulpplugin"
  ],
  "license": "MIT",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/terinjokes/gulp-uglify.git"
  },
  "scripts": {
    "codeclimate": "cat ./coverage/lcov.info|codeclimate",
    "coverage": "istanbul cover node_modules/argg test/*.js --report lcovonly",
    "rm": "rimraf ./coverage",
    "test": "npm run coverage && npm run rm",
    "test-report": "npm run coverage && npm run codeclimate && npm run rm"
  },
  "readme": "# gulp-uglify [![Build Status](http://img.shields.io/travis/terinjokes/gulp-uglify.svg?style=flat)](https://travis-ci.org/terinjokes/gulp-uglify) [![](http://img.shields.io/npm/dm/gulp-uglify.svg?style=flat)](https://www.npmjs.org/package/gulp-uglify) [![](http://img.shields.io/npm/v/gulp-uglify.svg?style=flat)](https://www.npmjs.org/package/gulp-uglify) [![](http://img.shields.io/codeclimate/github/terinjokes/gulp-uglify.svg?style=flat)](https://codeclimate.com/github/terinjokes/gulp-uglify) [![](http://img.shields.io/codeclimate/coverage/github/terinjokes/gulp-uglify.svg?style=flat)](https://codeclimate.com/github/terinjokes/gulp-uglify)\n\n> Minify JavaScript with UglifyJS2.\n\n## Installation\n\nInstall package with NPM and add it to your development dependencies:\n\n`npm install --save-dev gulp-uglify`\n\n## Usage\n\n```javascript\nvar uglify = require('gulp-uglify');\n\ngulp.task('compress', function() {\n  gulp.src('lib/*.js')\n    .pipe(uglify())\n    .pipe(gulp.dest('dist'))\n});\n```\n\n## Options\n\n- `mangle`\n\n\tPass `false` to skip mangling names.\n\n- `output`\n\n\tPass an object if you wish to specify additional [output\n\toptions](http://lisperator.net/uglifyjs/codegen). The defaults are\n\toptimized for best compression.\n\n- `compress`\n\n\tPass an object to specify custom [compressor\n\toptions](http://lisperator.net/uglifyjs/compress). Pass `false` to skip\n\tcompression completely.\n\n- `preserveComments`\n\n\tA convenience option for `options.output.comments`. Defaults to preserving no\n\tcomments.\n\n\t- `all`\n\n\t\tPreserve all comments in code blocks\n\n\t- `some`\n\n\t\tPreserve comments that start with a bang (`!`) or include a Closure\n\t\tCompiler directive (`@preserve`, `@license`, `@cc_on`)\n\n\t- `function`\n\n\t\tSpecify your own comment preservation function. You will be passed the\n\t\tcurrent node and the current comment and are expected to return either\n\t\t`true` or `false`.\n\nYou can also pass the `uglify` function any of the options [listed\nhere](https://github.com/mishoo/UglifyJS2#the-simple-way) to modify\nUglifyJS's behavior.\n",
  "readmeFilename": "README.md",
  "_id": "gulp-uglify@1.0.0",
  "dist": {
    "shasum": "08bd56948341b5e3e726428183a78dc58bd4f043"
  },
  "_from": "gulp-uglify@",
  "_resolved": "https://registry.npmjs.org/gulp-uglify/-/gulp-uglify-1.0.0.tgz"
}
