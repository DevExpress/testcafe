{
  "name": "gulp-jshint",
  "description": "JSHint plugin for gulp",
  "version": "1.8.4",
  "homepage": "http://github.com/spenceralger/gulp-jshint",
  "repository": {
    "type": "git",
    "url": "git://github.com/spenceralger/gulp-jshint.git"
  },
  "contributors": [
    {
      "name": "Spencer Alger",
      "email": "spencer@spenceralger.com"
    },
    {
      "name": "Fractal",
      "email": "contact@wearefractal.com",
      "url": "http://wearefractal.com/"
    }
  ],
  "main": "./src/index.js",
  "keywords": [
    "gulpplugin"
  ],
  "dependencies": {
    "gulp-util": "^3.0.0",
    "jshint": "^2.5.0",
    "lodash": "^2.4.1",
    "minimatch": "^0.3.0",
    "rcloader": "^0.1.2",
    "through2": "~0.5.1"
  },
  "devDependencies": {
    "gulp": "^3.6.2",
    "mocha": "^1.18.2",
    "should": "^3.3.1"
  },
  "scripts": {
    "test": "gulp test"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/spenceralger/gulp-jshint/raw/master/LICENSE"
    }
  ],
  "readme": "[![Build Status](https://travis-ci.org/spenceralger/gulp-jshint.svg?branch=master)](https://travis-ci.org/spenceralger/gulp-jshint)\n\n## Information\n\n<table>\n<tr>\n<td>Package</td><td>gulp-jshint</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>JSHint plugin for gulp</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>>= 0.4</td>\n</tr>\n</table>\n\n## Install\n\n    npm install gulp-jshint --save-dev\n\n## Usage\n\n```js\nvar jshint = require('gulp-jshint');\nvar gulp   = require('gulp');\n\ngulp.task('lint', function() {\n  return gulp.src('./lib/*.js')\n    .pipe(jshint())\n    .pipe(jshint.reporter('YOUR_REPORTER_HERE'));\n});\n```\n\n## Options\n\nPlugin options:\n\n- `lookup`\n  - Default is `true`\n  - When `false` do not lookup `.jshintrc` files. See the [JSHint docs](http://www.jshint.com/docs/) for more info.\n\n\nYou can pass in any other options and it passes them straight to JSHint. Look at their README for more info. You can also pass in the location of your jshintrc file as a string and it will load options from it.\n\n## Results\n\nAdds the following properties to the file object:\n\n```js\n  file.jshint.success = true; // or false\n  file.jshint.errorCount = 0; // number of errors returned by JSHint\n  file.jshint.results = []; // JSHint errors, see [http://jshint.com/docs/reporters/](http://jshint.com/docs/reporters/)\n  file.jshint.data = []; // JSHint returns details about implied globals, cyclomatic complexity, etc\n  file.jshint.opt = {}; // The options you passed to JSHint\n```\n\n## Reporters\n\n### JSHint reporters\n\n#### Built-in\n\nYou can choose any [JSHint reporter](https://github.com/jshint/jshint/tree/master/src/reporters)\nwhen you call\n\n```js\nstuff\n  .pipe(jshint())\n  .pipe(jshint.reporter('default'))\n```\n\n#### External\n\nLet's use [jshint-stylish](https://github.com/sindresorhus/jshint-stylish) as an example\n\n```js\nvar stylish = require('jshint-stylish');\n\nstuff\n  .pipe(jshint())\n  .pipe(jshint.reporter(stylish))\n```\n\n- OR -\n\n```js\nstuff\n  .pipe(jshint())\n  .pipe(jshint.reporter('jshint-stylish'))\n```\n\nJSHint plugins have no good module format so I tried to support all of them I saw in the wild. Hopefully it worked, but if a JSHint plugin isn't working with this library feel free to open an issue.\n\n### Fail Reporter\n\nDo you want the task to fail when a JSHint error happens? gulp-jshint includes a simple utility for this.\n\nThis example will log the errors using the stylish reporter, then fail if JSHint was not a success.\n\n```js\nstuff\n  .pipe(jshint())\n  .pipe(jshint.reporter('jshint-stylish'))\n  .pipe(jshint.reporter('fail'))\n```\n\n### Custom Reporters\n\nCustom reporters don't interact with this module at all. jshint will add some attributes to the file object and you can add a custom reporter downstream.\n\n```js\nvar jshint = require('gulp-jshint');\nvar map = require('map-stream');\n\nvar myReporter = map(function (file, cb) {\n  if (!file.jshint.success) {\n    console.log('JSHINT fail in '+file.path);\n    file.jshint.results.forEach(function (err) {\n      if (err) {\n        console.log(' '+file.path + ': line ' + err.line + ', col ' + err.character + ', code ' + err.code + ', ' + err.reason);\n      }\n    });\n  }\n  cb(null, file);\n});\n\ngulp.task('lint', function() {\n  return gulp.files('./lib/*.js')\n    .pipe(jshint())\n    .pipe(myReporter);\n});\n```\n\n### Reporter Configuration\n\nSome reporters have options which, and you can pass them to `jshint.reporter()`. Here is an example of useing verbose mode with the default JSHint reporter.\n\n```js\ngulp.task('lint', function() {\n  return gulp.files('./lib/*.js')\n    .pipe(jshint())\n    .pipe(jshint.reporter('default', { verbose: true }));\n});\n```\n\n## Extract\n\nTells JSHint to extract JavaScript from HTML files before linting (see [JSHint CLI flags](http://www.jshint.com/docs/cli/)). Keep in mind that it doesn't override the file's content after extraction. This is your tool of choice to lint web components!\n\n```js\ngulp.task('lintHTML', function() {\n  return gulp.src('./src/*.html')\n    // if flag is not defined default value is 'auto'\n    .pipe(jshint.extract('auto|always|never'))\n    .pipe(jshint())\n    .pipe(jshint.reporter('default'));\n});\n```\n\n## LICENSE\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 Spencer Alger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spenceralger/gulp-jshint/issues"
  },
  "_id": "gulp-jshint@1.8.4",
  "dist": {
    "shasum": "21382a1d8e9286780bb883038d0b635acad666fe"
  },
  "_from": "gulp-jshint@",
  "_resolved": "https://registry.npmjs.org/gulp-jshint/-/gulp-jshint-1.8.4.tgz"
}
