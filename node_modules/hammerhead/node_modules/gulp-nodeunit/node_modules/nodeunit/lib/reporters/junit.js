/*!
 * Nodeunit
 * Copyright (c) 2010 Caolan McMahon
 * MIT Licensed
 */

/**
 * Module dependencies
 */

var nodeunit = require('../nodeunit'),
    utils = require('../utils'),
    fs = require('fs'),
    path = require('path'),
    async = require('../../deps/async'),
    AssertionError = require('assert').AssertionError,
    child_process = require('child_process'),
    ejs = require('../../deps/ejs');


/**
 * Reporter info string
 */

exports.info = "jUnit XML test reports";
XML_INFO = '<?xml version="1.0" encoding="UTF-8" ?>\n';
TEST_SUITE_ROOT_START_TAG = '<test-suite name="Root suite" ';
TEST_SUITE_ROOT_END_TAG = '</results>\n</test-suite>';
TEST_RESULTS_START_TAG = '<test-results name="Nodeunit runner output" not-run="0" ';
TEST_RESULTS_END_TAG = '</test-results>\n';

/**
 * Ensures a directory exists using mkdir -p.
 *
 * @param {String} path
 * @param {Function} callback
 * @api private
 */

var ensureDir = function (path, callback) {
    var mkdir = child_process.spawn('mkdir', ['-p', path]);
    mkdir.on('error', function (err) {
        callback(err);
        callback = function () {
        };
    });
    mkdir.on('exit', function (code) {
        if (code === 0) callback();
        else callback(new Error('mkdir exited with code: ' + code));
    });
};


/**
 * Returns absolute version of a path. Relative paths are interpreted
 * relative to process.cwd() or the cwd parameter. Paths that are already
 * absolute are returned unaltered.
 *
 * @param {String} p
 * @param {String} cwd
 * @return {String}
 * @api public
 */

var abspath = function (p, /*optional*/cwd) {
    if (p[0] === '/') return p;
    cwd = cwd || process.cwd();
    return path.normalize(path.join(cwd, p));
};


/**
 * Run all tests within each module, reporting the results to the command-line,
 * then writes out junit-compatible xml documents.
 *
 * @param {Array} files
 * @api public
 */

exports.run = function (files, opts, callback) {
    opts.output = abspath(opts.output);
    var error = function (str) {
        return opts.error_prefix + str + opts.error_suffix;
    };
    var ok = function (str) {
        return opts.ok_prefix + str + opts.ok_suffix;
    };
    var bold = function (str) {
        return opts.bold_prefix + str + opts.bold_suffix;
    };

    var start = new Date().getTime();
    var paths = files.map(function (p) {
        return path.resolve(p);
    });

    var modules = {};
    var curModule;

    nodeunit.runFiles(paths, {
        testspec: opts.testspec,
        testFullSpec: opts.testFullSpec,
        moduleStart: function (name) {
            curModule = {
                errorCount: 0,
                failureCount: 0,
                tests: 0,
                testcases: [],
                name: name
            };
            modules[name] = curModule;
        },
        testDone: function (name, assertions) {
            var testcase = {name: name};
            for (var i = 0; i < assertions.length; i++) {
                var a = assertions[i];
                if (a.failed()) {
                    a = utils.betterErrors(a);
                    testcase.failure = {
                        message: a.message,
                        backtrace: a.error.stack
                    };

                    if (a.error instanceof AssertionError) {
                        curModule.failureCount++;
                    }
                    else {
                        curModule.errorCount++;
                    }
                    break;
                }
            }
            curModule.tests++;
            curModule.testcases.push(testcase);
        },
        done: function (assertions) {
            var end = new Date().getTime(),
                duration = end - start,
                total = 0,
                failures = 0,
                output = '',
                filename = path.join(opts.output, 'result.xml');

            fs.stat(filename, function (err, fStats) {
                if (!err && fStats.isFile())
                    fs.unlinkSync(filename);

                ensureDir(opts.output, function (err) {
                    var tmplFile = __dirname + "/../../share/junit.xml.ejs",
                        content = fs.readFileSync(tmplFile);

                    var tmpl = content.toString();
                    for (var moduleIndex in modules) {
                        var module = modules[moduleIndex];
                        var rendered = ejs.render(tmpl, {
                            locals: {suites: [module]}
                        });

                        total += module.tests;
                        failures += module.errorCount;
                        output += rendered;
                    }

                    var successStatus = (failures === 0) ? 'True' : 'False',
                        testSuiteRootStartTag = TEST_SUITE_ROOT_START_TAG + ' time="' + duration + '" asserts="' + total + '" success="' + successStatus + '">\n<results>\n',
                        testResultsStartTag = TEST_RESULTS_START_TAG + ' total="' + total + '" failures="' + failures + '" >\n';


                    var fileDesc = fs.openSync(filename, 'a+'),
                        result = XML_INFO +
                            testResultsStartTag +
                            testSuiteRootStartTag +
                            output +
                            TEST_SUITE_ROOT_END_TAG +
                            TEST_RESULTS_END_TAG;

                    fs.writeSync(fileDesc, result);
                    fs.closeSync(fileDesc);

                    if (callback) callback(assertions.failures() ? new Error('We have got test failures.') : undefined);
                });

            });
        }
    });
};