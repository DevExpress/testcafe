var analysisUtil = require('./analysis-util');

var timing          = null;
var originResources = null;
var proxyResources  = null;
var originErrors    = null;
var proxyErrors     = null;
var url             = null;

exports.processHistory = function (data) {
    initData(data);
    clearResources();
    mergeInfo();

    return formatHistory();
};

exports.processStatistics = function (timestamp, history) {
    var statisticsTimingProps = getStatisticsTimingProps();
    var statistics            = {
        timestamp:          timestamp,
        sitesWithoutErrors: 0,
        sitesWithErrors:    0,
        timing:             {}
    };

    var initTimingProp = function (timing, prop) {
        timing[prop] = [];
    };

    var calcTimingRatio = function (statisticsTiming, historyTiming, prop) {
        statisticsTiming[prop].push(historyTiming[prop].proxy / historyTiming[prop].origin || 0);
    };

    var calcMedian = function (timing, prop) {
        timing[prop] = analysisUtil.calcMedian(timing[prop]);
    };

    statisticsTimingProps.forEach(initTimingProp.bind(null, statistics.timing));

    for (var i = 0; i < history.length; i++) {
        if (!history[i].console.length) {
            statisticsTimingProps.forEach(calcTimingRatio.bind(null, statistics.timing, history[i].timing));
            statistics.sitesWithoutErrors++;
        } else
            statistics.sitesWithErrors++;
    }

    if (statistics.sitesWithoutErrors) {
        statisticsTimingProps.forEach(calcMedian.bind(null, statistics.timing));

        return statistics;
    }

    return null;
};

exports.mergeHistory = function (historyArray) {
    var mergedHistory = historyArray[0];
    var timingArray   = new Array(historyArray.length);

    for (var i = 0; i < historyArray.length; i++)
        timingArray[i] = historyArray[i].timing;

    mergedHistory.timing = mergeTiming(timingArray);

    return mergedHistory;
};


function formatHistory () {
    return {
        network: getResourcesAbsentOnProxy(),
        console: proxyErrors,
        timing:  timing,
        url:     url
    };
}

function initData (data) {
    timing          = createTimingObj(data.originInfo.page, data.proxyInfo.page);
    originResources = data.originInfo.network;
    proxyResources  = data.proxyInfo.network;
    originErrors    = data.originInfo.console;
    proxyErrors     = data.proxyInfo.console;
    url             = data.url;
}

function createTimingObj (originPage, proxyPage) {
    return {
        load:       { origin: originPage.load, proxy: proxyPage.load },
        domLoad:    { origin: originPage.domContentLoad, proxy: proxyPage.domContentLoad },
        document:   { origin: 0, proxy: 0 },
        script:     { origin: 0, proxy: 0 },
        stylesheet: { origin: 0, proxy: 0 },
        other:      { origin: 0, proxy: 0 },
        hh:         { proxy: 0 }
    };
}

function clearResources () {
    removeServiceResources();
    removeResourcesWithDataProtocol(originResources);
    removeResourcesWithDataProtocol(proxyResources);
}

function removeServiceResources () {
    var index = 0;

    while (index < proxyResources.length) {
        if (analysisUtil.isServiceUrl(proxyResources[index].url)) {
            timing.hh.proxy += proxyResources[index].download;
            removeResources(proxyResources, index);
        } else
            index++;
    }
}

function removeResourcesWithDataProtocol (resources) {
    var index = 0;

    while (index < resources.length) {
        if (!resources[index].url.indexOf('data:'))
            removeResources(resources, index);
        else
            index++;
    }
}

function removeResources (resources, indexes) {
    indexes = indexes instanceof Array ? indexes : [indexes];

    for (var index = 0; index < indexes.length; index++)
        resources.splice(indexes[index] - index, 1);
}

function mergeInfo () {
    mergeResources();
    mergeErrors();
}

function mergeErrors () {
    var originIndex = 0;

    while (originIndex < originErrors.length) {
        var proxyIndex = searchInProxyErrors(originErrors[originIndex]);

        if (proxyIndex !== -1) {
            originErrors.splice(originIndex, 1);
            proxyErrors.splice(proxyIndex, 1);
        } else
            originIndex++;
    }
}

function searchInProxyErrors (originError) {
    for (var index = 0; index < proxyErrors.length; index++) {
        if (originError.text === proxyErrors[index].text && originError.type === proxyErrors[index].type)
            return index;
    }

    return -1;
}

function mergeResources () {
    var index = 0;

    while (index < originResources.length) {
        var originResource = originResources[index];
        var proxyIndexes   = searchInProxyResources(originResource);

        var proxyRes = proxyIndexes.map(function (i) {
            return proxyResources[i];
        });

        if (proxyIndexes.length > 0) {
            addTimingData(originResource, proxyRes);
            removeResources(originResources, index);
            removeResources(proxyRes, proxyIndexes);
            removeMergingResourcesErrors(originResource, proxyRes);
        } else
            index++;
    }
}

function searchInProxyResources (originResource) {
    var proxyIndexes = [];

    for (var index = 0; index < proxyResources.length; index++) {
        var proxyResource = proxyResources[index];

        if (equalResources(originResource, proxyResource)) {
            proxyIndexes.push(index);

            if (proxyIndexes.length === 2 || proxyResource.status < 400 ||
                /*originResource.type !== 'image' || */analysisUtil.isProxyUrl(proxyResource.url))
                break;
        }
    }

    return proxyIndexes;
}

function equalResources (originResource, proxyResource) {
    return (!(originResource.type && proxyResource.type) || originResource.type === proxyResource.type) &&
           analysisUtil.equalUrls(originResource.url, proxyResource.url);
}

function addTimingData (originResource, proxyResources) {
    var type = originResource.type;

    type = !timing.hasOwnProperty(type) ? 'other' : type;

    if (proxyResources.length === 1) {
        if (originResource.status < 400 && proxyResources[0].status < 400 &&
            analysisUtil.isProxyUrl(proxyResources[0].url)) {
            timing[type].origin += originResource.download;
            timing[type].proxy += proxyResources[0].download;
        }
    } else if (proxyResources.length === 2) {
        if (originResource.status < 400 && proxyResources[1].status < 400) {
            timing[type].origin += originResource.download;
            timing[type].proxy += proxyResources[0].download;
            timing[type].proxy += proxyResources[1].download;
        }
    }
}

function removeMergingResourcesErrors (originResource, proxyResources) {
    if (proxyResources.length === 1) {
        if (originResource.status >= 400) {
            removeErrorByResourceId(originErrors, originResource.networkRequestId);
            removeErrorByResourceId(proxyErrors, proxyResources[0].networkRequestId);
        }
    } else if (proxyResources.length === 2) {
        if (originResource.status >= 400) {
            removeErrorByResourceId(originErrors, originResource.networkRequestId);
            removeErrorByResourceId(proxyErrors, proxyResources[0].networkRequestId);
            removeErrorByResourceId(proxyErrors, proxyResources[1].networkRequestId);
        } else {
            removeErrorByResourceId(proxyErrors, proxyResources[0].networkRequestId);
        }
    }
}

function getResourcesAbsentOnProxy () {
    var result   = [];
    var testFunc = function (withError, resource) {
        if (withError ? resource.status >= 400 : resource.status < 400)
            this.push(resource);
    };

    proxyResources.forEach(testFunc.bind(result, true));
    originResources.forEach(testFunc.bind(result, false));

    return result;
}

function removeErrorByResourceId (errors, networkRequestId) {
    var index = 0;

    while (index < errors.length) {
        if (errors[index].networkRequestId === networkRequestId)
            errors.splice(index, 1);
        else
            index++;
    }
}

function getStatisticsTimingProps () {
    var statisticsTimingProps = Object.keys(createTimingObj({}, {}));

    statisticsTimingProps.splice(statisticsTimingProps.indexOf('hh'), 1);
    statisticsTimingProps.splice(statisticsTimingProps.indexOf('other'), 1);

    return statisticsTimingProps;
}

function mergeTiming (timingArray) {
    var mergedTiming = timingArray[0];

    Object.keys(mergedTiming).forEach(function (prop) {
        mergedTiming[prop].origin = [mergedTiming[prop].origin];
        mergedTiming[prop].proxy  = [mergedTiming[prop].proxy];

        for (var i = 1; i < timingArray.length; i++) {
            mergedTiming[prop].origin.push(timingArray[i][prop].origin);
            mergedTiming[prop].proxy.push(timingArray[i][prop].proxy);
        }

        mergedTiming[prop].origin = analysisUtil.calcMedian(mergedTiming[prop].origin);
        mergedTiming[prop].proxy  = analysisUtil.calcMedian(mergedTiming[prop].proxy);
    });

    return mergedTiming;
}
