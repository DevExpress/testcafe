var pageInspector = require('./page-inspector');
var analysis      = require('./analysis');
var analysisUtil  = require('./analysis-util');
var mongo         = require('./mongo');

var async = require('async');

var config = require('./../conf.json');

// Const
var ADDITIONAL_REPEAT_COUNT = 5;
var REPEAT_COUNT            = config.tests.repeatCount || 3;
var LIMIT_ERROR_PERCENT     = 0.1;
var TOLERANCE_LOAD_PERCENT  = 0.2;

var timestamp       = null;
var pageAfterTest   = null;
var history         = null;
var firstRunHistory = null;
var testingUrl      = null;

exports.init = function (socketUrl, _pageAfterTest, callback) {
    pageAfterTest = _pageAfterTest;

    pageInspector.on(pageInspector.OPEN_EVENT, function (err) {
        if (err)
            throw err;

        if (callback)
            callback();
    });

    pageInspector.on(pageInspector.CLOSE_EVENT, function (err) {
        console.warn('Page inspector are closed' + (err ? ' with error ' + err.toString() : '') + '.');
    });

    pageInspector.init(socketUrl, config.tests.timeoutAfterLoad, config.tests.pageMaxLoadTime);
};

exports.runOnce = function (callback) {
    timestamp       = new Date().getTime();
    history         = [];
    firstRunHistory = [];

    mongo.getEnableUrlList(function (urlList) {
        testPageList(urlList, function () {
            saveStatistics(function () {
                isSucceed(function (success) {
                    if (pageAfterTest)
                        pageInspector.inspectPage(pageAfterTest, function () {
                        });

                    callback(success);
                });
            });
        });
    });
};

exports.runCycle = function (delay) {
    exports.runOnce(setTimeout.bind(this, exports.runCycle.bind(this, delay), delay));
};

function saveStatistics (callback) {
    var statistics            = analysis.processStatistics(timestamp, history);
    var statisticsForFirstRun = analysis.processStatistics(timestamp, firstRunHistory);

    var finishTest = function () {
        callback && callback();
    };

    if (statistics) {
        if (statisticsForFirstRun)
            statistics.timingForFirstRun = statisticsForFirstRun.timing;

        mongo.insertStatistics(statistics, finishTest);
    } else
        finishTest();
}

function testPageList (urlList, callback) {
    async.eachSeries(urlList, function (urlObj, callback) {
        testingUrl = urlObj.url;

        async.mapSeries([
            urlObj.url,
            analysisUtil.createSession(urlObj.url)
        ], testPage, function (err, data) {
            saveHistory(data[0], data[1], callback);
        });
    }, callback);
}

function saveHistory (originData, proxyData, callback) {
    var historyArray = new Array(Math.min(originData.length, proxyData.length));
    var firstRun     = null;
    var his      = null;

    for (var i = 0; i < historyArray.length; i++) {
        historyArray[i] = analysis.processHistory({
            url:        testingUrl,
            originInfo: originData[i],
            proxyInfo:  proxyData[i]
        });
    }

    firstRun = historyArray.shift();
    his  = analysis.mergeHistory(historyArray);

    firstRunHistory.push(firstRun);
    history.push(his);
    mongo.insertInDataByTimestamp(his, timestamp, callback);
}

function testPage (url, callback) {
    var succeedCount    = 0;
    var failedCount     = 0;
    var attemptCount    = ADDITIONAL_REPEAT_COUNT + REPEAT_COUNT;
    var cacheAttempt    = null;
    var error           = null;
    var inspectedResult = [];

    pageInspector.inspectPage(url, function (obj, err) {
        attemptCount--;

        if (cacheAttempt) {
            if (!err && !obj.console.length) {
                inspectedResult.push(obj);
                succeedCount++;
            } else {
                error = obj;
                failedCount++;

                if (failedCount === REPEAT_COUNT && succeedCount === 0)
                    return callback(null, [cacheAttempt, obj]);
            }
        } else
            cacheAttempt = obj;

        if (succeedCount < REPEAT_COUNT && attemptCount)
            pageInspector.inspectPage(url, arguments.callee);
        else if (succeedCount < REPEAT_COUNT)
            callback(null, [cacheAttempt, error]);
        else {
            inspectedResult.unshift(cacheAttempt);
            callback(null, inspectedResult);
        }
    });
}

function isSucceed (callback) {
    mongo.getStatistics(0, function (docs) {
        if (docs) {
            var currentLoad = Infinity;
            var minLoad     = Infinity;

            for (var i = 0; i < docs.length; i++) {
                var statistics = docs[i];

                if (minLoad > statistics.timing.load)
                    minLoad = statistics.timing.load;

                if (timestamp === statistics.timestamp) {
                    currentLoad = statistics.timing.load;

                    if (statistics.sitesWithErrors / (statistics.sitesWithoutErrors + statistics.sitesWithErrors) >
                        LIMIT_ERROR_PERCENT)

                        return callback(false);
                }
            }

            callback((minLoad * (1 + TOLERANCE_LOAD_PERCENT)) >= currentLoad);
        } else
            callback(false);
    });
}
