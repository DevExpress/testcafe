var util            = require('util');
var EventEmitter    = require('events').EventEmitter;
var WebSocketClient = require('websocket').client;

// Const
exports.OPEN_EVENT  = 'open';
exports.CLOSE_EVENT = 'close';

PAGE_INSPECTED_EVENT   = 'pageInspected';
NETWORK_INSPECT_ID     = 1;
CONSOLE_INSPECT_ID     = 2;
PAGE_INSPECT_ID        = 4;
CACHE_DISABLED_ID      = 8;
PAGE_NAVIGATE_ID       = 16;
INFINITE_PAGE_LOAD_ERR = 'Infinite page load';

var timeoutAfterPageLoad      = 0;
var timeoutInfinitePageLoad   = 0;
var timeoutInfinitePageLoadId = null;
var initState                 = 0;
var connection                = null;
var data                      = null;
var isListenMassage           = false;

var eventEmmiter = new EventEmitter();

exports.on = eventEmmiter.on.bind(eventEmmiter);

exports.inspectPage = function (url, callback) {
    eventEmmiter.once(PAGE_INSPECTED_EVENT, callback);
    resetData();
    loadPage(url);

    timeoutInfinitePageLoadId = setTimeout(function () {
        onPageInspected({ text: INFINITE_PAGE_LOAD_ERR, type: 'err' });
    }, timeoutInfinitePageLoad);
};

exports.init = function (socketUrl, _timeoutAfterPageLoad, _timeoutInfinitePageLoad) {
    timeoutAfterPageLoad    = _timeoutAfterPageLoad;
    timeoutInfinitePageLoad = _timeoutInfinitePageLoad;
    initWebSocket(socketUrl);
};

function resetData () {
    data = {
        page:    {},
        network: { requests: 0, finished: 0 },
        console: []
    };
}

function loadPage (url) {
    connection.send(JSON.stringify({
        id:     PAGE_NAVIGATE_ID,
        method: 'Page.navigate',
        params: { url: url }
    }));
}

function initWebSocket (socketUrl) {
    var webSocketClient = new WebSocketClient();

    webSocketClient.on('connectFailed', function () {
        eventEmmiter.emit(exports.OPEN_EVENT)
    });

    webSocketClient.on('connect', onSocketConnect);
    webSocketClient.connect(socketUrl);
}

function onSocketConnect (_connection) {
    var onConnectionClose = function () {
        eventEmmiter.emit(exports.CLOSE_EVENT);
    };

    connection = _connection;

    connection.on('error', onConnectionClose);
    connection.on('close', onConnectionClose);
    connection.on('message', onMessage);

    prepareBrowser();
}

function prepareBrowser () {
    connection.send(JSON.stringify({ id: NETWORK_INSPECT_ID, method: 'Network.enable' }));
    connection.send(JSON.stringify({ id: CONSOLE_INSPECT_ID, method: 'Console.enable' }));
    connection.send(JSON.stringify({ id: PAGE_INSPECT_ID, method: 'Page.enable' }));
    connection.send(JSON.stringify({
        id:     CACHE_DISABLED_ID,
        method: 'Network.setCacheDisabled',
        params: { cacheDisabled: true }
    }));
}

function updateInitState (id) {
    /* jshint -W016 */
    initState |= id;

    if (initState === (NETWORK_INSPECT_ID | CONSOLE_INSPECT_ID | PAGE_INSPECT_ID | CACHE_DISABLED_ID))
        eventEmmiter.emit(exports.OPEN_EVENT);
    /* jshint +W016 */
}

function onMessage (message) {
    var parsedMsg = JSON.parse(message.utf8Data);
    var msgType   = parsedMsg.method && parsedMsg.method.substring(0, parsedMsg.method.indexOf('.'));

    switch (parsedMsg.id) {
        case NETWORK_INSPECT_ID:
        case CONSOLE_INSPECT_ID:
        case PAGE_INSPECT_ID:
        case CACHE_DISABLED_ID:
            updateInitState(parsedMsg.id);
            break;
        case PAGE_NAVIGATE_ID:
            if (!parsedMsg.result)
                throw parsedMsg.error.message;
            else
                data.page.mainFrameId = parsedMsg.result.frameId;
            break;
        default:
            if (data) {
                if (msgType === 'Page')
                    onPageDataMsg(parsedMsg);
                else if (msgType === 'Network')
                    onNetworkDataMsg(parsedMsg);
                else if (msgType === 'Console')
                    onConsoleDataMsg(parsedMsg);
            }
    }

    // for debug
    //console.log('isListenMassage - ' + (this._isListenMassage ? 'unlock' : 'lock'));
    //console.log(util.inspect(parsedMsg, { showHidden: false, colors: true, depth: 3 }));
}

function onPageInspected (err) {
    var pageFrameInfo    = data.page[data.page.mainFrameId];
    var processedNetwork = [];
    var notLoadedUrls    = [];
    var pageTiming       = {};

    isListenMassage = false;
    clearTimeout(timeoutInfinitePageLoadId);

    if (pageFrameInfo) {
        pageTiming.domContentLoad = (data.page.domContentLoad || new Date().getTime()) - pageFrameInfo.startedLoading;
        pageTiming.load           = (data.page.load || new Date().getTime()) - pageFrameInfo.startedLoading;
    }

    Object.keys(data.network)
        .filter(function (networkId) {
            return networkId.indexOf(data.id) === 0;
        })
        .sort(function (a, b) {
            var lengthDif = a.length - b.length;

            return lengthDif ? lengthDif : a.localeCompare(b);
        })
        .forEach(function (networkId) {
            var resource = data.network[networkId];

            if (resource.finished) {
                processedNetwork.push({
                    url:              resource.url,
                    type:             resource.type && resource.type.toLowerCase(),
                    status:           typeof resource.status === 'undefined' ? 500 : resource.status,
                    download:         resource.finished - resource.willBeSent,
                    networkRequestId: networkId
                });
            } else
                notLoadedUrls.push(resource.url);
        });

    if (err) {
        err.stack = notLoadedUrls.join('\n');
        data.console.push(err);
    }

    eventEmmiter.emit(PAGE_INSPECTED_EVENT, {
        page:    pageTiming,
        network: processedNetwork,
        console: data.console
    }, err);
}

function onPageDataMsg (dataMsg) {
    if (!dataMsg.params)
        return;

    var frameId = dataMsg.params.frameId || (dataMsg.params.frame && dataMsg.params.frame.id);

    switch (dataMsg.method) {
        case 'Page.frameStartedLoading':
            if (!data.page[frameId])
                data.page[frameId] = {};

            data.page[frameId].startedLoading = new Date().getTime();

            if (!data.id) {
                data.id         = frameId.split('.')[0];
                isListenMassage = true;
            }

            break;
        case 'Page.frameStoppedLoading':
            if (data.page[frameId])
                data.page[frameId].stoppedLoading = new Date().getTime();

            break;
        case 'Page.frameNavigated':
            if (data.page[frameId])
                data.page[frameId].navigated = new Date().getTime();

            break;
        case 'Page.domContentEventFired':
            data.page.domContentLoad = new Date().getTime();

            break;
        case 'Page.loadEventFired':
            data.page.load = new Date().getTime();

            setTimeout(onPageInspected, timeoutAfterPageLoad);

            break;
    }
}

function onNetworkDataMsg (dataMsg) {
    var requestId = dataMsg.params.requestId;

    switch (dataMsg.method) {
        case 'Network.requestWillBeSent':
            if (requestId.indexOf(data.id) === 0) {
                if (!data.network[requestId]) {
                    if (isListenMassage) {
                        data.network[requestId] = {};
                        data.network.requests++;
                    } else
                        break;
                }

                data.network[requestId].url        = dataMsg.params.request.url;
                data.network[requestId].willBeSent = new Date().getTime();
            }

            break;
        case 'Network.responseReceived':
            if (data.network[requestId]) {
                data.network[requestId].type     = dataMsg.params.type;
                data.network[requestId].status   = dataMsg.params.response.status;
                data.network[requestId].received = new Date().getTime();
            }

            break;
        case 'Network.loadingFinished':
            if (data.network[requestId]) {
                data.network[requestId].finished = new Date().getTime();
                data.network.finished++;
            }

            break;
        case 'Network.loadingFailed':
            if (data.network[requestId]) {
                data.network[requestId].finished = new Date().getTime();
                data.network.finished++;
            }

            break;
    }
}

function onConsoleDataMsg (dataMsg) {
    if (isListenMassage && dataMsg.method === 'Console.messageAdded' &&
        dataMsg.params.message.level === 'error') {
        data.console.push({
            text:             dataMsg.params.message.text,
            type:             dataMsg.params.message.type,
            stack:            formatStackTrace(dataMsg.params.message.stackTrace),
            networkRequestId: dataMsg.params.message.networkRequestId
        });
    }
}

function formatStackTrace (stackTrace) {
    if (stackTrace) {
        var result = [];

        for (var i = 0, j = stackTrace.length; i < j; i++) {
            result.push('<b>');
            result.push(stackTrace[i].functionName || '(anonymous function)');
            result.push('</b>\t\t');
            result.push(stackTrace[i].url);
            result.push(':');
            result.push(stackTrace[i].lineNumber);
            result.push(':');
            result.push(stackTrace[i].columnNumber);
            result.push('\n');
        }

        return result.join('');
    } else
        return null;
}
