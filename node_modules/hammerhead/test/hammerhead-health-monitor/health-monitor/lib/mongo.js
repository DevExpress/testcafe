var mongo    = require('mongodb');
var Db       = mongo.Db;
var Server   = mongo.Server;
var ObjectID = mongo.ObjectID;

var STATISTICS_COLLECTION_NAME = 'statistics';
var DATA_COLLECTION_NAME       = 'results';
var URLS_COLLECTION_NAME       = 'urls';
var LIVE_TIME_HISTORY          = 90 * 24 * 60 * 60 * 1000;

var statisticsCollection = null;
var dataCollection       = null;
var urlsCollection       = null;
var buildInfo            = null;

var defaultDbOptions = {
    dbName: 'proxy_test',
    host:   '127.0.0.1',
    port:   27017,
    user:   'admin',
    pwd:    '123'
};

exports.insertUrl  = insertUrl;
exports.insertUrls = insertUrls;

exports.connect = function (options, callback) {
    options = initOptions(options);

    var db = new Db(options.dbName, new Server(options.host, options.port), { safe: false });

    db.open(function (err, db) {
        if (err)
            throw err;

        db.authenticate(options.user, options.pwd, function (err) {
            if (err)
                throw err;

            statisticsCollection = db.collection(STATISTICS_COLLECTION_NAME);
            dataCollection       = db.collection(DATA_COLLECTION_NAME);
            urlsCollection       = db.collection(URLS_COLLECTION_NAME);

            exports.clearOldHistory(function () {
                if (callback)
                    callback();
            });
        });
    });
};

exports.setBuildInfo = function (_buildInfo) {
    buildInfo = _buildInfo;
};

exports.insertInDataByTimestamp = function (data, timestamp, callback) {
    dataCollection.findOne({ timestamp: timestamp }, function (err, doc) {
        if (err)
            throw err;

        if (doc)
            doc.data.push(data);
        else
            doc = { timestamp: timestamp, data: [data], buildInfo: buildInfo };

        dataCollection.update(
            { timestamp: timestamp },
            doc,
            { upsert: true },
            function (err) {
                if (err)
                    throw err;
                else
                    callback();
            }
        );
    });
};

exports.findLastData = function (callback) {
    var cursor = dataCollection.find().sort({ timestamp: -1 }).limit(1);

    cursor.nextObject(function (err, doc) {
        if (err)
            throw err;

        callback(doc);
    });
};

exports.findDataByTimestamp = function (timestamp, callback) {
    dataCollection.findOne({ timestamp: timestamp }, function (err, doc) {
        if (err)
            throw err;

        callback(doc);
    });
};

exports.insertStatistics = function insertStatistics (data, callback) {
    statisticsCollection.insert(
        data,
        { w: 1 },
        function (err, docs) {
            if (err)
                throw err;

            callback(docs[0]);
        }
    );
};

exports.getStatistics = function (startDate, callback) {
    statisticsCollection
        .find({ timestamp: { $gte: startDate } })
        .sort({ timestamp: 1 })
        .toArray(function (err, docs) {
            if (err)
                throw err;

            callback(docs);
        });
};

exports.getUrlList = function (callback) {
    urlsCollection
        .find()
        .sort({ active: -1, url: 1 })
        .toArray(function (err, docs) {
            if (err)
                throw err;

            callback(docs);
        });
};

exports.getEnableUrlList = function (callback) {
    urlsCollection
        .find({ active: true })
        .sort({ url: 1 })
        .toArray(function (err, docs) {
            if (err)
                throw err;

            callback(docs);
        });
};

exports.changeUrl = function (url, callback) {
    var id    = url._id;
    var query = typeof id === 'undefined' ? {} : { _id: new ObjectID(id) };

    delete url._id;

    urlsCollection.update(query, { $set: url }, { multi: true }, function (err) {
        if (err)
            throw err;

        urlsCollection
            .find(query)
            .sort({ active: -1, url: 1 })
            .toArray(function (err, docs) {
                if (err)
                    throw err;

                callback(docs);
            });
    });
};

exports.removeUrl = function (url, callback) {
    var id    = url._id;
    var query = typeof id === 'undefined' ? {} : { _id: new ObjectID(id) };

    urlsCollection.remove(query, function (err) {
        if (err)
            throw err;

        callback();
    });
};

exports.getRunList = function (limit, callback) {
    var cursor = dataCollection.find(null, { timestamp: 1, _id: 0 });

    if (limit)
        cursor.limit(limit);

    cursor.toArray(function (err, docs) {
        if (err)
            throw err;

        callback(docs.sort(function (a, b) {
            return b.timestamp - a.timestamp;
        }));
    });
};

exports.clearStatisticsAndHistory = function (callback) {
    dataCollection.remove(null, function (err) {
        if (err)
            throw err;

        statisticsCollection.remove(null, function (err) {
            if (err)
                throw err;

            callback();
        });
    });
};

exports.clearOldHistory = function (callback) {
    var now = (new Date()).getTime();

    dataCollection.remove({
        timestamp: {
            $lt: now - LIVE_TIME_HISTORY
        }
    }, function (err) {
        if (err)
            throw err;

        callback();
    });
};

function insertUrl (url, callback) {
    urlsCollection.findOne({ url: url }, function (err, doc) {
        if (err)
            throw err;

        if (!doc) {
            urlsCollection.insert(
                { url: url, active: true },
                { w: 1 },
                function (err, docs) {
                    if (err)
                        throw err;

                    callback(docs[0]);
                }
            );
        } else if (!doc.active) {
            urlsCollection.update(
                { _id: doc._id },
                { $set: { active: true } },
                { multi: true },
                function (err) {
                    if (err)
                        throw err;

                    doc.active = true;
                    callback(doc);
                });
        } else
            callback(null);
    });
}

function insertUrls (urls, callback, docs) {
    docs = docs || [];

    if (urls.length) {
        insertUrl(urls.shift(), function (doc) {
            if (doc)
                docs.push(doc);

            insertUrls(urls, callback, docs);
        });
    } else
        callback(docs);
}

function initOptions (options) {
    for (var option in defaultDbOptions) {
        if (defaultDbOptions.hasOwnProperty(option))
            options[option] = options[option] || defaultDbOptions[option];
    }

    return options;
}
