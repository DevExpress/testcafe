var childProcess = require('child_process');
var http         = require('http');
var path         = require('path');
var fs           = require('fs');
var parseString  = require('xml2js').parseString;

var analysisUtil = require('./lib/analysis-util');
var mongo        = require('./lib/mongo');
var runner       = require('./lib/runner');

var proxy   = require('../../../lib/proxy');
var session = require('../../../lib/session');

var config = require('./conf.json');

// Const
var CHROME_DEBUG_PARAM         = '--remote-debugging-port=9222';
var CHROME_NO_SANDBOX_PARAM    = '--no-sandbox';
var BROWSER_PATH_REG_CMD       = 'reg query "HKEY_LOCAL_MACHINE\\SOFTWARE\\Clients\\StartMenuInternet\\Google Chrome\\shell\\open\\command"';
var CHROME_INFO_ABOUT_TABS_URL = 'http://localhost:9222/json';
var GET_SOCKET_URL_ATTEMPTS    = 2;
var GET_SOCKET_URL_DELAY       = 15 * 1000;

var socketUrlAttemptsCount = GET_SOCKET_URL_ATTEMPTS;

exports.db = mongo;

exports.init = function (settings, callback) {
    var initFunc = function() {
        mongo.connect(config.mongodb, function () {
            if (settings.runInspector) {
                setBuildInfo(settings.buildInfo);

                analysisUtil.init(settings.port1, settings.port2);

                runChrome(settings.startUrl);

                getSocketUrl(0, function (socketUrl) {
                    runner.init(socketUrl, settings.startUrl, callback);
                });
            } else
                callback && callback();
        });
    };

    if (settings.runMongoLocal) {
        var oldCallback = callback;

        delete config.mongodb.host;
        callback = function() {
            var msg  = 'Health Monitor running in http://monitor:dx_pass0354@localhost:1350/';
            var line = new Array(msg.length + 1).join('-');

            console.log([line, msg, line].join('\n'));
            oldCallback && oldCallback();
        };
        runLocalMongoDB(initFunc);
    } else
        initFunc();
};

exports.runOnce = runner.runOnce;
exports.runCycle = runner.runCycle;

function runChrome (url) {
    childProcess.exec(BROWSER_PATH_REG_CMD, function (error, stdout) {
        var path = stdout.match(/reg_sz\s+"(.+)"/i)[1];

        if (path)
            childProcess.execFile(path, [CHROME_DEBUG_PARAM, CHROME_NO_SANDBOX_PARAM, url]);
    });
}

function setBuildInfo (buildInfo) {
    parseString(buildInfo, {
        normalizeTags: true,
        explicitArray: false
    }, function (err, result) {
        var processedBuildInfo = processBuildInfo(err, result);

        if (processedBuildInfo)
            mongo.setBuildInfo(processedBuildInfo);
    });
}

function processBuildInfo (err, result) {
    if (!err && result && result.modificationsinfo && result.modificationsinfo.modification) {
        var buildInfo     = {};
        var modifications = result.modificationsinfo.modification;

        for (var i = 0, j = modifications.length; i < j; i++) {
            if (!(modifications[i].version in buildInfo)) {
                buildInfo[modifications[i].version] = {
                    version:      +modifications[i].version,
                    comment:      modifications[i].comment,
                    modifiedTime: new Date(modifications[i].modifiedtime),
                    userName:     modifications[i].username
                };
            }
        }

        buildInfo = Object.keys(buildInfo).map(function (key) {
            return buildInfo[key];
        });

        return buildInfo;
    }
}

function getSocketUrl (position, callback) {
    var chunks = [];

    http.get(CHROME_INFO_ABOUT_TABS_URL, function (res) {
        res.on('data', chunks.push.bind(chunks));
        res.on('end', function () {
            callback(JSON.parse(chunks.join(''))[position].webSocketDebuggerUrl);
        });
    }).on('error', function (err) {
        if (socketUrlAttemptsCount--)
            setTimeout(getSocketUrl(position, callback), GET_SOCKET_URL_DELAY);
        else
            throw err;
    });
}

function runLocalMongoDB (callback) {
    var dbFolderPath         = path.join(__dirname, './database');
    var mongoDBFilePath      = path.join(__dirname, './mongodb/mongod.exe');
    var mongoConnectFilePath = path.join(__dirname, './mongodb/mongo.exe');
    var lockFilePath         = dbFolderPath + '/mongod.lock';
    var needMakeDB           = !fs.existsSync(dbFolderPath);

    if (needMakeDB) {
        fs.mkdirSync(dbFolderPath);
    } else {
        if (fs.existsSync(lockFilePath))
            fs.unlinkSync(lockFilePath);
    }

    var mongodChild = childProcess.execFile(mongoDBFilePath, [
        '--bind_ip=127.0.0.1',
        '--port=1500',
        '--dbpath=' + dbFolderPath
    ], function(error) {
        if (error)
            throw error;
    });

    if (needMakeDB) {
        var mongoChild = childProcess.execFile(mongoConnectFilePath, [
            '--eval=db.createUser( { user: "proxy", pwd: "k340dkj4", roles: [ "userAdmin", "readWrite" ] } )',
            '127.0.0.1:1500/proxy_test'
        ], function(error, stdout, stderr) {
            if (!error && !stderr && /Successfully added user/.test(stdout)) {
                mongoChild.kill('SIGINT');
                callback();
            } else {
                throw error;
            }
        });
    } else {
        mongodChild.stdout.on('data', function(msg) {
            if (/waiting for connections/.test(msg)) {
                mongodChild.stdout.removeListener('data', arguments.callee);
                callback();
            }
        });
    }
}
