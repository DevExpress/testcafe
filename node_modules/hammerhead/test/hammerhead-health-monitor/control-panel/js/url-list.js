// Const
var URL_LIST_CLASS_NAME              = 'url-list';
var URL_LIST_LOCK_CLASS_NAME         = 'lock';
var URL_STATUS_CLASS_NAME            = 'status';
var URL_STATUS_DISABLE_CLASS_NAME    = 'disable';
var URL_TEXT_CLASS_NAME              = 'text';
var URL_INFO_BUTTON_CLASS_NAME       = 'info';
var URL_EDIT_BUTTON_CLASS_NAME       = 'edit';
var URL_REMOVE_BUTTON_CLASS_NAME     = 'remove';
var URL_SAVE_BUTTON_CLASS_NAME       = 'save';
var URL_CANCEL_BUTTON_CLASS_NAME     = 'cancel';
var URL_INFORMATION_CLASS_NAME       = 'information';
var URL_INFORMATION_SHOWN_CLASS_NAME = 'info-shown';
var URL_EDITABLE_CLASS_NAME          = 'editable';

var URL_ITEM_TEMPLATE_TEXT = [
    '<li class="url-item">',
    '   <div class="status"><input type="checkbox"></div>',
    '   <div class="text"></div>',
    '   <div class="button info"></div>',
    '   <div class="button edit"></div>',
    '   <div class="button remove"></div>',
    '   <div class="button save"></div>',
    '   <div class="button cancel"></div>',
    '   <pre class="information"></pre>',
    '</li>'
].join('');

function UrlList () {
    this._listElem        = null;
    this._urlItemTemplate = this._createTemplate(URL_ITEM_TEMPLATE_TEXT);
    this._isLock          = false;
    this._urlInfoLoader   = new UrlInfoLoader(this._lockUrlList.bind(this), this._unlockUrlList.bind(this));
    this._urlOldState     = null;
    this._shownItem       = null;
    this._isEditable      = false;

    this._onClickUrlItem = this._onClickUrlItem.bind(this);
    this._onError        = this._onError.bind(this);
}

UrlList.prototype.renderTo = function (parentEl) {
    var urlList = this;

    if (!urlList._listElem) {
        urlList._listElem = document.createElement('ul');
        urlList._listElem.classList.add(URL_LIST_CLASS_NAME);
        parentEl.appendChild(urlList._listElem);
    }

    urlList._urlInfoLoader.getUrls(function (dataArr) {
        urlList._renderList(dataArr);
    }, this._onError);

    return this;
};

UrlList.prototype.setGroupButtons = function (groupButtons) {
    groupButtons.setUrlList(this);
};

UrlList.prototype.toggleItemInfo = function (item) {
    var isItemHasInfo = !!item.querySelector('.' + URL_INFORMATION_CLASS_NAME).innerHTML;

    if (this._shownItem)
        this._shownItem.classList.remove(URL_INFORMATION_SHOWN_CLASS_NAME);

    if (item !== this._shownItem && isItemHasInfo) {
        item.classList.add(URL_INFORMATION_SHOWN_CLASS_NAME);
        this._shownItem = item;
    }
    else
        this._shownItem = null;
};

UrlList.prototype.removeItem = function (list, item) {
    this._urlInfoLoader.removeUrl(item.id, function () {
        list.removeChild(item);
    }, this._onError);
};

UrlList.prototype.changeItem = function (item, data) {
    var urlList = this;

    if (!urlList._equalUrlData(data, urlList._urlOldState)) {
        urlList._urlInfoLoader.changeUrl(data, function (savedData) {
            urlList._bindUrlItem(item, savedData[0]);
            urlList._urlOldState = null;
        }, function () {
            urlList._abortLastChanges(item);
            urlList._onError.apply(urlList, arguments);
        });
    }
};

UrlList.prototype.changeItemStatus = function (item, enable) {
    this.changeItem(item, {
        _id:    item.id,
        active: enable
    });
};

UrlList.prototype.addUrls = function (urls) {
    var urlList = this;

    urlList._urlInfoLoader.addUrls(urls, function (dataArr) {
        urlList._renderList(dataArr);
    }, urlList._onError);
};

UrlList.prototype.changeStatusAllItems = function (enable) {
    var urlList = this;

    urlList._urlInfoLoader.changeUrl({ active: enable }, function (dataArr) {
        urlList._clearList();
        urlList._renderList(dataArr);
    }, urlList._onError);
};

UrlList.prototype.removeAll = function () {
    var urlList = this;

    urlList._urlInfoLoader.removeAllUrls(function () {
        urlList._clearList();
    }, urlList._onError);
};


UrlList.prototype._lockUrlList = function () {
    this._isLock = true;
    this._listElem.classList.add(URL_LIST_LOCK_CLASS_NAME);
};

UrlList.prototype._unlockUrlList = function () {
    this._isLock = false;
    this._listElem.classList.remove(URL_LIST_LOCK_CLASS_NAME);
};

UrlList.prototype._equalUrlData = function (data1, data2) {
    return data1 && data2 && data1.url === data2.url && data1._id === data2._id &&
           data1.active === data2.active && data1.info === data2.info;
};

UrlList.prototype._renderList = function (dataArr) {
    for (var i = 0; i < dataArr.length; i++) {
        var item = document.getElementById(dataArr[i]._id);

        if (item)
            this._bindUrlItem(item, dataArr[i]);
        else
            this._listElem.appendChild(this._bindUrlItem(item, dataArr[i]));
    }

    return this._listElem;
};

UrlList.prototype._clearList = function () {
    while (this._listElem.firstChild)
        this._listElem.removeChild(this._listElem.firstChild);
};

UrlList.prototype._bindUrlItem = function (el, urlInfo) {
    var item           = el || this._renderUrlItem(),
        itemText       = item.querySelector('.' + URL_TEXT_CLASS_NAME),
        statusCheckBox = item.querySelector('.' + URL_STATUS_CLASS_NAME + ' input'),
        information    = item.querySelector('.' + URL_INFORMATION_CLASS_NAME);

    item.id                = urlInfo._id;
    item.classList[(!urlInfo.active ? 'add' : 'remove')](URL_STATUS_DISABLE_CLASS_NAME);
    statusCheckBox.checked = urlInfo.active;
    itemText.innerHTML     = urlInfo.url;
    information.innerHTML  = urlInfo.info || '';

    return item;
};

UrlList.prototype._renderUrlItem = function () {
    var item = this._urlItemTemplate.cloneNode(true).children[0];

    item.addEventListener('click', this._onClickUrlItem, false);

    return item;
};

UrlList.prototype._createTemplate = function (text) {
    var div      = document.createElement('div'),
        template = document.createDocumentFragment();

    div.innerHTML = text;

    while (div.firstChild)
        template.appendChild(div.removeChild(div.firstChild));

    return template;
};

UrlList.prototype._onError = function (e) {
    window.console.error(e);
    window.alert(e.toString());
};

UrlList.prototype._onClickUrlItem = function (e) {
    if (!this._isLock) {
        var item   = e.currentTarget,
            target = e.target;

        if (!this._isEditable) {
            if (target.classList.contains(URL_INFO_BUTTON_CLASS_NAME))
                this.toggleItemInfo(item);
            else if (target.classList.contains(URL_REMOVE_BUTTON_CLASS_NAME))
                this.removeItem(this._listElem, item);
            else if (target.parentNode.classList.contains(URL_STATUS_CLASS_NAME))
                this.changeItemStatus(item, target.checked);
            else if (target.classList.contains(URL_EDIT_BUTTON_CLASS_NAME))
                this._makeItemEditable(item);
        }
        else if (target.classList.contains(URL_SAVE_BUTTON_CLASS_NAME))
            this._saveEdit(item);
        else if (target.classList.contains(URL_CANCEL_BUTTON_CLASS_NAME))
            this._cancelEdit(item);
    }
};

UrlList.prototype._saveEdit = function (item) {
    this._makeItemNotEditable(item);
    this.changeItem(item, this._prepareItemData(this._getItemData(item)));
};

UrlList.prototype._cancelEdit = function (item) {
    this._makeItemNotEditable(item);
    this._abortLastChanges(item);
};

UrlList.prototype._makeItemEditable = function (item) {
    var textEl = this._getTextEl(item),
        infoEl = this._getInfoEl(item);

    item.classList.add(URL_EDITABLE_CLASS_NAME);
    item.classList.add(URL_INFORMATION_SHOWN_CLASS_NAME);
    item.classList.remove(URL_STATUS_DISABLE_CLASS_NAME);
    infoEl.setAttribute('contenteditable', true);
    textEl.setAttribute('contenteditable', true);
    textEl.focus();

    this._isEditable = true;
    this._saveItemState(item);
};

UrlList.prototype._makeItemNotEditable = function (item) {
    var textEl = this._getTextEl(item),
        infoEl = this._getInfoEl(item);

    item.classList.remove(URL_EDITABLE_CLASS_NAME);
    item.classList.remove(URL_INFORMATION_SHOWN_CLASS_NAME);
    infoEl.setAttribute('contenteditable', false);
    textEl.setAttribute('contenteditable', false);

    this._isEditable = false;
};

UrlList.prototype._getItemData = function (item) {
    var textEl = this._getTextEl(item),
        infoEl = this._getInfoEl(item);

    return {
        _id:    item.id,
        url:    textEl.innerText || textEl.textContent,
        active: this._getStatusEl(item).checked,
        info:   infoEl.innerText || infoEl.textContent
    };
};

UrlList.prototype._prepareItemData = function (data) {
    data.url  = data.url && data.url.trim();
    data.info = data.info && data.info.trim();

    return data;
};

UrlList.prototype._saveItemState = function (item) {
    this._urlOldState = this._getItemData(item);
};

UrlList.prototype._abortLastChanges = function (item) {
    if (this._urlOldState) {
        this._bindUrlItem(item, this._urlOldState);
        this._urlOldState = null;
    }
};

UrlList.prototype._getByClass = function (item, className) {
    return item.querySelector('.' + className);
};

UrlList.prototype._getTextEl = function (item) {
    return this._getByClass(item, URL_TEXT_CLASS_NAME);
};

UrlList.prototype._getStatusEl = function (item) {
    return this._getByClass(item, URL_STATUS_CLASS_NAME).firstElementChild;
};

UrlList.prototype._getInfoEl = function (item) {
    return this._getByClass(item, URL_INFORMATION_CLASS_NAME);
};
