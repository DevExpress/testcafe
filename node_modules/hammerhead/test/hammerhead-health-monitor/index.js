var express = require('express');
var http    = require('http');
var url     = require('url');
var path    = require('path');

var healthMonitor = require('./health-monitor');

var CONTROL_PANEL_PORT = 1350;
var HAMMERHEAD_PORT1   = 1351;
var HAMMERHEAD_PORT2   = 1352;

var credentials = {
    userName: 'monitor',
    pass:     'dx_pass0354'
};

var runOnceHealthMonitorLocal  = process.argv.indexOf('--run_test') !== -1;
var runCycleHealthMonitorLocal = process.argv.indexOf('--run_test_by_cycle') !== -1;
var runLocalDB                 = runOnceHealthMonitorLocal || runCycleHealthMonitorLocal || process.argv.indexOf('--run_control_panel') !== -1;
var runCycleDelay              = runCycleHealthMonitorLocal ? +process.argv[process.argv.indexOf('--run_test_by_cycle') + 1] || 0 : 0;

var monitorConfig = {
    port1:        HAMMERHEAD_PORT1,
    port2:        HAMMERHEAD_PORT2,
    startUrl:     'http://localhost:' + CONTROL_PANEL_PORT,
    runInspector: runOnceHealthMonitorLocal || runCycleHealthMonitorLocal,
    buildInfo:    '',
    runMongoLocal: runLocalDB
};

var app       = express();
var appServer = http.createServer(app);

app
    .use(express.bodyParser())
    .use(express.basicAuth(credentials.userName, credentials.pass))
    .use('/control-panel', express.static(__dirname + '/control-panel'))
    .set('view engine', 'ejs')
    .set('view options', { layout: false })
    .set('views', path.join(__dirname, './control-panel'));

app.get('/', function (req, res) {
    healthMonitor.db.getStatistics(0, function (data) {
        res.render('index', {
            path: '/',
            data: data
        });
    });
});

app.get('/history', function (req, res) {
    var parsedUrl        = url.parse(req.url, true);
    var timestamp        = +parsedUrl.query.timestamp;
    var findDataFunction = timestamp ? 'findDataByTimestamp' : 'findLastData';
    var args             = [];

    if (timestamp)
        args.push(timestamp);

    args.push(function (doc) {
        healthMonitor.db.getRunList(null, function (list) {
            res.render('index', {
                result:           doc,
                runList:          list,
                currentSiteIndex: +parsedUrl.query.result ||
                                  searchSiteIndexByUrl(doc && doc.data, parsedUrl.query.url),
                path:             '/history'
            });
        });
    });

    healthMonitor.db[findDataFunction].apply(healthMonitor.db, args);
});

app.all('/url-list', function (req, res) {
    res.render('index', {
        path: '/url-list'
    });
});

app.all('/xhr/get_urls', function (req, res) {
    healthMonitor.db.getUrlList(function (urlList) {
        res.end(JSON.stringify(urlList));
    });
});

app.all('/xhr/add_urls', function (req, res) {
    waitReqData(req, function (data) {
        healthMonitor.db.insertUrls(JSON.parse(data), function (docs) {
            res.end(JSON.stringify(docs));
        });
    });
});

app.all('/xhr/change_url', function (req, res) {
    waitReqData(req, function (data) {
        healthMonitor.db.changeUrl(JSON.parse(data), function (url) {
            res.end(JSON.stringify(url));
        });
    });
});

app.all('/xhr/remove_url', function (req, res) {
    waitReqData(req, function (data) {
        healthMonitor.db.removeUrl(JSON.parse(data), function () {
            res.end(JSON.stringify({}));
        });
    });
});

app.all('/xhr/clear_data', function (req, res) {
    healthMonitor.db.clearStatisticsAndHistory(function () {
        res.end(JSON.stringify({}));
    });
});

healthMonitor.init(monitorConfig, function () {
    appServer.listen(CONTROL_PANEL_PORT);

    if (runOnceHealthMonitorLocal)
        healthMonitor.runOnce(function () {});
    else if (runCycleHealthMonitorLocal)
        healthMonitor.runCycle(runCycleDelay);
});

function waitReqData (req, callback) {
    var chunks = [];

    req.on('data', function (chunk) {
        chunks.push(chunk);
    });

    req.on('end', function () {
        callback(chunks.join(''));
    });
}

function searchSiteIndexByUrl (data, url) {
    var index = 0;

    if (data && url) {
        for (var i = 0; i < data.length; i++) {
            if (data[i].url === url)
                return i;
        }
    }

    return index;
}
