'use strict';

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _Object$keys = require('babel-runtime/core-js/object/keys').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

//NOTE: Max cache size is 50 MBytes
var MAX_SIZE = 50 * 1024 * 1024;
//NOTE: clean up cache to the half of the max size
var CLEAN_UP_DEST_SIZE = Math.round(MAX_SIZE / 2);

var ProcessedJSCache = (function () {
    //TODO use LRU cache instead

    function ProcessedJSCache() {
        _classCallCheck(this, ProcessedJSCache);

        this.items = {};
        this.size = 0;
    }

    ProcessedJSCache.prototype._cleanUp = function _cleanUp() {
        var cache = this;

        var lruOrdered = _Object$keys(this.items)
        //NOTE: map cache data to {digest, lastUse} pair
        .map(function (digest) {
            return {
                digest: digest,
                lastUse: cache.items[digest].lastUse
            };
        })
        //NOTE: sort it by lastUse
        .sort(function (a, b) {
            return a.lastUse > b.lastUse ? 1 : -1;
        });

        for (var i = 0; i < lruOrdered.length; i++) {
            var digest = lruOrdered[i].digest;

            cache.size -= cache.items[digest].size;
            delete cache.items[digest];

            if (cache.size <= CLEAN_UP_DEST_SIZE) break;
        }
    };

    ProcessedJSCache.prototype.add = function add(js, processedJs) {
        var cache = this;
        var lastUse = new Date().getTime();

        setTimeout(function () {
            var hash = _crypto2.default.createHash('md5');

            hash.update(js);

            var digest = hash.digest('hex');
            var size = processedJs.length;

            cache.size += size;

            cache.items[digest] = {
                data: processedJs,
                size: size,
                lastUse: lastUse
            };

            if (cache.size > MAX_SIZE) cache._cleanUp();
        });
    };

    ProcessedJSCache.prototype.pick = function pick(js) {
        var hash = _crypto2.default.createHash('md5');

        hash.update(js);

        var digest = hash.digest('hex');
        var cacheItem = this.items[digest];

        if (cacheItem) {
            cacheItem.lastUse = new Date().getTime();

            return cacheItem.data;
        }

        return null;
    };

    return ProcessedJSCache;
})();

exports.default = ProcessedJSCache;
module.exports = exports.default;
//# sourceMappingURL=../resource-processing/processed-js-cache.js.map