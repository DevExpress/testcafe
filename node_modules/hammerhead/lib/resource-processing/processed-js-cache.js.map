{"version":3,"sources":["resource-processing/processed-js-cache.js"],"names":[],"mappings":";;;;;;;;;;sBAAmB,QAAQ;;;;;AAG3B,IAAM,QAAQ,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC;;AAElC,IAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;;IAE/B,gBAAgB;;;AAGrB,aAHK,gBAAgB,GAGlB;8BAHE,gBAAgB;;AAI7B,YAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAChB,YAAI,CAAC,IAAI,GAAI,CAAC,CAAC;KAClB;;AANgB,oBAAgB,WAQjC,QAAQ,GAAC,oBAAG;AACR,YAAI,KAAK,GAAG,IAAI,CAAC;;AAEjB,YAAI,UAAU,GAAG,aAAY,IAAI,CAAC,KAAK,CAAC;;SAEnC,GAAG,CAAC,UAAC,MAAM;mBAAM;AACd,sBAAM,EAAG,MAAM;AACf,uBAAO,EAAE,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO;aACvC;SAAC,CAAC;;SAEF,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;mBAAK,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;SAAA,CAAC,CAAC;;AAEpD,aAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxC,gBAAI,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;;AAElC,iBAAK,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;AACvC,mBAAO,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;AAE3B,gBAAI,KAAK,CAAC,IAAI,IAAI,kBAAkB,EAChC,MAAM;SACb;KACJ;;AA7BgB,oBAAgB,WA+BjC,GAAG,GAAC,aAAC,EAAE,EAAE,WAAW,EAAE;AAClB,YAAI,KAAK,GAAK,IAAI,CAAC;AACnB,YAAI,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;;AAEnC,kBAAU,CAAC,YAAY;AACnB,gBAAI,IAAI,GAAG,iBAAO,UAAU,CAAC,KAAK,CAAC,CAAC;;AAEpC,gBAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;AAEhB,gBAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAChC,gBAAI,IAAI,GAAK,WAAW,CAAC,MAAM,CAAC;;AAEhC,iBAAK,CAAC,IAAI,IAAI,IAAI,CAAC;;AAEnB,iBAAK,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG;AAClB,oBAAI,EAAK,WAAW;AACpB,oBAAI,EAAK,IAAI;AACb,uBAAO,EAAE,OAAO;aACnB,CAAC;;AAEF,gBAAI,KAAK,CAAC,IAAI,GAAG,QAAQ,EACrB,KAAK,CAAC,QAAQ,EAAE,CAAC;SACxB,CAAC,CAAC;KACN;;AAtDgB,oBAAgB,WAwDjC,IAAI,GAAC,cAAC,EAAE,EAAE;AACN,YAAI,IAAI,GAAG,iBAAO,UAAU,CAAC,KAAK,CAAC,CAAC;;AAEpC,YAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;AAEhB,YAAI,MAAM,GAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACnC,YAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;AAEnC,YAAI,SAAS,EAAE;AACX,qBAAS,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;;AAEzC,mBAAO,SAAS,CAAC,IAAI,CAAC;SACzB;;AAED,eAAO,IAAI,CAAC;KACf;;WAvEgB,gBAAgB;;;kBAAhB,gBAAgB","file":"resource-processing/processed-js-cache.js","sourcesContent":["import Crypto from 'crypto';\r\n\r\n//NOTE: Max cache size is 50 MBytes\r\nconst MAX_SIZE = 50 * 1024 * 1024;\r\n//NOTE: clean up cache to the half of the max size\r\nconst CLEAN_UP_DEST_SIZE = Math.round(MAX_SIZE / 2);\r\n\r\nexport default class ProcessedJSCache {\r\n    //TODO use LRU cache instead\r\n\r\n    constructor () {\r\n        this.items = {};\r\n        this.size  = 0;\r\n    }\r\n\r\n    _cleanUp () {\r\n        var cache = this;\r\n\r\n        var lruOrdered = Object.keys(this.items)\r\n            //NOTE: map cache data to {digest, lastUse} pair\r\n            .map((digest) => ({\r\n                digest:  digest,\r\n                lastUse: cache.items[digest].lastUse\r\n            }))\r\n            //NOTE: sort it by lastUse\r\n            .sort((a, b) => a.lastUse > b.lastUse ? 1 : -1);\r\n\r\n        for (var i = 0; i < lruOrdered.length; i++) {\r\n            var digest = lruOrdered[i].digest;\r\n\r\n            cache.size -= cache.items[digest].size;\r\n            delete cache.items[digest];\r\n\r\n            if (cache.size <= CLEAN_UP_DEST_SIZE)\r\n                break;\r\n        }\r\n    }\r\n\r\n    add (js, processedJs) {\r\n        var cache   = this;\r\n        var lastUse = new Date().getTime();\r\n\r\n        setTimeout(function () {\r\n            var hash = Crypto.createHash('md5');\r\n\r\n            hash.update(js);\r\n\r\n            var digest = hash.digest('hex');\r\n            var size   = processedJs.length;\r\n\r\n            cache.size += size;\r\n\r\n            cache.items[digest] = {\r\n                data:    processedJs,\r\n                size:    size,\r\n                lastUse: lastUse\r\n            };\r\n\r\n            if (cache.size > MAX_SIZE)\r\n                cache._cleanUp();\r\n        });\r\n    }\r\n\r\n    pick (js) {\r\n        var hash = Crypto.createHash('md5');\r\n\r\n        hash.update(js);\r\n\r\n        var digest    = hash.digest('hex');\r\n        var cacheItem = this.items[digest];\r\n\r\n        if (cacheItem) {\r\n            cacheItem.lastUse = new Date().getTime();\r\n\r\n            return cacheItem.data;\r\n        }\r\n\r\n        return null;\r\n    }\r\n}"],"sourceRoot":"../src"}