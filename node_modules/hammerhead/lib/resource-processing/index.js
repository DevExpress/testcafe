'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard').default;

exports.__esModule = true;
exports.process = process;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _sharedUrl_util = require('../../shared/url_util');

var _sharedUrl_util2 = _interopRequireDefault(_sharedUrl_util);

var _whacko = require('whacko');

var _whacko2 = _interopRequireDefault(_whacko);

var _errs = require('../errs');

var ERR = _interopRequireWildcard(_errs);

var _processedJsCache = require('./processed-js-cache');

var _processedJsCache2 = _interopRequireDefault(_processedJsCache);

var _sharedConst = require('../../shared/const');

var sharedConst = _interopRequireWildcard(_sharedConst);

var _sharedPage_processor = require('../../shared/page_processor');

var _sharedPage_processor2 = _interopRequireDefault(_sharedPage_processor);

var _utilsContent = require('../utils/content');

var contentUtils = _interopRequireWildcard(_utilsContent);

var BODY_CREATED_EVENT_SCRIPT = ['<script type="text/javascript" class="' + sharedConst.TEST_CAFE_SCRIPT_CLASSNAME + '">\n        if (window.Hammerhead)\n           window.Hammerhead._raiseBodyCreatedEvent();\n        var script = document.currentScript || document.scripts[document.scripts.length - 1];\n        script.parentNode.removeChild(script);\n    </script>'].join('\n');

var jsCache = new _processedJsCache2.default();

var processors = {
    page: function (html, ctx, actualCharset, processingOpts) {
        processingOpts = processingOpts || getPageProcessingOptions(ctx);

        var deafultCharset = ctx.contentInfo.charset;

        var bom = _sharedPage_processor2.default.getBOM(html);

        html = bom ? html.replace(bom, '') : html;

        prepareHtml(html, processingOpts);

        var $ = _whacko2.default.load(html);

        actualCharset = actualCharset || defaultCharset;

        var rightCharset = getRightCharset($, deafultCharset, actualCharset);

        // Restart processing with page charset
        if (rightCharset) process(ctx, rightCharset);else {
            var iframeHtmlProcessor = function (html, callback) {
                var storedIsIframe = processingOpts.isIFrame;

                processingOpts.isIFrame = true;

                var result = processors.page(html, ctx, actualCharset, processingOpts);

                processingOpts.isIFrame = storedIsIframe;

                callback(result);
            };

            _sharedPage_processor2.default.on(_sharedPage_processor2.default.HTML_PROCESSING_REQUIRED, iframeHtmlProcessor);
            _sharedPage_processor2.default.processPage($, processingOpts.urlReplacer, processingOpts.crossDomainProxyPort, processingOpts.isIFrame);
            _sharedPage_processor2.default.off(_sharedPage_processor2.default.HTML_PROCESSING_REQUIRED, iframeHtmlProcessor);

            addPageResources($, processingOpts);
            addBodyCreatedEventScript($);
            changeMetas($);

            return (bom || '') + $.html();
        }
    },
    script: function (script) {
        var processedJs = jsCache.pick(script);

        if (!processedJs) {
            processedJs = _sharedPage_processor2.default.processScript(script);
            jsCache.add(script, processedJs);
        }

        return processedJs;
    },
    stylesheet: function (style, ctx) {
        var urlReplacer = getResourceUrlReplacer(ctx);
        return _sharedPage_processor2.default.processStylesheet(style, urlReplacer);
    },
    manifest: function (manifest, ctx) {
        var urlReplacer = getResourceUrlReplacer(ctx);
        return _sharedPage_processor2.default.processManifest(manifest, urlReplacer);
    },
    json: function (json) {
        return _sharedPage_processor2.default.processScript(json, true);
    }
};

function getProcessor(ctx) {
    var contentInfo = ctx.contentInfo;

    if (ctx.isPage || ctx.contentInfo.isIFrameWithImageSrc) return processors.page;else if (contentInfo.isCSS) return processors.stylesheet;else if (contentInfo.isScript && !ctx.isXhr) return processors.script;else if (contentInfo.isManifest) return processors.manifest;else if (contentInfo.isJSON) return processors.json;else return null;
}

function decode(content, encoding, charset) {
    var decoded;
    return _regeneratorRuntime.async(function decode$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.prev = 0;
                context$1$0.next = 3;
                return contentUtils.decodeContent(content, encoding, charset);

            case 3:
                decoded = context$1$0.sent;
                return context$1$0.abrupt('return', decoded);

            case 7:
                context$1$0.prev = 7;
                context$1$0.t0 = context$1$0['catch'](0);
                throw { code: ERR.INJECTOR_RESOURCE_DECODING_FAILED, encoding: encoding };

            case 10:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this, [[0, 7]]);
}

function encode(content, encoding, charset) {
    var encoded;
    return _regeneratorRuntime.async(function encode$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.prev = 0;
                context$1$0.next = 3;
                return contentUtils.encodeContent(content, encoding, charset);

            case 3:
                encoded = context$1$0.sent;
                return context$1$0.abrupt('return', encoded);

            case 7:
                context$1$0.prev = 7;
                context$1$0.t0 = context$1$0['catch'](0);
                throw { code: ERR.INJECTOR_RESOURCE_ENCODING_FAILED, encoding: encoding };

            case 10:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this, [[0, 7]]);
}

function getResourceUrlReplacer(ctx) {
    return function (resourceUrl, resourceType, baseUrl) {
        // NOTE: resolve base url without a protocol ('//google.com/path' for example)
        baseUrl = baseUrl ? _url2.default.resolve(ctx.dest.url, baseUrl) : '';
        resourceUrl = _sharedUrl_util2.default.prepareUrl(resourceUrl);

        var resolvedUrl = _url2.default.resolve(baseUrl || ctx.dest.url, resourceUrl);

        try {
            return ctx.toProxyUrl(resolvedUrl, false, resourceType);
        } catch (err) {
            return resourceUrl;
        }
    };
}

// Page processor
function getPageProcessingOptions(ctx) {
    return {
        crossDomainProxyPort: ctx.serverInfo.crossDomainPort,
        isIFrame: ctx.isIFrame,
        styleUrl: ctx.getInjectableStyles()[0],
        scripts: ctx.getInjectableScripts(),
        urlReplacer: getResourceUrlReplacer(ctx),
        isIframeWithImageSrc: ctx.contentInfo && ctx.contentInfo.isIFrameWithImageSrc
    };
}

function getPageCharset($) {
    var metas = [];

    $('meta').each(function (meta) {
        var $meta = $(meta);

        metas.push({
            httpEquiv: $meta.attr('http-equiv'),
            content: $meta.attr('content'),
            charset: $meta.attr('charset')
        });
    });

    return contentUtils.parseCharsetFromMeta(metas);
}

function addPageResources($, processingOptions) {
    var resources = [];

    if (processingOptions.styleUrl) {
        resources.push('<link rel="stylesheet" type="text/css" class="');
        resources.push(sharedConst.TEST_CAFE_UI_STYLESHEET_FULL_CLASSNAME);
        resources.push('"href = "');
        resources.push(processingOptions.styleUrl);
        resources.push('">');
    }

    if (processingOptions.scripts) {
        processingOptions.scripts.forEach(function (scriptUrl) {
            resources.push('<script type="text/javascript" class="');
            resources.push(sharedConst.TEST_CAFE_SCRIPT_CLASSNAME);
            resources.push('" charset="UTF-8" src="');
            resources.push(scriptUrl);
            resources.push('">');
            resources.push('</script>');
        });
    }

    if (resources.length) $('head').prepend(resources.join(''));
}

function getRightCharset($, defaultCharset, actualCharset) {
    if (!defaultCharset) {
        // NOTE: if the charset doesn't set in server's header and if the charset sets in page's meta tag
        // and isn't equal to the default charset, we restart processing with the new charset.
        // We returns null if need to restart procession.
        var pageCharset = getPageCharset($);

        if (pageCharset && pageCharset !== actualCharset) return pageCharset;
    }

    return '';
}

function changeMetas($) {
    // TODO: figure out how to emulate the behavior of the tag
    $('meta[name="referrer"][content="origin"]').remove();
    // NOTE: Remove existing compatible meta tag and add a new at the beginning of the head
    $('meta[http-equiv="X-UA-Compatible"]').remove();
    $('head').prepend('<meta http-equiv="X-UA-Compatible" content="IE=edge" />');
}

function prepareHtml(html, processingOpts) {
    if (processingOpts && processingOpts.iframeImageSrc) return '<html><body><img src="' + processingOpts.iframeImageSrc + '" /></body></html>';

    return html;
}

function addBodyCreatedEventScript($) {
    $('body').prepend(BODY_CREATED_EVENT_SCRIPT);
}

// API

function process(ctx, customCharset) {
    var body, contentInfo, encoding, charset, decoded, processor, processed;
    return _regeneratorRuntime.async(function process$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                body = ctx.destResBody;
                contentInfo = ctx.contentInfo;
                encoding = contentInfo.encoding;
                charset = customCharset || contentInfo.charset;
                context$1$0.next = 6;
                return decode(body, encoding, charset);

            case 6:
                decoded = context$1$0.sent;
                processor = getProcessor(ctx);

                if (processor) {
                    context$1$0.next = 10;
                    break;
                }

                return context$1$0.abrupt('return', body);

            case 10:
                processed = processor(decoded, ctx, charset);

                if (!(processed === null)) {
                    context$1$0.next = 13;
                    break;
                }

                return context$1$0.abrupt('return');

            case 13:
                context$1$0.next = 15;
                return encode(processed, encoding, charset);

            case 15:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 16:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}
//# sourceMappingURL=../resource-processing/index.js.map