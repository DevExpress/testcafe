{"version":3,"sources":["utils/buffer.js"],"names":[],"mappings":";;;;;;;;QASgB,kBAAkB,GAAlB,kBAAkB;QAmBlB,UAAU,GAAV,UAAU;QAOV,MAAM,GAAN,MAAM;AAlCtB,IAAM,EAAE,GAAY,EAAI,CAAC;AACzB,IAAM,EAAE,GAAY,EAAI,CAAC;AACzB,IAAM,WAAW,GAAG,CAAC,CAAC;;AAEf,IAAM,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;;QAA5B,IAAI,GAAJ,IAAI;;;AAIV,SAAS,kBAAkB,CAAE,MAAM,EAAE;;;AACxC,yEACuB;YACX,OAAO,EACP,KAAK,EAEA,CAAC;;;;AAHN,2BAAO,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC;AAC3B,yBAAK,GAAK,CAAC;AAEN,qBAAC,GAAG,CAAC;;;0BAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAA;;;;;0BACzB,CAAC,KAAK,OAAO,CAAA;;;;;;2BACP,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;;;;;;;0BAEpB,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAA;;;;;;2BACvC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;;;AAC5B,yBAAK,GAAG,CAAC,GAAG,WAAW,CAAC;;;AANG,qBAAC,EAAE;;;;;;;;;KASzC,SACJ;CACJ;;AAEM,SAAS,UAAU,CAAE,KAAK,EAAE,IAAI,EAAE;AACrC,QAAI,KAAK,CAAC,MAAM,EACZ,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAErB,SAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CACpB;;AAEM,SAAS,MAAM,CAAE,OAAO,EAAE,OAAO,EAAE;AACtC,QAAI,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,MAAM,EACjC,OAAO,KAAK,CAAC;;AAEjB,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,YAAI,OAAO,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EACzB,OAAO,KAAK,CAAC;KACpB;;AAED,WAAO,IAAI,CAAC;CACf","file":"utils/buffer.js","sourcesContent":["// Const\r\nconst LF          = 0x0A;\r\nconst CR          = 0x0D;\r\nconst CRLF_LENGTH = 2;\r\n\r\nexport const CRLF = new Buffer([CR, LF]);\r\n\r\n\r\n// API\r\nexport function createLineIterator (buffer) {\r\n    return {\r\n        [Symbol.iterator]: function*() {\r\n            var lastIdx = buffer.length - 1;\r\n            var start   = 0;\r\n\r\n            for (var i = 0; i < buffer.length; i++) {\r\n                if (i === lastIdx)\r\n                    yield buffer.slice(start);\r\n\r\n                else if (buffer[i] === CR && buffer[i + 1] === LF) {\r\n                    yield buffer.slice(start, i);\r\n                    start = i + CRLF_LENGTH;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function appendLine (lines, line) {\r\n    if (lines.length)\r\n        lines.push(CRLF);\r\n\r\n    lines.push(line);\r\n}\r\n\r\nexport function equals (buffer1, buffer2) {\r\n    if (buffer1.length !== buffer2.length)\r\n        return false;\r\n\r\n    for (var i = 0; i < buffer1.length; i++) {\r\n        if (buffer1[i] !== buffer2[i])\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}"],"sourceRoot":"../src"}