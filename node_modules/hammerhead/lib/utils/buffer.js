// Const
"use strict";

var _Symbol$iterator = require("babel-runtime/core-js/symbol/iterator").default;

var _regeneratorRuntime = require("babel-runtime/regenerator").default;

exports.__esModule = true;
exports.createLineIterator = createLineIterator;
exports.appendLine = appendLine;
exports.equals = equals;
var LF = 10;
var CR = 13;
var CRLF_LENGTH = 2;

var CRLF = new Buffer([CR, LF]);

exports.CRLF = CRLF;
// API

function createLineIterator(buffer) {
    var _ref;

    return (_ref = {}, _ref[_Symbol$iterator] = _regeneratorRuntime.mark(function callee$1$0() {
        var lastIdx, start, i;
        return _regeneratorRuntime.wrap(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    lastIdx = buffer.length - 1;
                    start = 0;
                    i = 0;

                case 3:
                    if (!(i < buffer.length)) {
                        context$2$0.next = 16;
                        break;
                    }

                    if (!(i === lastIdx)) {
                        context$2$0.next = 9;
                        break;
                    }

                    context$2$0.next = 7;
                    return buffer.slice(start);

                case 7:
                    context$2$0.next = 13;
                    break;

                case 9:
                    if (!(buffer[i] === CR && buffer[i + 1] === LF)) {
                        context$2$0.next = 13;
                        break;
                    }

                    context$2$0.next = 12;
                    return buffer.slice(start, i);

                case 12:
                    start = i + CRLF_LENGTH;

                case 13:
                    i++;
                    context$2$0.next = 3;
                    break;

                case 16:
                case "end":
                    return context$2$0.stop();
            }
        }, callee$1$0, this);
    }), _ref);
}

function appendLine(lines, line) {
    if (lines.length) lines.push(CRLF);

    lines.push(line);
}

function equals(buffer1, buffer2) {
    if (buffer1.length !== buffer2.length) return false;

    for (var i = 0; i < buffer1.length; i++) {
        if (buffer1[i] !== buffer2[i]) return false;
    }

    return true;
}
//# sourceMappingURL=../utils/buffer.js.map