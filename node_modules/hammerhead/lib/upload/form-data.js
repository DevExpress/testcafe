'use strict';

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _getIterator = require('babel-runtime/core-js/get-iterator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard').default;

exports.__esModule = true;

var _formDataEntry = require('./form-data-entry');

var _formDataEntry2 = _interopRequireDefault(_formDataEntry);

var _utilsBuffer = require('../utils/buffer');

var bufferUtils = _interopRequireWildcard(_utilsBuffer);

var _sharedConst = require('../../shared/const');

var _sharedConst2 = _interopRequireDefault(_sharedConst);

// Const
var BOUNDARY_RE = /;\s*boundary=([^;]*)/i;

var PARSER_STATE = {
    IN_PREAMBLE: 'IN_PREAMBLE',
    IN_HEADERS: 'IN_HEADERS',
    IN_BODY: 'IN_BODY',
    IN_EPILOGUE: 'IN_EPILOGUE'
};

// Form data

var FormData = (function () {
    function FormData() {
        _classCallCheck(this, FormData);

        this.boundary = null;
        this.boundaryEnd = null;
        this.epilogue = [];
        this.entries = [];
        this.preamble = [];
    }

    FormData.prototype._removeEntry = function _removeEntry(name) {
        this.entries = this.entries.filter(function (entry) {
            return entry.name !== name;
        });
    };

    FormData.prototype._injectFileInfo = function _injectFileInfo(fileInfo) {
        var entries = this.getEntriesByName(fileInfo.name);

        while (entries.length < fileInfo.files.length) {
            var entry = new _formDataEntry2.default();

            this.entries.push(entry);
            entries.push(entry);
        }

        entries.forEach(function (entry, idx) {
            return entry.addFileInfo(fileInfo, idx);
        });
    };

    FormData.prototype._isBoundary = function _isBoundary(line) {
        return bufferUtils.equals(this.boundary, line);
    };

    FormData.prototype._isBoundaryEnd = function _isBoundaryEnd(line) {
        return bufferUtils.equals(this.boundaryEnd, line);
    };

    FormData.prototype.getEntriesByName = function getEntriesByName(name) {
        return this.entries.reduce(function (found, entry) {
            if (entry.name === name) found.push(entry);

            return found;
        }, []);
    };

    FormData.prototype.expandUploads = function expandUploads() {
        var _this = this;

        var uploadsEntry = this.getEntriesByName(_sharedConst2.default.UPLOAD_SANDBOX_HIDDEN_INPUT_NAME)[0];

        if (uploadsEntry) {
            var body = Buffer.concat(uploadsEntry.body).toString();
            var files = JSON.parse(body);

            this._removeEntry(_sharedConst2.default.UPLOAD_SANDBOX_HIDDEN_INPUT_NAME);
            files.forEach(function (fileInfo) {
                return _this._injectFileInfo(fileInfo);
            });
        }
    };

    FormData.prototype.parseContentTypeHeader = function parseContentTypeHeader(header) {
        header = String(header);

        if (header.indexOf('multipart/form-data') > -1) {
            var boundaryMatch = header.match(BOUNDARY_RE);
            var token = boundaryMatch && boundaryMatch[1];

            if (token) {
                this.boundary = new Buffer('--' + token);
                this.boundaryEnd = new Buffer('--' + token + '--');
            }
        }
    };

    FormData.prototype.parseBody = function parseBody(body) {
        var state = PARSER_STATE.IN_PREAMBLE;
        var lines = bufferUtils.createLineIterator(body);
        var currentEntry = null;

        for (var _iterator = lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var line = _ref;

            if (this._isBoundary(line)) {
                if (currentEntry) this.entries.push(currentEntry);

                state = PARSER_STATE.IN_HEADERS;
                currentEntry = new _formDataEntry2.default();
            } else if (this._isBoundaryEnd(line)) {
                if (currentEntry) this.entries.push(currentEntry);

                state = PARSER_STATE.IN_EPILOGUE;
            } else if (state === PARSER_STATE.IN_PREAMBLE) bufferUtils.appendLine(this.preamble, line);else if (state === PARSER_STATE.IN_HEADERS) {
                if (line.length) currentEntry.setHeader(line.toString());else state = PARSER_STATE.IN_BODY;
            } else if (state === PARSER_STATE.IN_EPILOGUE) bufferUtils.appendLine(this.epilogue, line);else if (state === PARSER_STATE.IN_BODY) bufferUtils.appendLine(currentEntry.body, line);
        }
    };

    FormData.prototype.toBuffer = function toBuffer() {
        var _this2 = this;

        var chunks = this.preamble;

        if (chunks.length) chunks.push(bufferUtils.CRLF);

        this.entries.forEach(function (entry) {
            chunks.push(_this2.boundary, bufferUtils.CRLF, entry.toBuffer(), bufferUtils.CRLF);
        });

        chunks.push(this.boundaryEnd, bufferUtils.CRLF);

        chunks = chunks.concat(this.epilogue);

        return Buffer.concat(chunks);
    };

    return FormData;
})();

exports.default = FormData;
module.exports = exports.default;
//# sourceMappingURL=../upload/form-data.js.map