'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;
exports.inject = inject;
exports.ie9FileReaderShim = ie9FileReaderShim;

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _formData = require('./form-data');

var _formData2 = _interopRequireDefault(_formData);

var _utilsHttp = require('../utils/http');

// Utils
function getFileInfo(contentTypeHeader, body, inputName, fileName) {
    var formData = new _formData2.default();

    formData.parseContentTypeHeader(contentTypeHeader);
    formData.parseBody(body);

    var entry = formData.getEntriesByName(inputName)[0];
    var data = Buffer.concat(entry.body);

    fileName = fileName.substr(fileName.lastIndexOf('\\') + 1);

    return {
        data: data.toString('base64'),
        info: {
            type: entry.headers['Content-Type'],
            name: fileName,
            size: data.length
        }
    };
}

// API

function inject(contentTypeHeader, body) {
    var formData = new _formData2.default();

    formData.parseContentTypeHeader(contentTypeHeader);

    if (!formData.boundary) return null;

    formData.parseBody(body);
    formData.expandUploads();

    return formData.toBuffer();
}

function ie9FileReaderShim(req, res) {
    var body, parsedUrl, contentTypeHeader, inputName, filename, info;
    return _regeneratorRuntime.async(function ie9FileReaderShim$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return (0, _utilsHttp.fetchBody)(req);

            case 2:
                body = context$1$0.sent;
                parsedUrl = _url2.default.parse(req.url, true);
                contentTypeHeader = req.headers['content-type'];
                inputName = parsedUrl.query['input-name'];
                filename = parsedUrl.query['filename'];
                info = getFileInfo(contentTypeHeader, body, inputName, filename);

                // NOTE: we should skip content type, because IE9 can't
                // handle content with content-type "application/json"
                // and trying to download it as a file
                (0, _utilsHttp.respondWithJSON)(res, info, true);

            case 9:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
}
//# sourceMappingURL=../upload/index.js.map