{"version":3,"sources":["upload/form-data.js"],"names":[],"mappings":"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","file":"upload/form-data.js","sourcesContent":["import FormDataEntry from './form-data-entry';\r\nimport * as bufferUtils from '../utils/buffer';\r\nimport SHARED_CONST from '../../shared/const';\r\n\r\n// Const\r\nconst BOUNDARY_RE = /;\\s*boundary=([^;]*)/i;\r\n\r\nconst PARSER_STATE = {\r\n    IN_PREAMBLE: 'IN_PREAMBLE',\r\n    IN_HEADERS:  'IN_HEADERS',\r\n    IN_BODY:     'IN_BODY',\r\n    IN_EPILOGUE: 'IN_EPILOGUE'\r\n};\r\n\r\n\r\n// Form data\r\nexport default class FormData {\r\n    constructor () {\r\n        this.boundary    = null;\r\n        this.boundaryEnd = null;\r\n        this.epilogue    = [];\r\n        this.entries     = [];\r\n        this.preamble    = [];\r\n    }\r\n\r\n    _removeEntry (name) {\r\n        this.entries = this.entries.filter((entry) => entry.name !== name);\r\n    }\r\n\r\n    _injectFileInfo (fileInfo) {\r\n        var entries = this.getEntriesByName(fileInfo.name);\r\n\r\n        while (entries.length < fileInfo.files.length) {\r\n            var entry = new FormDataEntry();\r\n\r\n            this.entries.push(entry);\r\n            entries.push(entry);\r\n        }\r\n\r\n        entries.forEach((entry, idx) => entry.addFileInfo(fileInfo, idx));\r\n    }\r\n\r\n    _isBoundary (line) {\r\n        return bufferUtils.equals(this.boundary, line);\r\n    }\r\n\r\n    _isBoundaryEnd (line) {\r\n        return bufferUtils.equals(this.boundaryEnd, line);\r\n    }\r\n\r\n    getEntriesByName (name) {\r\n        return this.entries.reduce((found, entry) => {\r\n            if (entry.name === name)\r\n                found.push(entry);\r\n\r\n            return found;\r\n        }, []);\r\n    }\r\n\r\n    expandUploads () {\r\n        var uploadsEntry = this.getEntriesByName(SHARED_CONST.UPLOAD_SANDBOX_HIDDEN_INPUT_NAME)[0];\r\n\r\n        if (uploadsEntry) {\r\n            var body  = Buffer.concat(uploadsEntry.body).toString();\r\n            var files = JSON.parse(body);\r\n\r\n            this._removeEntry(SHARED_CONST.UPLOAD_SANDBOX_HIDDEN_INPUT_NAME);\r\n            files.forEach((fileInfo) => this._injectFileInfo(fileInfo));\r\n        }\r\n    }\r\n\r\n    parseContentTypeHeader (header) {\r\n        header = String(header);\r\n\r\n        if (header.indexOf('multipart/form-data') > -1) {\r\n            var boundaryMatch = header.match(BOUNDARY_RE);\r\n            var token         = boundaryMatch && boundaryMatch[1];\r\n\r\n            if (token) {\r\n                this.boundary    = new Buffer('--' + token);\r\n                this.boundaryEnd = new Buffer('--' + token + '--');\r\n            }\r\n        }\r\n    }\r\n\r\n    parseBody (body) {\r\n        var state        = PARSER_STATE.IN_PREAMBLE;\r\n        var lines        = bufferUtils.createLineIterator(body);\r\n        var currentEntry = null;\r\n\r\n        for (var line of lines) {\r\n            if (this._isBoundary(line)) {\r\n                if (currentEntry)\r\n                    this.entries.push(currentEntry);\r\n\r\n                state        = PARSER_STATE.IN_HEADERS;\r\n                currentEntry = new FormDataEntry();\r\n            }\r\n\r\n            else if (this._isBoundaryEnd(line)) {\r\n                if (currentEntry)\r\n                    this.entries.push(currentEntry);\r\n\r\n                state = PARSER_STATE.IN_EPILOGUE;\r\n            }\r\n\r\n            else if (state === PARSER_STATE.IN_PREAMBLE)\r\n                bufferUtils.appendLine(this.preamble, line);\r\n\r\n            else if (state === PARSER_STATE.IN_HEADERS) {\r\n                if (line.length)\r\n                    currentEntry.setHeader(line.toString());\r\n\r\n                else\r\n                    state = PARSER_STATE.IN_BODY;\r\n            }\r\n\r\n            else if (state === PARSER_STATE.IN_EPILOGUE)\r\n                bufferUtils.appendLine(this.epilogue, line);\r\n\r\n            else if (state === PARSER_STATE.IN_BODY)\r\n                bufferUtils.appendLine(currentEntry.body, line);\r\n        }\r\n    }\r\n\r\n    toBuffer () {\r\n        var chunks = this.preamble;\r\n\r\n        if (chunks.length)\r\n            chunks.push(bufferUtils.CRLF);\r\n\r\n        this.entries.forEach((entry) => {\r\n            chunks.push(\r\n                this.boundary,\r\n                bufferUtils.CRLF,\r\n                entry.toBuffer(),\r\n                bufferUtils.CRLF\r\n            );\r\n        });\r\n\r\n        chunks.push(\r\n            this.boundaryEnd,\r\n            bufferUtils.CRLF\r\n        );\r\n\r\n        chunks = chunks.concat(this.epilogue);\r\n\r\n        return Buffer.concat(chunks);\r\n    }\r\n}"],"sourceRoot":"../src"}