'use strict';

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _Object$keys = require('babel-runtime/core-js/object/keys').default;

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard').default;

exports.__esModule = true;

var _utilsBuffer = require('../utils/buffer');

var bufferUtils = _interopRequireWildcard(_utilsBuffer);

// Const
var INPUT_NAME_RE = /;\s*name="([^"]*)"/i;
var FILE_NAME_RE = /;\s*filename="([^"]*)"/i;
var HEADER_RE = /^(.+?):\s*(.*)$/;

// FormDataEntry

var FormDataEntry = (function () {
    function FormDataEntry() {
        _classCallCheck(this, FormDataEntry);

        this.body = [];
        this.headers = {};
        this.name = null;
        this.fileName = null;
    }

    FormDataEntry.prototype._parseContentDisposition = function _parseContentDisposition(contentDisposition) {
        var inputNameMatch = contentDisposition.match(INPUT_NAME_RE);
        var fileNameMatch = contentDisposition.match(FILE_NAME_RE);

        this.name = inputNameMatch && inputNameMatch[1];
        this.fileName = fileNameMatch && fileNameMatch[1];
    };

    FormDataEntry.prototype._setContentDisposition = function _setContentDisposition(name, fileName) {
        this.name = name;
        this.fileName = fileName;

        this.headers['Content-Disposition'] = 'form-data; name="' + name + '"; filename="' + fileName + '"';
    };

    // API

    FormDataEntry.prototype.addFileInfo = function addFileInfo(fileInfo, idx) {
        var file = fileInfo.files[idx];

        this._setContentDisposition(fileInfo.name, file.name);

        this.body = [new Buffer(file.data, 'base64')];
        this.headers['Content-Type'] = file.type;
    };

    FormDataEntry.prototype.setHeader = function setHeader(header, newValue) {
        var headerMatch = header.match(HEADER_RE);
        var name = headerMatch[1];
        var value = newValue || headerMatch[2];

        this.headers[name] = value;

        if (name === 'Content-Disposition') this._parseContentDisposition(value);
    };

    FormDataEntry.prototype.toBuffer = function toBuffer() {
        var _this = this;

        var chunks = [];

        _Object$keys(this.headers).forEach(function (name) {
            var value = _this.headers[name];

            chunks.push(new Buffer('' + name + ': ' + value));
            chunks.push(bufferUtils.CRLF);
        });

        chunks.push(bufferUtils.CRLF);
        chunks = chunks.concat(this.body);

        return Buffer.concat(chunks);
    };

    return FormDataEntry;
})();

exports.default = FormDataEntry;
module.exports = exports.default;
//# sourceMappingURL=../upload/form-data-entry.js.map