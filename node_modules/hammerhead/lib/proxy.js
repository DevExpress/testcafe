'use strict';

var _inherits = require('babel-runtime/helpers/inherits').default;

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _sharedUrl_util = require('../shared/url_util');

var _sharedUrl_util2 = _interopRequireDefault(_sharedUrl_util);

var _utilsHttp = require('./utils/http');

var _upload = require('./upload');

var _pipeline = require('./pipeline');

var _utilsReadFileRelative = require('./utils/read-file-relative');

var _utilsReadFileRelative2 = _interopRequireDefault(_utilsReadFileRelative);

var _router = require('./router');

var _router2 = _interopRequireDefault(_router);

// Const
var CLIENT_SCRIPT = (0, _utilsReadFileRelative2.default)('../../_compiled_/hammerhead_client/hammerhead.js');

// Static
function parseServiceMsg(body) {
    body = body.toString();

    try {
        return JSON.parse(body);
    } catch (err) {
        return null;
    }
}

function createServerInfo(hostname, port, crossDomainPort) {
    return {
        hostname: hostname,
        port: port,
        crossDomainPort: crossDomainPort,
        domain: 'http://' + hostname + ':' + port
    };
}

// Proxy

var Proxy = (function (_Router) {
    function Proxy(hostname, port1, port2) {
        var _this = this;

        _classCallCheck(this, Proxy);

        _Router.call(this);

        this.openSessions = {};

        this.server1Info = createServerInfo(hostname, port1, port2);
        this.server2Info = createServerInfo(hostname, port2, port1);
        this.server1 = _http2.default.createServer(function (req, res) {
            return _this._onRequest(req, res, _this.server1Info);
        });
        this.server2 = _http2.default.createServer(function (req, res) {
            return _this._onRequest(req, res, _this.server2Info);
        });

        this.server1.listen(port1);
        this.server2.listen(port2);

        this._registerServiceRoutes();
    }

    _inherits(Proxy, _Router);

    Proxy.prototype._registerServiceRoutes = function _registerServiceRoutes() {
        var _this2 = this;

        this.GET('/hammerhead.js', {
            contentType: 'application/x-javascript',
            content: CLIENT_SCRIPT
        });

        this.POST('/ie9-file-reader-shim', _upload.ie9FileReaderShim);
        this.POST('/messaging', function (req, res, serverInfo) {
            return _this2._onServiceMessage(req, res, serverInfo);
        });
        this.GET('/task.js', function (req, res, serverInfo) {
            return _this2._onTaskScriptRequest(req, res, serverInfo, false);
        });
        this.GET('/iframe-task.js', function (req, res, serverInfo) {
            return _this2._onTaskScriptRequest(req, res, serverInfo, true);
        });
    };

    Proxy.prototype._onServiceMessage = function _onServiceMessage(req, res, serverInfo) {
        var body, msg, session, result;
        return _regeneratorRuntime.async(function _onServiceMessage$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    context$2$0.next = 2;
                    return (0, _utilsHttp.fetchBody)(req);

                case 2:
                    body = context$2$0.sent;
                    msg = parseServiceMsg(body);
                    session = msg && this.openSessions[msg.jobUid];

                    if (!session) {
                        context$2$0.next = 18;
                        break;
                    }

                    context$2$0.prev = 6;
                    context$2$0.next = 9;
                    return session.handleServiceMessage(msg, serverInfo);

                case 9:
                    result = context$2$0.sent;

                    (0, _utilsHttp.respondWithJSON)(res, result || '');
                    context$2$0.next = 16;
                    break;

                case 13:
                    context$2$0.prev = 13;
                    context$2$0.t0 = context$2$0['catch'](6);

                    (0, _utilsHttp.respond500)(res, context$2$0.t0.toString());

                case 16:
                    context$2$0.next = 19;
                    break;

                case 18:
                    (0, _utilsHttp.respond500)(res, 'Session is not opened in proxy');

                case 19:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this, [[6, 13]]);
    };

    Proxy.prototype._onTaskScriptRequest = function _onTaskScriptRequest(req, res, serverInfo, isIFrame) {
        var referer = req.headers['referer'];
        var refererDest = referer && _sharedUrl_util2.default.parseProxyUrlWrap(referer);
        var session = refererDest && this.openSessions[refererDest.jobInfo.uid];

        if (session) {
            res.setHeader('content-type', 'application/x-javascript');
            res.setHeader('cache-control', 'no-cache, no-store, must-revalidate');
            res.setHeader('pragma', 'no-cache');
            res.end(session.getTaskScript(referer, refererDest.originUrl, serverInfo, isIFrame, true));
        } else (0, _utilsHttp.respond500)(res);
    };

    Proxy.prototype._onRequest = function _onRequest(req, res, serverInfo) {
        //NOTE: skip browsers favicon requests which we can't process
        if (req.url === '/favicon.ico') (0, _utilsHttp.respond404)(res);

        // NOTE: not a service request, execute proxy pipeline
        else if (!this._route(req, res, serverInfo)) (0, _pipeline.runPipeline)(req, res, serverInfo, this.openSessions);
    };

    // API

    Proxy.prototype.close = function close() {
        this.server1.close();
        this.server2.close();
    };

    Proxy.prototype.openSession = function openSession(url, session) {
        session.proxy = this;
        this.openSessions[session.id] = session;

        return _sharedUrl_util2.default.getProxyUrl(url, this.server1Info.hostname, this.server1Info.port, session.id);
    };

    Proxy.prototype.closeSession = function closeSession(session) {
        session.proxy = null;
        delete this.openSessions[session.id];
    };

    return Proxy;
})(_router2.default);

exports.default = Proxy;
module.exports = exports.default;
