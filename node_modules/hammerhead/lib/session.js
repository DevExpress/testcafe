'use strict';

var _inherits = require('babel-runtime/helpers/inherits').default;

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _events = require('events');

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

var _sharedService_msg_cmd = require('../shared/service_msg_cmd');

var _sharedService_msg_cmd2 = _interopRequireDefault(_sharedService_msg_cmd);

var _cookies = require('./cookies');

var _cookies2 = _interopRequireDefault(_cookies);

var _utilsReadFileRelative = require('./utils/read-file-relative');

var _utilsReadFileRelative2 = _interopRequireDefault(_utilsReadFileRelative);

var _sharedUrl_util = require('../shared/url_util');

// Const
var TASK_TEMPLATE = (0, _utilsReadFileRelative2.default)('../../_compiled_/hammerhead_client/task.js.mustache');

// Global instance counter used to generate ID's
var instanceCount = 0;

// Session

var Session = (function (_EventEmitter) {
    function Session() {
        _classCallCheck(this, Session);

        _EventEmitter.call(this);

        this.id = ++instanceCount;
        this.cookies = new _cookies2.default();
        this.proxy = null;
        this.injectable = {
            scripts: ['/hammerhead.js'],
            styles: []
        };
    }

    _inherits(Session, _EventEmitter);

    Session.prototype.handleServiceMessage = function handleServiceMessage(msg, serverInfo) {
        return _regeneratorRuntime.async(function handleServiceMessage$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    if (!this[msg.cmd]) {
                        context$2$0.next = 6;
                        break;
                    }

                    context$2$0.next = 3;
                    return this[msg.cmd](msg, serverInfo);

                case 3:
                    return context$2$0.abrupt('return', context$2$0.sent);

                case 6:
                    throw new Error('Malformed service message or message handler is not implemented');

                case 7:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this);
    };

    Session.prototype.getTaskScript = function getTaskScript(referer, cookieUrl, serverInfo, isIFrame, withPayload) {
        var cookies = this.cookies.getClientString(cookieUrl);
        var payloadScript = '';

        if (withPayload) payloadScript = isIFrame ? this._getIFramePayloadScript() : this._getPayloadScript();

        return _mustache2.default.render(TASK_TEMPLATE, {
            cookie: cookies.replace(/'/g, '\\\''),
            jobUid: this.id,
            jobOwnerToken: '',
            serviceMsgUrl: serverInfo.domain + '/messaging',
            ie9FileReaderShimUrl: serverInfo.domain + '/ie9-file-reader-shim',
            crossDomainPort: serverInfo.crossDomainPort,
            payloadScript: payloadScript,
            referer: referer
        });
    };

    Session.prototype._getIFramePayloadScript = function _getIFramePayloadScript() {
        throw new Error('Not implemented');
    };

    Session.prototype._getPayloadScript = function _getPayloadScript() {
        throw new Error('Not implemented');
    };

    Session.prototype._storeUploads = function _storeUploads(fileNames, data) {
        return _regeneratorRuntime.async(function _storeUploads$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    throw new Error('Not implemented');

                case 1:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this);
    };

    Session.prototype._getUploads = function _getUploads(paths) {
        return _regeneratorRuntime.async(function _getUploads$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    throw new Error('Not implemented');

                case 1:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this);
    };

    Session.prototype.handleFileDownload = function handleFileDownload(ctx) {
        throw new Error('Not implemented');
    };

    Session.prototype.handlePageError = function handlePageError(ctx, err) {
        throw new Error('Not implemented');
    };

    Session.prototype.getAuthCredentials = function getAuthCredentials() {
        throw new Error('Not implemented');
    };

    return Session;
})(_events.EventEmitter);

exports.default = Session;

// Service message handlers
var ServiceMessages = Session.prototype;

ServiceMessages[_sharedService_msg_cmd2.default.SET_COOKIE] = function (msg) {
    var parsedUrl = (0, _sharedUrl_util.parseProxyUrlWrap)(msg.url);
    var cookieUrl = parsedUrl ? parsedUrl.originUrl : msg.url;

    this.cookies.setByClient(cookieUrl, msg.cookie);

    return this.cookies.getClientString(cookieUrl);
};

ServiceMessages[_sharedService_msg_cmd2.default.GET_IFRAME_TASK_SCRIPT] = function (msg, serverInfo) {
    var referer = msg.referer || '';
    var refererDest = referer && (0, _sharedUrl_util.parseProxyUrlWrap)(referer);
    var cookieUrl = refererDest && refererDest.originUrl;

    return this.getTaskScript(referer, cookieUrl, serverInfo, true, false);
};

ServiceMessages[_sharedService_msg_cmd2.default.UPLOAD_FILES] = function callee$0$0(msg) {
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return this._storeUploads(msg.fileNames, msg.data);

            case 2:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 3:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};

ServiceMessages[_sharedService_msg_cmd2.default.GET_UPLOADED_FILES] = function callee$0$0(msg) {
    return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
        while (1) switch (context$1$0.prev = context$1$0.next) {
            case 0:
                context$1$0.next = 2;
                return this._loadUploads(msg.filePaths);

            case 2:
                return context$1$0.abrupt('return', context$1$0.sent);

            case 3:
            case 'end':
                return context$1$0.stop();
        }
    }, null, this);
};
module.exports = exports.default;
//# sourceMappingURL=session.js.map