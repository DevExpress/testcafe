{"version":3,"sources":["pipeline/request-agent.js"],"names":[],"mappings":";;;;;;;;;;QA4DgB,MAAM,GAAN,MAAM;QAeN,kBAAkB,GAAlB,kBAAkB;QAKlB,YAAY,GAAZ,YAAY;QAOZ,yBAAyB,GAAzB,yBAAyB;;qBAvFvB,OAAO;;;;wBACJ,WAAW;;;;;AAGhC,IAAM,oBAAoB,GAAG,IAAI,CAAC;;AAElC,IAAM,IAAI,GAAG;AACT,SAAK,EAAE,OAAO;AACd,SAAK,EAAE,OAAO;AACd,QAAI,EAAG,MAAM;CAChB,CAAC;;;AAIF,IAAI,cAAc,GAAG,uBAAa,EAAE,GAAG,EAAE,oBAAoB,EAAE,CAAC,CAAC;;;;;;AAMjE,IAAI,MAAM,0BACL,IAAI,CAAC,KAAK,IAAG;AACV,YAAQ,EAAQ,IAAI;AACpB,QAAI,EAAY,gBAAM,GAAG;AACzB,kBAAc,EAAE,cAAc;CACjC,UAEA,IAAI,CAAC,KAAK,IAAG;AACV,YAAQ,EAAQ,IAAI;AACpB,QAAI,EAAY,gBAAM,GAAG;AACzB,kBAAc,EAAE,cAAc;CACjC,UAEA,IAAI,CAAC,IAAI,IAAG;AACT,YAAQ,EAAE,IAAI;AACd,QAAI,iBAAW;CAClB,UACJ,CAAC;;;AAIF,SAAS,QAAQ,CAAE,IAAI,EAAE;AACrB,QAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;;AAEzB,QAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;AACjB,aAAK,CAAC,QAAQ,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC;AAC5B,qBAAS,EAAO,IAAI;AACpB,0BAAc,EAAE,KAAK,CAAC,cAAc;SACvC,CAAC,CAAC;KACN;;AAED,WAAO,KAAK,CAAC,QAAQ,CAAC;CACzB;;AAED,SAAS,gBAAgB,CAAE,GAAG,EAAE;AAC5B,WAAO,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;CAClE;;;;AAIM,SAAS,MAAM,CAAE,OAAO,EAAE;AAC7B,QAAI,IAAI,GAAG,KAAK,CAAC,CAAC;;AAElB,QAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAC5B,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAEhB,IAAI,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,EACrC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAGlB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;;AAEtB,WAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;CAClC;;AAEM,SAAS,kBAAkB,CAAE,MAAM,EAAE,OAAO,EAAE;AACjD,QAAI,mBAAmB,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,KAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,cAAc,CAAC;AACrG,WAAO,mBAAmB,IAAI,gBAAgB,CAAC,MAAM,CAAC,CAAC;CAC1D;;AAEM,SAAS,YAAY,CAAE,OAAO,EAAE;AACnC,kBAAc,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACvC,WAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;CACxC;;;;;AAIM,SAAS,yBAAyB,GAAI;AACzC,iBAAY,MAAM,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE;AACxC,YAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;;AAEzB,YAAI,KAAK,CAAC,QAAQ,EACd,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;;AAE7B,aAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;KACzB,CAAC,CAAC;CACN","file":"pipeline/request-agent.js","sourcesContent":["import Agent from 'yakaa';\r\nimport LRUCache from 'lru-cache';\r\n\r\n// Const\r\nconst SSL3_HOST_CACHE_SIZE = 1000;\r\n\r\nconst TYPE = {\r\n    SSLv3: 'SSLv3',\r\n    TLSv1: 'TLSv1',\r\n    HTTP:  'HTTP'\r\n};\r\n\r\n\r\n// Static\r\nvar SSLv3HostCache = new LRUCache({ max: SSL3_HOST_CACHE_SIZE });\r\n\r\n// NOTE: we need agent with the proper keep-alive behavior.\r\n// Such agent was landed in Node 0.12. Since we still support\r\n// Node 0.10 we will use third-party agent which is basically is the\r\n// extraction of the Node 0.12 Agent code.\r\nvar agents = {\r\n    [TYPE.SSLv3]: {\r\n        instance:       null,\r\n        ctor:           Agent.SSL,\r\n        secureProtocol: 'SSLv3_method'\r\n    },\r\n\r\n    [TYPE.TLSv1]: {\r\n        instance:       null,\r\n        ctor:           Agent.SSL,\r\n        secureProtocol: 'TLSv1_method'\r\n    },\r\n\r\n    [TYPE.HTTP]: {\r\n        instance: null,\r\n        ctor:     Agent\r\n    }\r\n};\r\n\r\n\r\n// Utils\r\nfunction getAgent (type) {\r\n    var agent = agents[type];\r\n\r\n    if (!agent.instance) {\r\n        agent.instance = new agent.ctor({\r\n            keepAlive:      true,\r\n            secureProtocol: agent.secureProtocol\r\n        });\r\n    }\r\n\r\n    return agent.instance;\r\n}\r\n\r\nfunction isSSLProtocolErr (err) {\r\n    return err.message && err.message.indexOf('SSL routines') > -1;\r\n}\r\n\r\n\r\n// API\r\nexport function assign (reqOpts) {\r\n    var type = void 0;\r\n\r\n    if (reqOpts.protocol === 'http:')\r\n        type = TYPE.HTTP;\r\n\r\n    else if (SSLv3HostCache.get(reqOpts.host))\r\n        type = TYPE.SSLv3;\r\n\r\n    else\r\n        type = TYPE.TLSv1;\r\n\r\n    reqOpts.agent = getAgent(type);\r\n}\r\n\r\nexport function shouldRegressHttps (reqErr, reqOpts) {\r\n    var currentAgentIsTLSv1 = reqOpts.agent.options.secureProtocol === agents[TYPE.TLSv1].secureProtocol;\r\n    return currentAgentIsTLSv1 && isSSLProtocolErr(reqErr);\r\n}\r\n\r\nexport function regressHttps (reqOpts) {\r\n    SSLv3HostCache.set(reqOpts.host, true);\r\n    reqOpts.agent = getAgent(TYPE.SSLv3);\r\n}\r\n\r\n// NOTE: since our agents are keep-alive, we need to manually\r\n// reset connections when we switch servers in tests\r\nexport function resetKeepAliveConnections () {\r\n    Object.keys(agents).forEach(function (type) {\r\n        var agent = agents[type];\r\n\r\n        if (agent.instance)\r\n            agent.instance.destroy();\r\n\r\n        agent.instance = null;\r\n    });\r\n}"],"sourceRoot":"../src"}