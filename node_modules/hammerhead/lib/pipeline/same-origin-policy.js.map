{"version":3,"sources":["pipeline/same-origin-policy.js"],"names":[],"mappings":";;;;;QAGgB,KAAK,GAAL,KAAK;;2BAHI,oBAAoB;;;;;;AAGtC,SAAS,KAAK,CAAE,GAAG,EAAE;AACxB,QAAI,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;;;AAGnC,QAAI,GAAG,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,EAC7B,OAAO,IAAI,CAAC;;;AAGhB,QAAI,SAAS,GAAO,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,sBAAa,yBAAyB,CAAC,CAAC;AAC5E,QAAI,aAAa,GAAG,CAAC,EAAE,SAAS,GAAG,sBAAa,uBAAuB,CAAA,AAAC,CAAC;;;AAGzE,QAAI,CAAC,aAAa,EACd,OAAO,KAAK,CAAC;;;AAGjB,QAAI,GAAG,CAAC,GAAG,CAAC,MAAM,KAAK,SAAS,EAC5B,OAAO,IAAI,CAAC;;AAEhB,QAAI,eAAe,GAAU,SAAS,GAAG,sBAAa,yBAAyB,CAAC;AAChF,QAAI,iBAAiB,GAAQ,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;AAChF,QAAI,sBAAsB,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,kCAAkC,CAAC,CAAC;AACrF,QAAI,gBAAgB,GAAS,MAAM,CAAC,sBAAsB,CAAC,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC;AACrF,QAAI,cAAc,GAAW,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,iBAAiB,GAAG,CAAC,iBAAiB,CAAC,CAAC;AACxG,QAAI,eAAe,GAAU,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;;;AAI9D,QAAI,eAAe,KAAK,CAAC,gBAAgB,IAAI,eAAe,CAAA,AAAC,EACzD,OAAO,KAAK,CAAC;;;AAGjB,WAAO,eAAe,IAAI,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;CACpE","file":"pipeline/same-origin-policy.js","sourcesContent":["import SHARED_CONST from '../../shared/const';\r\n\r\n// NOTE: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\r\nexport function check (ctx) {\r\n    var reqOrigin = ctx.dest.reqOrigin;\r\n\r\n    // PASSED: Same origin\r\n    if (ctx.dest.domain === reqOrigin)\r\n        return true;\r\n\r\n    // Ok, we have a cross-origin request\r\n    var xhrHeader     = ctx.req.headers[SHARED_CONST.XHR_REQUEST_MARKER_HEADER];\r\n    var corsSupported = !!(xhrHeader & SHARED_CONST.XHR_CORS_SUPPORTED_FLAG);\r\n\r\n    // FAILED: CORS not supported\r\n    if (!corsSupported)\r\n        return false;\r\n\r\n    // PASSED: we have a \"preflight\" request\r\n    if (ctx.req.method === 'OPTIONS')\r\n        return true;\r\n\r\n    var withCredentials        = xhrHeader & SHARED_CONST.XHR_WITH_CREDENTIALS_FLAG;\r\n    var allowOriginHeader      = ctx.destRes.headers['access-control-allow-origin'];\r\n    var allowCredentialsHeader = ctx.destRes.headers['access-control-allow-credentials'];\r\n    var allowCredentials       = String(allowCredentialsHeader).toLowerCase() === 'true';\r\n    var allowedOrigins         = Array.isArray(allowOriginHeader) ? allowOriginHeader : [allowOriginHeader];\r\n    var wildcardAllowed        = allowedOrigins.indexOf('*') > -1;\r\n\r\n    // FAILED: Credentialed requests are not allowed or wild carding was used\r\n    // for the allowed origin (credentialed requests should specify exact domain).\r\n    if (withCredentials && (!allowCredentials || wildcardAllowed))\r\n        return false;\r\n\r\n    // FINAL CHECK: request origin should match one of the allowed origins\r\n    return wildcardAllowed || allowedOrigins.indexOf(reqOrigin) > -1;\r\n}"],"sourceRoot":"../src"}