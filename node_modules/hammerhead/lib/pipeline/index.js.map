{"version":3,"sources":["pipeline/index.js"],"names":[],"mappings":"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","file":"pipeline/index.js","sourcesContent":["import {process as processResource} from '../resource-processing';\r\nimport * as ERR from '../errs';\r\nimport DestinationRequest from './destination-request';\r\nimport PipelineContext from './pipeline-context';\r\nimport * as headerTransforms from './header-transforms';\r\nimport { handle as handleConnectionReset } from './connection-reset';\r\nimport {check as checkSameOriginPolicy } from './same-origin-policy';\r\nimport { fetchBody, respond404 } from '../utils/http';\r\nimport { inject as injectUpload } from '../upload';\r\n\r\n\r\n// Stages\r\nvar stages = {\r\n    0: async function fetchProxyRequestBody (ctx, next) {\r\n        ctx.reqBody = await fetchBody(ctx.req);\r\n        next();\r\n    },\r\n\r\n    1: function sendDestinationRequest (ctx, next) {\r\n        var opts = createReqOpts(ctx);\r\n        var req  = new DestinationRequest(opts);\r\n\r\n        req.on('response', (res) => {\r\n            ctx.destRes = res;\r\n            next();\r\n        });\r\n\r\n        req.on('error', () => ctx.hasDestReqErr = true);\r\n        req.on('fatalError', (err) => error(ctx, err));\r\n    },\r\n\r\n    2: function checkSameOriginPolicyCompliance (ctx, next) {\r\n        if (ctx.isXhr && !checkSameOriginPolicy(ctx)) {\r\n            ctx.closeWithError(0);\r\n            return;\r\n        }\r\n\r\n        next();\r\n    },\r\n\r\n    3: function decideOnProcessingStrategy (ctx, next) {\r\n        ctx.buildContentInfo();\r\n\r\n        //NOTE: just pipe body to browser if we don't need to process content body\r\n        if (!ctx.contentInfo.requireProcessing) {\r\n            sendResponseHeaders(ctx);\r\n            ctx.destRes.pipe(ctx.res);\r\n            return;\r\n        }\r\n\r\n        next();\r\n    },\r\n\r\n    4: async function fetchContent (ctx, next) {\r\n        ctx.destResBody = await fetchBody(ctx.destRes);\r\n\r\n        // NOTE: sometimes underlying socket emits error event.\r\n        // But if we have response body we can still process\r\n        // such requests. (See: B234324)\r\n        if (ctx.hasDestReqErr && isDestResBodyMalformed(ctx)) {\r\n            error({\r\n                code:    ERR.PROXY_ORIGIN_SERVER_CONNECTION_TERMINATED,\r\n                destUrl: ctx.dest.url\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        next();\r\n    },\r\n\r\n    5: async function processContent (ctx, next) {\r\n        try {\r\n            ctx.destResBody = await processResource(ctx);\r\n            next();\r\n        }\r\n        catch (err) {\r\n            error(ctx, err);\r\n        }\r\n    },\r\n\r\n    6: function sendProxyResponse (ctx) {\r\n        sendResponseHeaders(ctx);\r\n\r\n        handleConnectionReset(() => {\r\n            ctx.res.write(ctx.destResBody);\r\n            ctx.res.end();\r\n        });\r\n    }\r\n};\r\n\r\n\r\n// Utils\r\nfunction createReqOpts (ctx) {\r\n    var bodyWithUploads = injectUpload(ctx.req.headers['content-type'], ctx.reqBody);\r\n\r\n    return {\r\n        url:         ctx.dest.url,\r\n        protocol:    ctx.dest.protocol,\r\n        hostname:    ctx.dest.hostname,\r\n        host:        ctx.dest.host,\r\n        port:        ctx.dest.port,\r\n        path:        ctx.dest.partAfterHost,\r\n        method:      ctx.req.method,\r\n        headers:     headerTransforms.forRequest(ctx, this),\r\n        credentials: ctx.session.getAuthCredentials(),\r\n        body:        bodyWithUploads || ctx.reqBody\r\n    };\r\n}\r\n\r\nfunction sendResponseHeaders (ctx) {\r\n    var headers = headerTransforms.forResponse(ctx);\r\n\r\n    ctx.res.writeHead(ctx.destRes.statusCode, headers);\r\n    ctx.res.addTrailers(ctx.destRes.trailers);\r\n}\r\n\r\nfunction error (ctx, err) {\r\n    if (ctx.isPage && !ctx.isIFrame)\r\n        ctx.session.handlePageError(ctx, err);\r\n    else\r\n        ctx.closeWithError(500, err.toString());\r\n}\r\n\r\nfunction isDestResBodyMalformed (ctx) {\r\n    return !ctx.destResBody || ctx.destResBody.length !== ctx.destRes.headers['content-length'];\r\n}\r\n\r\n\r\n// API\r\nexport function runPipeline (req, res, serverInfo, openSessions) {\r\n    var ctx = new PipelineContext(req, res, serverInfo);\r\n\r\n    if (ctx.dispatch(openSessions)) {\r\n        var stageIdx = 0;\r\n        var next     = () => stages[++stageIdx](ctx, next);\r\n\r\n        stages[0](ctx, next);\r\n    }\r\n    else\r\n        respond404(res);\r\n}\r\n\r\n"],"sourceRoot":"../src"}