(function () {
    var TestCafeClient = window.TestCafeClient,
        Hammerhead = HammerheadClient.get('Hammerhead');

    TestCafeClient.define('Settings', {});

    var $ = Hammerhead.$,
        ShadowUI = Hammerhead.ShadowUI,
        Transport = TestCafeClient.get('Base.Transport'),
        ServiceCommands = TestCafeClient.get('Shared.ServiceCommands'),
        ModalBackground = TestCafeClient.get('UI.ModalBackground'),
        AuthenticationDialog = TestCafeClient.get('UI.RecorderWidgets.AuthenticationDialog'),
        ConfirmDialog = TestCafeClient.get('UI.RecorderWidgets.ConfirmDialog'),
        ButtonWidget = TestCafeClient.get('UI.RecorderWidgets.Button');

    var returnUrl = '"<@ returnUrl @>"',
        originUrl = '"<@ originUrl @>"',
        targetUrl = '"<@ targetUrl @>"',
        stepsInfoLength = '"<@ stepsInfoLength @>"',
        hasErrors = '"<@ hasErrors @>"' === 'true',
        currentCredentials = '"<@ credentials @>"',
        currentUsername = null,
        currentPassword = null,
        $recorder = null,
        $button = null;

    var RECORDER_CLASS = 'recorder',
        INCORRECT_CREDENTIALS_ERROR_MESSAGE_TEMPLATE = 'Invalid username or password. Please try again.',
        CANCEL_AUTHENTICATION_DIALOG_HEADER = 'Authentication cancelled',
        RESTART_RECORDING_TEXT = 'Due to cancelled authentication, the first recorded step (that invoked the authentication) will be deleted. Test recording will be restarted.',
        NEED_PLAYBACK_TEST_TEXT = 'Due to cancelled authentication, the last recorded step (that invoked the authentication) will be deleted.To return to the recording and get the actual page state, replay all recorded steps.',
        TEST_HAS_ERRORS_TEXT = 'Due to cancelled authentication the last recorded step (that invoked the authentication) will be deleted. Since some incorrect test steps have been detected, test recording will be redirected to the initial test page, so that you can correct errors and replay the test.',
        BUTTONS_CLASS = 'buttons',
        CENTERED_BUTTONS = 'centered';

    var createButtons = function () {
        var $buttons = $('<div></div>');
        ShadowUI.addClass($buttons, BUTTONS_CLASS);
        ShadowUI.addClass($buttons, CENTERED_BUTTONS);

        $button = ButtonWidget.create($buttons, hasErrors ? 'Go back to initial page' : (stepsInfoLength >
                                                                                         1 ? 'Start playback' : 'Restart recording'));

        return $buttons;
    };

    $(document).ready(function () {
        ModalBackground.initAndShowLoadingText();
        ModalBackground.hide();
        ModalBackground.show();

        stepsInfoLength = parseInt(stepsInfoLength);

        $recorder = $('<div>').appendTo(ShadowUI.getRoot());

        ShadowUI.addClass($recorder, RECORDER_CLASS);

        var matches = /([^:]+):(.*)/.exec(currentCredentials);

        if (matches) {
            currentUsername = matches[1];
            currentPassword = matches[2];
        }

        var errorMessage = currentUsername ? INCORRECT_CREDENTIALS_ERROR_MESSAGE_TEMPLATE : '',

            authDialogOptions = {
                originUrl: originUrl,
                serverMessage: 'Please, log in!',
                username: currentUsername,
                password: currentPassword,
                errorMessage: errorMessage,
                cancelButtonText: !stepsInfoLength ? 'Return to Control Panel' : 'Cancel'
            };

        AuthenticationDialog.init($recorder, authDialogOptions);

        AuthenticationDialog.events.on('logInButtonClick', function (e) {
            AuthenticationDialog.blind(true);
            ModalBackground.showLoadingIcon();

            var authCredentialsSetMsg = {
                cmd: ServiceCommands.AUTH_CREDENTIALS_SET,
                username: e.username,
                password: e.password
            };

            Transport.asyncServiceMsg(authCredentialsSetMsg, function (err) {
                if (err) {
                    AuthenticationDialog.blind(false);
                    AuthenticationDialog.showErrorMessage(err);
                    return;
                }

                window.location.href = targetUrl;
            });
        });

        AuthenticationDialog.events.on('cancelButtonClick', function () {
            AuthenticationDialog.close(function () {
                if (!stepsInfoLength) {
                    ModalBackground.showLoadingIcon();
                    window.location.href = returnUrl;
                    return;
                }

                var dialog = new ConfirmDialog($recorder, {
                    headerText: CANCEL_AUTHENTICATION_DIALOG_HEADER,
                    message: [hasErrors ? TEST_HAS_ERRORS_TEXT : (stepsInfoLength >
                                                                  1 ? NEED_PLAYBACK_TEST_TEXT : RESTART_RECORDING_TEXT)],
                    justifyText: true,
                    footerContent: createButtons()
                });

                var buttonHandler = function () {
                    dialog.popup.close(function () {
                        Transport.asyncServiceMsg({
                            cmd: ServiceCommands.CANCEL_AUTHENTICATION,
                            hasErrors: hasErrors
                        }, function (res) {
                            if (hasErrors) {
                                ModalBackground.showLoadingIcon();
                                window.location.href = res.recordingUrl;
                            }
                            else
                                Transport.switchToStartRecordingUrl(res.recordingUrl);
                        });
                    });
                };

                ShadowUI.bind($button, 'click', buttonHandler);
                dialog.bindEnterPressHandler(buttonHandler)
            });
        });
    });
})();