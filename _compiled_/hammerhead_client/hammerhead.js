/*!
 mods v0.1.0 
 Copyright (c) 2013 Ivan Nikulin (ifaaan@gmail.com, https://github.com/inikulin)
 Released under the MIT license
 */
//NOTE: declare Mods without a 'var', so it will be placed inside global object.
//Just a 'bad practice'-way to say 'window.Mods = ...'
Mods = function () {

    //Internals
    //---------------------------------------------------------------------------
    var EXPORTS_PROP = 'exports',
        FUNC_TYPE = 'function',
        FUNC_AS_EXPORTS_FLAG = '%E%',
        modules = {};


    //NOTE: error emitter. Just throw error string prefixed with 'Mods: '
    function err(msg) {
        throw 'Mods: ' + msg;
    }

    //NOTE: this is there all magic is happening, this function is a factory-method for the 'require'-functions.
    //'require' function passed to the module initializer and also used in 'get' API method.
    //'require' function used to fetch module by given 'id', initialize it if necessary,
    //and perform error checks (e.g. circular dependencies).
    function createRequireFunc(stack) {
        //NOTE: newly created function has a closure on a 'stack' parameter.
        //'stack' parameter contains call chain of the module initializers which lead to the current module
        //initialization.
        return function (id) {
            var mod = modules[id],
                circularDependencyErr,
                i = 0;

            //NOTE: we don't have module with given 'id', fail.
            if (!mod)
                err('required "' + id + '" is undefined');

            for (; i < stack.length; i++) {
                //NOTE: we have required module in call chain, so this is a circular dependency.
                //Initialize 'circularDependencyErr' variable, so now we have a circular dependency flag and error
                //message, all in one.
                if (stack[i] == id)
                    circularDependencyErr = 'circular dependency: ';

                //NOTE: if we have error, append current stack item to the error message, so we have whole call chain
                //that lead to this error.
                if (circularDependencyErr)
                    circularDependencyErr += '"' + stack[i] + '" -> ';
            }

            //NOTE: finally, if we have error append required module id to the error message, then fail
            if (circularDependencyErr)
                err(circularDependencyErr + '"' + id + '"');

            //NOTE: module is not initialized yet
            if (typeof mod == FUNC_TYPE && !mod[FUNC_AS_EXPORTS_FLAG]) {
                //NOTE: initialize 'exports' object, reuse 'mod' variable as a host for this object
                mod[EXPORTS_PROP] = {};

                //NOTE: copy stack and required module to the copy, so new require function will contain current module.
                //Initialize module with new require function and pass 'mod' as a context, so
                //'exports' object can be accessed both via 'exports' parameter and via 'this.exports'.
                mod.call(mod, createRequireFunc(stack.concat(id)), mod[EXPORTS_PROP]);

                //NOTE: save 'exports' as a module
                mod = modules[id] = mod[EXPORTS_PROP];

                //NOTE: if we have function as exports - mark it with special flag to avoid re-init
                if (typeof mod == FUNC_TYPE)
                    mod[FUNC_AS_EXPORTS_FLAG] = FUNC_AS_EXPORTS_FLAG;
            }

            return mod;
        };
    }

    //API
    //---------------------------------------------------------------------------
    return {
        define: function (id, mod) {
            //NOTE: fail if we have redefinition
            if (modules[id])
                err('"' + id + '" is already defined');

            modules[id] = mod;
        },

        //NOTE: 'get' is just require function with empty call stack
        get: createRequireFunc([])
    };
};

(function () {
    var Mods = window.Mods;

    delete window.Mods;

    function initHammerheadClient(window, isIFrameWithoutSrc) {
        //NOTE: the following script will be executed in the current window context. But when you call a script in an iFrame
        // global vars are get from the top window. So, we should override the global vars that can have affect to our script.
        var document = window.document,
            define = window.define;

        window.HammerheadClient = new Mods();
        window.HammerheadClient.Mods = Mods;

        var HammerheadClient = window.HammerheadClient;

        HammerheadClient.define('jQuery', function () {
            this.exports = window.jQuery.noConflict(true);
        });

        HammerheadClient.define('async', function () {
            this.exports = async;

            delete window.async;
        });
/*!
 * jQuery JavaScript Library v1.7.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Wed Mar 21 12:46:34 2012 -0700
 */
(function( window, undefined ) {

// Use the correct document accordingly with window argument (sandbox)
var document = window.document,
	navigator = window.navigator,
	location = window.location;
var jQuery = (function() {

// Define a local copy of jQuery
var jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// A simple way to check for HTML strings or ID strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Check if a string has a non-whitespace character in it
	rnotwhite = /\S/,

	// Used for trimming whitespace
	trimLeft = /^\s+/,
	trimRight = /\s+$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	// Useragent RegExp
	rwebkit = /(webkit)[ \/]([\w.]+)/,
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	rmsie = /(msie) ([\w.]+)/,
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

	// Matches dashed string for camelizing
	rdashAlpha = /-([a-z]|[0-9])/ig,
	rmsPrefix = /^-ms-/,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// Keep a UserAgent string for use with jQuery.browser
	userAgent = navigator.userAgent,

	// For matching the engine and version of the browser
	browserMatch,

	// The deferred used on DOM ready
	readyList,

	// The ready event handler
	DOMContentLoaded,

	// Save a reference to some core methods
	toString = Object.prototype.toString,
	hasOwn = Object.prototype.hasOwnProperty,
	push = Array.prototype.push,
	slice = Array.prototype.slice,
	trim = String.prototype.trim,
	indexOf = Array.prototype.indexOf,

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), or $(undefined)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// The body element only exists once, optimize finding it
		if ( selector === "body" && !context && document.body ) {
			this.context = document;
			this[0] = document.body;
			this.selector = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = quickExpr.exec( selector );
			}

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context ? context.ownerDocument || context : document );

					// If a single string is passed in and it's a single tag
					// just do a createElement and skip the rest
					ret = rsingleTag.exec( selector );

					if ( ret ) {
						if ( jQuery.isPlainObject( context ) ) {
							selector = [ document.createElement( ret[1] ) ];
							jQuery.fn.attr.call( selector, context, true );

						} else {
							selector = [ doc.createElement( ret[1] ) ];
						}

					} else {
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
					}

					return jQuery.merge( this, selector );

				// HANDLE: $("#id")
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.7.2",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return slice.call( this, 0 );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = this.constructor();

		if ( jQuery.isArray( elems ) ) {
			push.apply( ret, elems );

		} else {
			jQuery.merge( ret, elems );
		}

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Attach the listeners
		jQuery.bindReady();

		// Add the callback
		readyList.add( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ),
			"slice", slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

        if (!window.$)
            delete window.$;

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

        if (!window.jQuery)
            delete window.jQuery;

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {
		// Either a released hold or an DOMready/load event and not yet ready
		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready, 1 );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.fireWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.trigger ) {
				jQuery( document ).trigger( "ready" ).off( "ready" );
			}
		}
	},

	bindReady: function() {
		if ( readyList ) {
			return;
		}

		readyList = jQuery.Callbacks( "once memory" );

		// Catch cases where $(document).ready() is called after the
		// browser event has already occurred.
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			return setTimeout( jQuery.ready, 1 );
		}

		// Mozilla, Opera and webkit nightlies currently support this event
		if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else if ( document.attachEvent ) {
			// ensure firing before onload,
			// maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var toplevel = false;

			try {
				toplevel = window.frameElement == null;
			} catch(e) {}

			if ( document.documentElement.doScroll && toplevel ) {
				doScrollCheck();
			}
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		for ( var name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	parseJSON: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}
		var xml, tmp;
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0,
			length = object.length,
			isObj = length === undefined || jQuery.isFunction( object );

		if ( args ) {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.apply( object[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( object[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return object;
	},

	// Use native String.trim function wherever possible
	trim: trim ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
		},

	// results is for internal usage only
	makeArray: function( array, results ) {
		var ret = results || [];

		if ( array != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			var type = jQuery.type( array );

			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
				push.call( ret, array );
			} else {
				jQuery.merge( ret, array );
			}
		}

		return ret;
	},

	inArray: function( elem, array, i ) {
		var len;

		if ( array ) {
			if ( indexOf ) {
				return indexOf.call( array, elem, i );
			}

			len = array.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in array && array[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var i = first.length,
			j = 0;

		if ( typeof second.length === "number" ) {
			for ( var l = second.length; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var ret = [], retVal;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key, ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		if ( typeof context === "string" ) {
			var tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		var args = slice.call( arguments, 2 ),
			proxy = function() {
				return fn.apply( context, args.concat( slice.call( arguments ) ) );
			};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;

		return proxy;
	},

	// Mutifunctional method to get and set values to a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
		var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

		// Sets many values
		if ( key && typeof key === "object" ) {
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
			}
			chainable = 1;

		// Sets one value
		} else if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = pass === undefined && jQuery.isFunction( value );

			if ( bulk ) {
				// Bulk operations only iterate when executing function values
				if ( exec ) {
					exec = fn;
					fn = function( elem, key, value ) {
						return exec.call( jQuery( elem ), value );
					};

				// Otherwise they run against the entire set
				} else {
					fn.call( elems, value );
					fn = null;
				}
			}

			if ( fn ) {
				for (; i < length; i++ ) {
					fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
				}
			}

			chainable = 1;
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// Use of jQuery.browser is frowned upon.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	uaMatch: function( ua ) {
		ua = ua.toLowerCase();

		var match = rwebkit.exec( ua ) ||
			ropera.exec( ua ) ||
			rmsie.exec( ua ) ||
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
			[];

		return { browser: match[1] || "", version: match[2] || "0" };
	},

	sub: function() {
		function jQuerySub( selector, context ) {
			return new jQuerySub.fn.init( selector, context );
		}
		jQuery.extend( true, jQuerySub, this );
		jQuerySub.superclass = this;
		jQuerySub.fn = jQuerySub.prototype = this();
		jQuerySub.fn.constructor = jQuerySub;
		jQuerySub.sub = this.sub;
		jQuerySub.fn.init = function init( selector, context ) {
			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
				context = jQuerySub( context );
			}

			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
		};
		jQuerySub.fn.init.prototype = jQuerySub.fn;
		var rootjQuerySub = jQuerySub(document);
		return jQuerySub;
	},

	browser: {}
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
	jQuery.browser[ browserMatch.browser ] = true;
	jQuery.browser.version = browserMatch.version;
}

// Deprecated, use jQuery.browser.webkit instead
if ( jQuery.browser.webkit ) {
	jQuery.browser.safari = true;
}

// IE doesn't match non-breaking spaces with \s
if ( rnotwhite.test( "\xA0" ) ) {
	trimLeft = /^[\s\xA0]+/;
	trimRight = /[\s\xA0]+$/;
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
if ( document.addEventListener ) {
	DOMContentLoaded = function() {
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
		jQuery.ready();
	};

} else if ( document.attachEvent ) {
	DOMContentLoaded = function() {
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( document.readyState === "complete" ) {
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	};
}

// The DOM ready check for Internet Explorer
function doScrollCheck() {
	if ( jQuery.isReady ) {
		return;
	}

	try {
		// If IE is used, use the trick by Diego Perini
		// http://javascript.nwbox.com/IEContentLoaded/
		document.documentElement.doScroll("left");
	} catch(e) {
		setTimeout( doScrollCheck, 1 );
		return;
	}

	// and execute any waiting functions
	jQuery.ready();
}

return jQuery;

})();


// String to Object flags format cache
var flagsCache = {};

// Convert String-formatted flags into Object-formatted ones and store in cache
function createFlags( flags ) {
	var object = flagsCache[ flags ] = {},
		i, length;
	flags = flags.split( /\s+/ );
	for ( i = 0, length = flags.length; i < length; i++ ) {
		object[ flags[i] ] = true;
	}
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	flags:	an optional list of space-separated flags that will change how
 *			the callback list behaves
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible flags:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( flags ) {

	// Convert flags from String-formatted to Object-formatted
	// (we check in cache first)
	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};

	var // Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = [],
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Add one or several callbacks to the list
		add = function( args ) {
			var i,
				length,
				elem,
				type,
				actual;
			for ( i = 0, length = args.length; i < length; i++ ) {
				elem = args[ i ];
				type = jQuery.type( elem );
				if ( type === "array" ) {
					// Inspect recursively
					add( elem );
				} else if ( type === "function" ) {
					// Add if not in unique mode and callback is not in
					if ( !flags.unique || !self.has( elem ) ) {
						list.push( elem );
					}
				}
			}
		},
		// Fire callbacks
		fire = function( context, args ) {
			args = args || [];
			memory = !flags.memory || [ context, args ];
			fired = true;
			firing = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
					memory = true; // Mark as halted
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( !flags.once ) {
					if ( stack && stack.length ) {
						memory = stack.shift();
						self.fireWith( memory[ 0 ], memory[ 1 ] );
					}
				} else if ( memory === true ) {
					self.disable();
				} else {
					list = [];
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					var length = list.length;
					add( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away, unless previous
					// firing was halted (stopOnFalse)
					} else if ( memory && memory !== true ) {
						firingStart = length;
						fire( memory[ 0 ], memory[ 1 ] );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					var args = arguments,
						argIndex = 0,
						argLength = args.length;
					for ( ; argIndex < argLength ; argIndex++ ) {
						for ( var i = 0; i < list.length; i++ ) {
							if ( args[ argIndex ] === list[ i ] ) {
								// Handle firingIndex and firingLength
								if ( firing ) {
									if ( i <= firingLength ) {
										firingLength--;
										if ( i <= firingIndex ) {
											firingIndex--;
										}
									}
								}
								// Remove the element
								list.splice( i--, 1 );
								// If we have some unicity property then
								// we only need to do this once
								if ( flags.unique ) {
									break;
								}
							}
						}
					}
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				if ( list ) {
					var i = 0,
						length = list.length;
					for ( ; i < length; i++ ) {
						if ( fn === list[ i ] ) {
							return true;
						}
					}
				}
				return false;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory || memory === true ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( stack ) {
					if ( firing ) {
						if ( !flags.once ) {
							stack.push( [ context, args ] );
						}
					} else if ( !( flags.once && memory ) ) {
						fire( context, args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};




var // Static reference to slice
	sliceDeferred = [].slice;

jQuery.extend({

	Deferred: function( func ) {
		var doneList = jQuery.Callbacks( "once memory" ),
			failList = jQuery.Callbacks( "once memory" ),
			progressList = jQuery.Callbacks( "memory" ),
			state = "pending",
			lists = {
				resolve: doneList,
				reject: failList,
				notify: progressList
			},
			promise = {
				done: doneList.add,
				fail: failList.add,
				progress: progressList.add,

				state: function() {
					return state;
				},

				// Deprecated
				isResolved: doneList.fired,
				isRejected: failList.fired,

				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
					return this;
				},
				always: function() {
					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
					return this;
				},
				pipe: function( fnDone, fnFail, fnProgress ) {
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( {
							done: [ fnDone, "resolve" ],
							fail: [ fnFail, "reject" ],
							progress: [ fnProgress, "notify" ]
						}, function( handler, data ) {
							var fn = data[ 0 ],
								action = data[ 1 ],
								returned;
							if ( jQuery.isFunction( fn ) ) {
								deferred[ handler ](function() {
									returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								});
							} else {
								deferred[ handler ]( newDefer[ action ] );
							}
						});
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					if ( obj == null ) {
						obj = promise;
					} else {
						for ( var key in promise ) {
							obj[ key ] = promise[ key ];
						}
					}
					return obj;
				}
			},
			deferred = promise.promise({}),
			key;

		for ( key in lists ) {
			deferred[ key ] = lists[ key ].fire;
			deferred[ key + "With" ] = lists[ key ].fireWith;
		}

		// Handle state
		deferred.done( function() {
			state = "resolved";
		}, failList.disable, progressList.lock ).fail( function() {
			state = "rejected";
		}, doneList.disable, progressList.lock );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( firstParam ) {
		var args = sliceDeferred.call( arguments, 0 ),
			i = 0,
			length = args.length,
			pValues = new Array( length ),
			count = length,
			pCount = length,
			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
				firstParam :
				jQuery.Deferred(),
			promise = deferred.promise();
		function resolveFunc( i ) {
			return function( value ) {
				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				if ( !( --count ) ) {
					deferred.resolveWith( deferred, args );
				}
			};
		}
		function progressFunc( i ) {
			return function( value ) {
				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				deferred.notifyWith( promise, pValues );
			};
		}
		if ( length > 1 ) {
			for ( ; i < length; i++ ) {
				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
				} else {
					--count;
				}
			}
			if ( !count ) {
				deferred.resolveWith( deferred, args );
			}
		} else if ( deferred !== firstParam ) {
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
		}
		return promise;
	}
});




jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		tds,
		events,
		eventName,
		i,
		isSupported,
		div = document.createElement( "div" ),
		documentElement = document.documentElement;

	// Preliminary tests
	div.setAttribute("className", "t");
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName( "*" );
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement( "select" );
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName( "input" )[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.55/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		pixelMargin: true
	};

	// jQuery.boxModel DEPRECATED in 1.3, use jQuery.support.boxModel instead
	jQuery.boxModel = support.boxModel = (document.compatMode === "CSS1Compat");

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent( "onclick" );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute("type", "radio");
	support.radioValue = input.value === "t";

	input.setAttribute("checked", "checked");

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "name", "t" );

	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for ( i in {
			submit: 1,
			change: 1,
			focusin: 1
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	fragment.removeChild( div );

	// Null elements to avoid leaks in IE
	fragment = select = opt = div = input = null;

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, outer, inner, table, td, offsetSupport,
			marginDiv, conMarginTop, style, html, positionTopLeftWidthHeight,
			paddingMarginBorderVisibility, paddingMarginBorder,
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		conMarginTop = 1;
		paddingMarginBorder = "padding:0;margin:0;border:";
		positionTopLeftWidthHeight = "position:absolute;top:0;left:0;width:1px;height:1px;";
		paddingMarginBorderVisibility = paddingMarginBorder + "0;visibility:hidden;";
		style = "style='" + positionTopLeftWidthHeight + paddingMarginBorder + "5px solid #000;";
		html = "<div " + style + "display:block;'><div style='" + paddingMarginBorder + "0;display:block;overflow:hidden;'></div></div>" +
			"<table " + style + "' cellpadding='0' cellspacing='0'>" +
			"<tr><td></td></tr></table>";

		container = document.createElement("div");
		container.style.cssText = paddingMarginBorderVisibility + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td style='" + paddingMarginBorder + "0;display:none'></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName( "td" );
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check if div with explicit width and no margin-right incorrectly
		// gets computed margin-right based on width of container. For more
		// info see bug #3333
		// Fails in WebKit before Feb 2011 nightlies
		// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
		if ( window.getComputedStyle ) {
			div.innerHTML = "";
			marginDiv = document.createElement( "div" );
			marginDiv.style.width = "0";
			marginDiv.style.marginRight = "0";
			div.style.width = "2px";
			div.appendChild( marginDiv );
			support.reliableMarginRight =
				( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
		}

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.innerHTML = "";
			div.style.width = div.style.padding = "1px";
			div.style.border = 0;
			div.style.overflow = "hidden";
			div.style.display = "inline";
			div.style.zoom = 1;
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "<div style='width:5px;'></div>";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );
		}

		div.style.cssText = positionTopLeftWidthHeight + paddingMarginBorderVisibility;
		div.innerHTML = html;

		outer = div.firstChild;
		inner = outer.firstChild;
		td = outer.nextSibling.firstChild.firstChild;

		offsetSupport = {
			doesNotAddBorder: ( inner.offsetTop !== 5 ),
			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
		};

		inner.style.position = "fixed";
		inner.style.top = "20px";

		// safari subtracts parent border width here which is 5px
		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
		inner.style.position = inner.style.top = "";

		outer.style.overflow = "hidden";
		outer.style.position = "relative";

		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );

		if ( window.getComputedStyle ) {
			div.style.marginTop = "1%";
			support.pixelMargin = ( window.getComputedStyle( div, null ) || { marginTop: 0 } ).marginTop !== "1%";
		}

		if ( typeof container.style.zoom !== "undefined" ) {
			container.style.zoom = 1;
		}

		body.removeChild( container );
		marginDiv = div = container = null;

		jQuery.extend( support, offsetSupport );
	});

	return support;
})();




var rbrace = /^(?:\{.*\}|\[.*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	// Please use with caution
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var privateCache, thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
			isEvents = name === "events";

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = ++jQuery.uuid;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		privateCache = thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Users should not attempt to inspect the internal events object using jQuery.data,
		// it is undocumented and subject to change. But does anyone listen? No.
		if ( isEvents && !thisCache[ name ] ) {
			return privateCache.events;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			// Reference to internal data cache key
			internalKey = jQuery.expando,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,

			// See jQuery.data for more information
			id = isNode ? elem[ internalKey ] : internalKey;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject(cache[ id ]) ) {
				return;
			}
		}

		// Browsers that fail expando deletion also refuse to delete expandos on
		// the window, but it will allow it on all other JS objects; other browsers
		// don't care
		// Ensure that `cache` is not a window object #10080
		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
			delete cache[ id ];
		} else {
			cache[ id ] = null;
		}

		// We destroyed the cache and need to eliminate the expando on the node to avoid
		// false lookups in the cache for entries that no longer exist
		if ( isNode ) {
			// IE does not allow us to delete expando properties from nodes,
			// nor does it have a removeAttribute function on Document nodes;
			// we must handle all of these cases
			if ( jQuery.support.deleteExpando ) {
				delete elem[ internalKey ];
			} else if ( elem.removeAttribute ) {
				elem.removeAttribute( internalKey );
			} else {
				elem[ internalKey ] = null;
			}
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		if ( elem.nodeName ) {
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

			if ( match ) {
				return !(match === true || elem.getAttribute("classid") !== match);
			}
		}

		return true;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, part, attr, name, l,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attr = elem.attributes;
					for ( l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split( ".", 2 );
		parts[1] = parts[1] ? "." + parts[1] : "";
		part = parts[1] + "!";

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				data = this.triggerHandler( "getData" + part, [ parts[0] ] );

				// Try to fetch any internally stored data first
				if ( data === undefined && elem ) {
					data = jQuery.data( elem, key );
					data = dataAttr( elem, key, data );
				}

				return data === undefined && parts[1] ?
					this.data( parts[0] ) :
					data;
			}

			parts[1] = value;
			this.each(function() {
				var self = jQuery( this );

				self.triggerHandler( "setData" + part, parts );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + part, parts );
			});
		}, null, value, arguments.length > 1, null, false );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				jQuery.isNumeric( data ) ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	for ( var name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}




function handleQueueMarkDefer( elem, type, src ) {
	var deferDataKey = type + "defer",
		queueDataKey = type + "queue",
		markDataKey = type + "mark",
		defer = jQuery._data( elem, deferDataKey );
	if ( defer &&
		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
		// Give room for hard-coded callbacks to fire first
		// and eventually mark/queue something else on the element
		setTimeout( function() {
			if ( !jQuery._data( elem, queueDataKey ) &&
				!jQuery._data( elem, markDataKey ) ) {
				jQuery.removeData( elem, deferDataKey, true );
				defer.fire();
			}
		}, 0 );
	}
}

jQuery.extend({

	_mark: function( elem, type ) {
		if ( elem ) {
			type = ( type || "fx" ) + "mark";
			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
		}
	},

	_unmark: function( force, elem, type ) {
		if ( force !== true ) {
			type = elem;
			elem = force;
			force = false;
		}
		if ( elem ) {
			type = type || "fx";
			var key = type + "mark",
				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
			if ( count ) {
				jQuery._data( elem, key, count );
			} else {
				jQuery.removeData( elem, key, true );
				handleQueueMarkDefer( elem, type, "mark" );
			}
		}
	},

	queue: function( elem, type, data ) {
		var q;
		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			q = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !q || jQuery.isArray(data) ) {
					q = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					q.push( data );
				}
			}
			return q || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			fn = queue.shift(),
			hooks = {};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
		}

		if ( fn ) {
			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			jQuery._data( elem, type + ".run", hooks );
			fn.call( elem, function() {
				jQuery.dequeue( elem, type );
			}, hooks );
		}

		if ( !queue.length ) {
			jQuery.removeData( elem, type + "queue " + type + ".run", true );
			handleQueueMarkDefer( elem, type, "queue" );
		}
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, object ) {
		if ( typeof type !== "string" ) {
			object = type;
			type = undefined;
		}
		type = type || "fx";
		var defer = jQuery.Deferred(),
			elements = this,
			i = elements.length,
			count = 1,
			deferDataKey = type + "defer",
			queueDataKey = type + "queue",
			markDataKey = type + "mark",
			tmp;
		function resolve() {
			if ( !( --count ) ) {
				defer.resolveWith( elements, [ elements ] );
			}
		}
		while( i-- ) {
			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
				count++;
				tmp.add( resolve );
			}
		}
		resolve();
		return defer.promise( object );
	}
});




var rclass = /[\n\t\r]/g,
	rspace = /\s+/,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	nodeHook, boolHook, fixSpecified;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, i, l, elem, className, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}

		if ( (value && typeof value === "string") || value === undefined ) {
			classNames = ( value || "" ).split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 && elem.className ) {
					if ( value ) {
						className = (" " + elem.className + " ").replace( rclass, " " );
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							className = className.replace(" " + classNames[ c ] + " ", " ");
						}
						elem.className = jQuery.trim( className );

					} else {
						elem.className = "";
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space seperated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var self = jQuery(this), val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index < 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one && !values.length && options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attrFn: {
		val: true,
		css: true,
		html: true,
		text: true,
		data: true,
		width: true,
		height: true,
		offset: true
	},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && name in jQuery.attrFn ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, "" + value );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, l, isBool,
			i = 0;

		if ( value && elem.nodeType === 1 ) {
			attrNames = value.toLowerCase().split( rspace );
			l = attrNames.length;

			for ( ; i < l; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;
					isBool = rboolean.test( name );

					// See #9699 for explanation of this approach (setting first, then removal)
					// Do not do this for boolean attributes (see #10870)
					if ( !isBool ) {
						jQuery.attr( elem, name, "" );
					}
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( isBool && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true,
		coords: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
				ret.nodeValue :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.nodeValue = value + "" );
		}
	};

	// Apply the nodeHook to tabindex
	jQuery.attrHooks.tabindex.set = nodeHook.set;

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = "" + value );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});




var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
	rhoverHack = /(?:^|\s)hover(\.\S+)?\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
	quickParse = function( selector ) {
		var quick = rquickIs.exec( selector );
		if ( quick ) {
			//   0  1    2   3
			// [ _, tag, id, class ]
			quick[1] = ( quick[1] || "" ).toLowerCase();
			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
		}
		return quick;
	},
	quickIs = function( elem, m ) {
		var attrs = elem.attributes || {};
		return (
			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
			(!m[2] || (attrs.id || {}).value === m[2]) &&
			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
		);
	},
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, quick, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				quick: selector && quickParse( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
			t, tns, type, origType, namespaces, origCount,
			j, events, special, handle, eventType, handleObj;

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			handle = elemData.handle;
			if ( handle ) {
				handle.elem = null;
			}

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, [ "events", "handle" ], true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var type = event.type || event,
			namespaces = [],
			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			old = null;
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old && old === elem.ownerDocument ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					if (!(window.Hammerhead && window.Hammerhead.Util.isDocumentInstance(elem)) || type !== 'ready')
						elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = [].slice.call( arguments, 0 ),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[ event.type ] || {},
			handlerQueue = [],
			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers that should run if there are delegated events
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !(event.button && event.type === "click") ) {

			// Pregenerate a single jQuery object for reuse with .is()
			jqcur = jQuery(this);
			jqcur.context = this.ownerDocument || this;

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

				// Don't process events on disabled elements (#6911, #8165)
				if ( cur.disabled !== true ) {
					selMatch = {};
					matches = [];
					jqcur[0] = cur;
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];
						sel = handleObj.selector;

						if ( selMatch[ sel ] === undefined ) {
							selMatch[ sel ] = (
								handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
							);
						}
						if ( selMatch[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, matches: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
		if ( event.metaKey === undefined ) {
			event.metaKey = event.ctrlKey;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: jQuery.bindReady
		},

		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		if ( elem.detachEvent ) {
			elem.detachEvent( "on" + type, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector,
				ret;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !form._submit_attached ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					form._submit_attached = true;
				}
			});
			// return undefined since we don't need an event listener
		},
		
		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
							jQuery.event.simulate( "change", this, event, true );
						}
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					elem._change_attached = true;
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) { // && selector != null
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			var handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( var type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( jQuery.attrFn ) {
		jQuery.attrFn[ name ] = true;
	}

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});



/*!
 * Sizzle CSS Selector Engine
 *  Copyright 2011, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true,
	rBackslash = /\\/g,
	rReturn = /\r\n/g,
	rNonWord = /\W/;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function( selector, context, results, seed ) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;

	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];

			parts.push( m[1] );

			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {

		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context, seed );

		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}

				set = posProcess( selector, set, seed );
			}
		}

	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray( set );

			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}

		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}

	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function( expr, set ) {
	return Sizzle( expr, null, null, set );
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function( expr, context, isXML ) {
	var set, i, len, match, type, left;

	if ( !expr ) {
		return [];
	}

	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
		type = Expr.order[i];

		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace( rBackslash, "" );
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( "*" ) :
			[];
	}

	return { set: set, expr: expr };
};

Sizzle.filter = function( expr, set, inplace, not ) {
	var match, anyFound,
		type, found, item, filter, left,
		i, pass,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				filter = Expr.filter[ type ];
				left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;

					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							pass = not ^ found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;

								} else {
									curLoop[i] = false;
								}

							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Utility function for retreiving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
var getText = Sizzle.getText = function( elem ) {
    var i, node,
		nodeType = elem.nodeType,
		ret = "";

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent || innerText for elements
			if ( typeof elem.textContent === 'string' ) {
				return elem.textContent;
			} else if ( typeof elem.innerText === 'string' ) {
				// Replace IE's carriage returns
				return elem.innerText.replace( rReturn, '' );
			} else {
				// Traverse it's children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
	} else {

		// If no nodeType, this is expected to be an array
		for ( i = 0; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			if ( node.nodeType !== 8 ) {
				ret += getText( node );
			}
		}
	}
	return ret;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],

	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},

	attrHandle: {
		href: function( elem ) {
			return elem.getAttribute( "href" );
		},
		type: function( elem ) {
			return elem.getAttribute( "type" );
		}
	},

	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !rNonWord.test( part ),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},

		">": function( checkSet, part ) {
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !rNonWord.test( part ) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}

			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},

		"": function(checkSet, part, isXML){
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
		},

		"~": function( checkSet, part, isXML ) {
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
		}
	},

	find: {
		ID: function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		},

		NAME: function( match, context ) {
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},

		TAG: function( match, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( match[1] );
			}
		}
	},
	preFilter: {
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
			match = " " + match[1].replace( rBackslash, "" ) + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},

		ID: function( match ) {
			return match[1].replace( rBackslash, "" );
		},

		TAG: function( match, curLoop ) {
			return match[1].replace( rBackslash, "" ).toLowerCase();
		},

		CHILD: function( match ) {
			if ( match[1] === "nth" ) {
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				match[2] = match[2].replace(/^\+|\s*/g, '');

				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}
			else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},

		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
			var name = match[1] = match[1].replace( rBackslash, "" );

			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			// Handle if an un-quoted value was used
			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},

		PSEUDO: function( match, curLoop, inplace, result, not ) {
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);

				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

					if ( !inplace ) {
						result.push.apply( result, ret );
					}

					return false;
				}

			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}

			return match;
		},

		POS: function( match ) {
			match.unshift( true );

			return match;
		}
	},

	filters: {
		enabled: function( elem ) {
			return elem.disabled === false && elem.type !== "hidden";
		},

		disabled: function( elem ) {
			return elem.disabled === true;
		},

		checked: function( elem ) {
			return elem.checked === true;
		},

		selected: function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		parent: function( elem ) {
			return !!elem.firstChild;
		},

		empty: function( elem ) {
			return !elem.firstChild;
		},

		has: function( elem, i, match ) {
			return !!Sizzle( match[3], elem ).length;
		},

		header: function( elem ) {
			return (/h\d/i).test( elem.nodeName );
		},

		text: function( elem ) {
			var attr = elem.getAttribute( "type" ), type = elem.type;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
		},

		radio: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
		},

		checkbox: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
		},

		file: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
		},

		password: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
		},

		submit: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "submit" === elem.type;
		},

		image: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
		},

		reset: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "reset" === elem.type;
		},

		button: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && "button" === elem.type || name === "button";
		},

		input: function( elem ) {
			return (/input|select|textarea|button/i).test( elem.nodeName );
		},

		focus: function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		}
	},
	setFilters: {
		first: function( elem, i ) {
			return i === 0;
		},

		last: function( elem, i, match, array ) {
			return i === array.length - 1;
		},

		even: function( elem, i ) {
			return i % 2 === 0;
		},

		odd: function( elem, i ) {
			return i % 2 === 1;
		},

		lt: function( elem, i, match ) {
			return i < match[3] - 0;
		},

		gt: function( elem, i, match ) {
			return i > match[3] - 0;
		},

		nth: function( elem, i, match ) {
			return match[3] - 0 === i;
		},

		eq: function( elem, i, match ) {
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function( elem, match, i, array ) {
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );

			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( name );
			}
		},

		CHILD: function( elem, match ) {
			var first, last,
				doneName, parent, cache,
				count, diff,
				type = match[1],
				node = elem;

			switch ( type ) {
				case "only":
				case "first":
					while ( (node = node.previousSibling) ) {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					if ( type === "first" ) {
						return true;
					}

					node = elem;

					/* falls through */
				case "last":
					while ( (node = node.nextSibling) ) {
						if ( node.nodeType === 1 ) {
							return false;
						}
					}

					return true;

				case "nth":
					first = match[2];
					last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}

					doneName = match[0];
					parent = elem.parentNode;

					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
						count = 0;

						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						}

						parent[ expando ] = doneName;
					}

					diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},

		ID: function( elem, match ) {
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},

		TAG: function( elem, match ) {
			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
		},

		CLASS: function( elem, match ) {
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},

		ATTR: function( elem, match ) {
			var name = match[1],
				result = Sizzle.attr ?
					Sizzle.attr( elem, name ) :
					Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				!type && Sizzle.attr ?
				result != null :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},

		POS: function( elem, match, i, array ) {
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}
// Expose origPOS
// "global" as in regardless of relation to brackets/parens
Expr.match.globalPOS = origPOS;

var makeArray = function( array, results ) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}

	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch( e ) {
	makeArray = function( array, results ) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );

		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}

			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};

} else {
	sortOrder = function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function( elem, match ) {
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	// release memory in IE
	root = form = null;
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function( match, context ) {
			var results = context.getElementsByTagName( match[1] );

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";

	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {

		Expr.attrHandle.href = function( elem ) {
			return elem.getAttribute( "href", 2 );
		};
	}

	// release memory in IE
	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}

		Sizzle = function( query, context, extra, seed ) {
			context = context || document;

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && !Sizzle.isXML(context) ) {
				// See if we find a selector to speed up
				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );

				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
					// Speed-up: Sizzle("TAG")
					if ( match[1] ) {
						return makeArray( context.getElementsByTagName( query ), extra );

					// Speed-up: Sizzle(".CLASS")
					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
						return makeArray( context.getElementsByClassName( match[2] ), extra );
					}
				}

				if ( context.nodeType === 9 ) {
					// Speed-up: Sizzle("body")
					// The body element only exists once, optimize finding it
					if ( query === "body" && context.body ) {
						return makeArray( [ context.body ], extra );

					// Speed-up: Sizzle("#ID")
					} else if ( match && match[3] ) {
						var elem = context.getElementById( match[3] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id === match[3] ) {
								return makeArray( [ elem ], extra );
							}

						} else {
							return makeArray( [], extra );
						}
					}

					try {
						return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var oldContext = context,
						old = context.getAttribute( "id" ),
						nid = old || id,
						hasParent = context.parentNode,
						relativeHierarchySelector = /^\s*[+~]/.test( query );

					if ( !old ) {
						context.setAttribute( "id", nid );
					} else {
						nid = nid.replace( /'/g, "\\$&" );
					}
					if ( relativeHierarchySelector && hasParent ) {
						context = context.parentNode;
					}

					try {
						if ( !relativeHierarchySelector || hasParent ) {
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
						}

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							oldContext.removeAttribute( "id" );
						}
					}
				}
			}

			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		// release memory in IE
		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;

	if ( matches ) {
		// Check to see if it's possible to do matchesSelector
		// on a disconnected node (IE 9 fails this)
		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
			pseudoWorks = false;

		try {
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( document.documentElement, "[test!='']:sizzle" );

		} catch( pseudoError ) {
			pseudoWorks = true;
		}

		Sizzle.matchesSelector = function( node, expr ) {
			// Make sure that attribute selectors are quoted
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try {
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						var ret = matches.call( node, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || !disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9, so check for that
								node.document && node.document.nodeType !== 11 ) {
							return ret;
						}
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}

	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function( match, context, isXML ) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	// release memory in IE
	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem[ expando ] = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem[ expando ] = doneName;
						elem.sizset = i;
					}

					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
		return a !== b && (a.contains ? a.contains(b) : true);
	};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function( selector, context, seed ) {
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet, seed );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
Sizzle.selectors.attrMap = {};
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})();


var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.globalPOS,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self = this,
			i, l;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		var ret = this.pushStack( "", "find", selector ),
			length, n, r;

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target );
		return this.filter(function() {
			for ( var i = 0, l = targets.length; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				POS.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var ret = [], i, l, cur = this[0];

		// Array (deprecated as of jQuery 1.7)
		if ( jQuery.isArray( selectors ) ) {
			var level = 1;

			while ( cur && cur.ownerDocument && cur !== context ) {
				for ( i = 0; i < selectors.length; i++ ) {

					if ( jQuery( cur ).is( selectors[ i ] ) ) {
						ret.push({ selector: selectors[ i ], elem: cur, level: level });
					}
				}

				cur = cur.parentNode;
				level++;
			}

			return ret;
		}

		// String
		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( i = 0, l = this.length; i < l; i++ ) {
			cur = this[i];

			while ( cur ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;

				} else {
					cur = cur.parentNode;
					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
						break;
					}
				}
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	andSelf: function() {
		return this.add( this.prevObject );
	}
});

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return jQuery.nth( elem, 2, "nextSibling" );
	},
	prev: function( elem ) {
		return jQuery.nth( elem, 2, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray( elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	nth: function( cur, result, dir, elem ) {
		result = result || 1;
		var num = 0;

		for ( ; cur; cur = cur[dir] ) {
			if ( cur.nodeType === 1 && ++num === result ) {
				break;
			}
		}

		return cur;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}




function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "div<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		} else if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			set.push.apply( set, this.toArray() );
			return this.pushStack( set, "before", arguments );
		}
	},

	after: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		} else if ( arguments.length ) {
			var set = this.pushStack( this, "after", arguments );
			set.push.apply( set, jQuery.clean(arguments) );
			return set;
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					null;
			}


			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( elem.getElementsByTagName( "*" ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		if ( this[0] && this[0].parentNode ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		} else {
			return this.length ?
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
				this;
		}
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {
		var results, first, fragment, parent,
			value = args[0],
			scripts = [];

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback, true );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call(this, i, table ? self.html() : undefined);
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			parent = value && value.parentNode;

			// If we're in a fragment, just use that instead of building a new one
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
				results = { fragment: parent };

			} else {
				results = jQuery.buildFragment( args, this, scripts );
			}

			fragment = results.fragment;

			if ( fragment.childNodes.length === 1 ) {
				first = fragment = fragment.firstChild;
			} else {
				first = fragment.firstChild;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
					callback.call(
						table ?
							root(this[i], first) :
							this[i],
						// Make sure that we do not leak memory by inadvertently discarding
						// the original fragment (which might have attached data) instead of
						// using it; in addition, use the original fragment object for the last
						// item instead of first because it can end up being emptied incorrectly
						// in certain situations (Bug #8070).
						// Fragments from the fragment cache must always be cloned and never used
						// in place.
						results.cacheable || ( l > 1 && i < lastIndex ) ?
							jQuery.clone( fragment, true, true ) :
							fragment
					);
				}
			}

			if ( scripts.length ) {
				jQuery.each( scripts, function( i, elem ) {
					if ( elem.src ) {
						jQuery.ajax({
							type: "GET",
							global: false,
							url: elem.src,
							async: false,
							dataType: "script"
						});
					} else {
						jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
					}

					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				});
			}
		}

		return this;
	}
});

function root( elem, cur ) {
	return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 fail to clone children inside object elements that use
	// the proprietary classid attribute value (rather than the type
	// attribute) to identify the type of content to display
	if ( nodeName === "object" ) {
		dest.outerHTML = src.outerHTML;

	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set
		if ( src.checked ) {
			dest.defaultChecked = dest.checked = src.checked;
		}

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;

	// IE blanks contents when cloning scripts
	} else if ( nodeName === "script" && dest.text !== src.text ) {
		dest.text = src.text;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );

	// Clear flags for bubbling special change/submit events, they must
	// be reattached when the newly cloned events are first activated
	dest.removeAttribute( "_submit_attached" );
	dest.removeAttribute( "_change_attached" );
}

jQuery.buildFragment = function( args, nodes, scripts ) {
	var fragment, cacheable, cacheresults, doc,
	first = args[ 0 ];

	// nodes may contain either an explicit document object,
	// a jQuery collection or context object.
	// If nodes[0] contains a valid object to assign to doc
	if ( nodes && nodes[0] ) {
		doc = nodes[0].ownerDocument || nodes[0];
	}

	// Ensure that an attr object doesn't incorrectly stand in as a document object
	// Chrome and Firefox seem to allow this to occur and will throw exception
	// Fixes #8950
	if ( !doc.createDocumentFragment ) {
		doc = document;
	}

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		cacheable = true;

		cacheresults = jQuery.fragments[ first ];
		if ( cacheresults && cacheresults !== 1 ) {
			fragment = cacheresults;
		}
	}

	if ( !fragment ) {
		fragment = doc.createDocumentFragment();
		jQuery.clean( args, doc, fragment, scripts );
	}

	if ( cacheable ) {
		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var ret = [],
			insert = jQuery( selector ),
			parent = this.length === 1 && this[0].parentNode;

		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
			insert[ original ]( this[0] );
			return this;

		} else {
			for ( var i = 0, l = insert.length; i < l; i++ ) {
				var elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( elem.type === "checkbox" || elem.type === "radio" ) {
		elem.defaultChecked = elem.checked;
	}
}
// Finds all inputs and passes them to fixDefaultChecked
function findInputs( elem ) {
	var nodeName = ( elem.nodeName || "" ).toLowerCase();
	if ( nodeName === "input" ) {
		fixDefaultChecked( elem );
	// Skip scripts, get other children
	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
	}
}

// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
function shimCloneNode( elem ) {
	var div = document.createElement( "div" );
	safeFragment.appendChild( div );

	div.innerHTML = elem.outerHTML;
	return div.firstChild;
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			// IE<=8 does not properly clone detached, unknown element nodes
			clone = jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ?
				elem.cloneNode( true ) :
				shimCloneNode( elem );

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var checkScriptType, script, j,
				ret = [];

		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" ) {
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
		}

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Trim whitespace, otherwise indexOf won't work as expected
					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
						wrap = wrapMap[ tag ] || wrapMap._default,
						depth = wrap[0],
						div = context.createElement("div"),
						safeChildNodes = safeFragment.childNodes,
						remove;

					// Append wrapper element to unknown element safe doc fragment
					if ( context === document ) {
						// Use the fragment we've already created for this document
						safeFragment.appendChild( div );
					} else {
						// Use a fragment created with the owner document
						createSafeFragment( context ).appendChild( div );
					}

					// Go to html and back, then peel off extra wrappers
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						var hasBody = rtbody.test(elem),
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;

					// Clear elements from DocumentFragment (safeFragment or otherwise)
					// to avoid hoarding elements. Fixes #11356
					if ( div ) {
						div.parentNode.removeChild( div );

						// Guard against -1 index exceptions in FF3.6
						if ( safeChildNodes.length > 0 ) {
							remove = safeChildNodes[ safeChildNodes.length - 1 ];

							if ( remove && remove.parentNode ) {
								remove.parentNode.removeChild( remove );
							}
						}
					}
				}
			}

			// Resets defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			var len;
			if ( !jQuery.support.appendChecked ) {
				if ( elem[0] && typeof (len = elem.length) === "number" ) {
					for ( j = 0; j < len; j++ ) {
						findInputs( elem[j] );
					}
				} else {
					findInputs( elem );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				ret = jQuery.merge( ret, elem );
			}
		}

		if ( fragment ) {
			checkScriptType = function( elem ) {
				return !elem.type || rscriptType.test( elem.type );
			};
			for ( i = 0; ret[i]; i++ ) {
				script = ret[i];
				if ( scripts && jQuery.nodeName( script, "script" ) && (!script.type || rscriptType.test( script.type )) ) {
					scripts.push( script.parentNode ? script.parentNode.removeChild( script ) : script );

				} else {
					if ( script.nodeType === 1 ) {
						var jsTags = jQuery.grep( script.getElementsByTagName( "script" ), checkScriptType );

						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
					}
					fragment.appendChild( script );
				}
			}
		}

		return ret;
	},

	cleanData: function( elems ) {
		var data, id,
			cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
				continue;
			}

			id = elem[ jQuery.expando ];

			if ( id ) {
				data = cache[ id ];

				if ( data && data.events ) {
					for ( var type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}

					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
					if ( data.handle ) {
						data.handle.elem = null;
					}
				}

				if ( deleteExpando ) {
					delete elem[ jQuery.expando ];

				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( jQuery.expando );
				}

				delete cache[ id ];
			}
		}
	}
});




var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	// fixed for IE9, see #8346
	rupper = /([A-Z]|^ms)/g,
	rnum = /^[\-+]?(?:\d*\.)?\d+$/i,
	rnumnonpx = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,
	rrelNum = /^([\-+])=([\-+.\de]+)/,
	rmargin = /^margin/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },

	// order is important!
	cssExpand = [ "Top", "Right", "Bottom", "Left" ],

	curCSS,

	getComputedStyle,
	currentStyle;

jQuery.fn.css = function( name, value ) {
	return jQuery.access( this, function( elem, name, value ) {
		return value !== undefined ?
			jQuery.style( elem, name, value ) :
			jQuery.css( elem, name );
	}, name, value, arguments.length > 1 );
};

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;

				} else {
					return elem.style.opacity;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, origName = jQuery.camelCase( name ),
			style = elem.style, hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra ) {
		var ret, hooks;

		// Make sure that we're working with the right name
		name = jQuery.camelCase( name );
		hooks = jQuery.cssHooks[ name ];
		name = jQuery.cssProps[ name ] || name;

		// cssFloat needs a special treatment
		if ( name === "cssFloat" ) {
			name = "float";
		}

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
			return ret;

		// Otherwise, if a way to get the computed value exists, use that
		} else if ( curCSS ) {
			return curCSS( elem, name );
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {},
			ret, name;

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// DEPRECATED in 1.3, Use jQuery.css() instead
jQuery.curCSS = jQuery.css;

if ( document.defaultView && document.defaultView.getComputedStyle ) {
	getComputedStyle = function( elem, name ) {
		var ret, defaultView, computedStyle, width,
			style = elem.style;

		name = name.replace( rupper, "-$1" ).toLowerCase();

		if ( (defaultView = elem.ownerDocument.defaultView) &&
				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {

			ret = computedStyle.getPropertyValue( name );
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
				ret = jQuery.style( elem, name );
			}
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// WebKit uses "computed value (percentage if specified)" instead of "used value" for margins
		// which is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !jQuery.support.pixelMargin && computedStyle && rmargin.test( name ) && rnumnonpx.test( ret ) ) {
			width = style.width;
			style.width = ret;
			ret = computedStyle.width;
			style.width = width;
		}

		return ret;
	};
}

if ( document.documentElement.currentStyle ) {
	currentStyle = function( elem, name ) {
		var left, rsLeft, uncomputed,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && (uncomputed = style[ name ]) ) {
			ret = uncomputed;
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		if ( rnumnonpx.test( ret ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

curCSS = getComputedStyle || currentStyle;

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		i = name === "width" ? 1 : 0,
		len = 4;

	if ( val > 0 ) {
		if ( extra !== "border" ) {
			for ( ; i < len; i += 2 ) {
				if ( !extra ) {
					val -= parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
				}
				if ( extra === "margin" ) {
					val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ] ) ) || 0;
				} else {
					val -= parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
				}
			}
		}

		return val + "px";
	}

	// Fall back to computed then uncomputed css if necessary
	val = curCSS( elem, name );
	if ( val < 0 || val == null ) {
		val = elem.style[ name ];
	}

	// Computed unit is not pixels. Stop here and return.
	if ( rnumnonpx.test(val) ) {
		return val;
	}

	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Add padding, border, margin
	if ( extra ) {
		for ( ; i < len; i += 2 ) {
			val += parseFloat( jQuery.css( elem, "padding" + cssExpand[ i ] ) ) || 0;
			if ( extra !== "padding" ) {
				val += parseFloat( jQuery.css( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
			if ( extra === "margin" ) {
				val += parseFloat( jQuery.css( elem, extra + cssExpand[ i ]) ) || 0;
			}
		}
	}

	return val + "px";
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				if ( elem.offsetWidth !== 0 ) {
					return getWidthOrHeight( elem, name, extra );
				} else {
					return jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					});
				}
			}
		},

		set: function( elem, value ) {
			return rnum.test( value ) ?
				value + "px" :
				value;
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( parseFloat( RegExp.$1 ) / 100 ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery(function() {
	// This hook cannot be added until DOM ready because the support test
	// for it is not run until after DOM ready
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						return curCSS( elem, "margin-right" );
					} else {
						return elem.style.marginRight;
					}
				});
			}
		};
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		var width = elem.offsetWidth,
			height = elem.offsetHeight;

		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {

	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ],
				expanded = {};

			for ( i = 0; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};
});




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rspacesAjax = /\s+/,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Document location
	ajaxLocation,

	// Document location segments
	ajaxLocParts,

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		if ( jQuery.isFunction( func ) ) {
			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
				i = 0,
				length = dataTypes.length,
				dataType,
				list,
				placeBefore;

			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters ),
		selection;

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.extend({
	load: function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );

		// Don't do a request if no elements are being requested
		} else if ( !this.length ) {
			return this;
		}

		var off = url.indexOf( " " );
		if ( off >= 0 ) {
			var selector = url.slice( off, url.length );
			url = url.slice( 0, off );
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params ) {
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = undefined;

			// Otherwise, build a param string
			} else if ( typeof params === "object" ) {
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
				type = "POST";
			}
		}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			// Complete callback (responseText is used internally)
			complete: function( jqXHR, status, responseText ) {
				// Store the response as specified by the jqXHR object
				responseText = jqXHR.responseText;
				// If successful, inject the HTML into all the matched elements
				if ( jqXHR.isResolved() ) {
					// #4825: Get the actual response in case
					// a dataFilter is present in ajaxSettings
					jqXHR.done(function( r ) {
						responseText = r;
					});
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(responseText.replace(rscript, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						responseText );
				}

				if ( callback ) {
					self.each( callback, [ responseText, status, jqXHR ] );
				}
			}
		});

		return this;
	},

	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},

	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// ifModified key
			ifModifiedKey,
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// The jqXHR state
			state = 0,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || "abort";
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			var isSuccess,
				success,
				error,
				statusText = nativeStatusText,
				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
				lastModified,
				etag;

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
						jQuery.lastModified[ ifModifiedKey ] = lastModified;
					}
					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
						jQuery.etag[ ifModifiedKey ] = etag;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					try {
						success = ajaxConvert( s, response );
						statusText = "success";
						isSuccess = true;
					} catch(e) {
						// We have a parsererror
						statusText = "parsererror";
						error = e;
					}
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = "" + ( nativeStatusText || statusText );

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.then( tmp, tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );

		// Determine if a cross-domain request is in order
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return false;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already
				jqXHR.abort();
				return false;

		}

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a, traditional ) {
		var s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : value;
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( var prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	}
});

function buildParams( prefix, obj, traditional, add ) {
	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( var name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields,
		ct,
		type,
		finalDataType,
		firstDataType;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	var dataTypes = s.dataTypes,
		converters = {},
		i,
		key,
		length = dataTypes.length,
		tmp,
		// Current and previous dataTypes
		current = dataTypes[ 0 ],
		prev,
		// Conversion expression
		conversion,
		// Conversion function
		conv,
		// Conversion functions (transitive conversion)
		conv1,
		conv2;

	// For each dataType in the chain
	for ( i = 1; i < length; i++ ) {

		// Create converters map
		// with lowercased keys
		if ( i === 1 ) {
			for ( key in s.converters ) {
				if ( typeof key === "string" ) {
					converters[ key.toLowerCase() ] = s.converters[ key ];
				}
			}
		}

		// Get the dataTypes
		prev = current;
		current = dataTypes[ i ];

		// If current is auto dataType, update it to prev
		if ( current === "*" ) {
			current = prev;
		// If no auto and dataTypes are actually different
		} else if ( prev !== "*" && prev !== current ) {

			// Get the converter
			conversion = prev + " " + current;
			conv = converters[ conversion ] || converters[ "* " + current ];

			// If there is no direct converter, search transitively
			if ( !conv ) {
				conv2 = undefined;
				for ( conv1 in converters ) {
					tmp = conv1.split( " " );
					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
						conv2 = converters[ tmp[1] + " " + current ];
						if ( conv2 ) {
							conv1 = converters[ conv1 ];
							if ( conv1 === true ) {
								conv = conv2;
							} else if ( conv2 === true ) {
								conv = conv1;
							}
							break;
						}
					}
				}
			}
			// If we found no converter, dispatch an error
			if ( !( conv || conv2 ) ) {
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
			}
			// If found converter is not an equivalence
			if ( conv !== true ) {
				// Convert with 1 or 2 converters accordingly
				response = conv ? conv( response ) : conv2( conv1(response) );
			}
		}
	}
	return response;
}




var jsc = jQuery.now(),
	jsre = /(\=)\?(&|$)|\?\?/i;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		return jQuery.expando + "_" + ( jsc++ );
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var inspectData = ( typeof s.data === "string" ) && /^application\/x\-www\-form\-urlencoded/.test( s.contentType );

	if ( s.dataTypes[ 0 ] === "jsonp" ||
		s.jsonp !== false && ( jsre.test( s.url ) ||
				inspectData && jsre.test( s.data ) ) ) {

		var responseContainer,
			jsonpCallback = s.jsonpCallback =
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
			previous = window[ jsonpCallback ],
			url = s.url,
			data = s.data,
			replace = "$1" + jsonpCallback + "$2";

		if ( s.jsonp !== false ) {
			url = url.replace( jsre, replace );
			if ( s.url === url ) {
				if ( inspectData ) {
					data = data.replace( jsre, replace );
				}
				if ( s.data === data ) {
					// Add callback manually
					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
				}
			}
		}

		s.url = url;
		s.data = data;

		// Install callback
		window[ jsonpCallback ] = function( response ) {
			responseContainer = [ response ];
		};

		// Clean-up function
		jqXHR.always(function() {
			// Set callback back to previous value
			window[ jsonpCallback ] = previous;
			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( previous ) ) {
				window[ jsonpCallback ]( responseContainer[ 0 ] );
			}
		});

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( jsonpCallback + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Delegate to script
		return "script";
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});




var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0,
	xhrCallbacks;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var xhr = s.xhr(),
						handle,
						i;

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occured
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									try {
										responses.text = xhr.responseText;
									} catch( _ ) {
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					// if we're in sync mode or it's in cache
					// and has been retrieved directly (IE6 & IE7)
					// we need to manually fire the callback
					if ( !s.async || xhr.readyState === 4 ) {
						callback();
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}




var elemdisplay = {},
	iframe, iframeDoc,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	],
	fxNow;

jQuery.fn.extend({
	show: function( speed, easing, callback ) {
		var elem, display;

		if ( speed || speed === 0 ) {
			return this.animate( genFx("show", 3), speed, easing, callback );

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
						display = elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if ( (display === "" && jQuery.css(elem, "display") === "none") ||
						!jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					if ( display === "" || display === "none" ) {
						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
					}
				}
			}

			return this;
		}
	},

	hide: function( speed, easing, callback ) {
		if ( speed || speed === 0 ) {
			return this.animate( genFx("hide", 3), speed, easing, callback);

		} else {
			var elem, display,
				i = 0,
				j = this.length;

			for ( ; i < j; i++ ) {
				elem = this[i];
				if ( elem.style ) {
					display = jQuery.css( elem, "display" );

					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
						jQuery._data( elem, "olddisplay", display );
					}
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				if ( this[i].style ) {
					this[i].style.display = "none";
				}
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2, callback ) {
		var bool = typeof fn === "boolean";

		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
			this._toggle.apply( this, arguments );

		} else if ( fn == null || bool ) {
			this.each(function() {
				var state = bool ? fn : jQuery(this).is(":hidden");
				jQuery(this)[ state ? "show" : "hide" ]();
			});

		} else {
			this.animate(genFx("toggle", 3), fn, fn2, callback);
		}

		return this;
	},

	fadeTo: function( speed, to, easing, callback ) {
		return this.filter(":hidden").css("opacity", 0).show().end()
					.animate({opacity: to}, speed, easing, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed( speed, easing, callback );

		if ( jQuery.isEmptyObject( prop ) ) {
			return this.each( optall.complete, [ false ] );
		}

		// Do not change referenced properties as per-property easing will be lost
		prop = jQuery.extend( {}, prop );

		function doAnimation() {
			// XXX 'this' does not always have a nodeName when running the
			// test suite

			if ( optall.queue === false ) {
				jQuery._mark( this );
			}

			var opt = jQuery.extend( {}, optall ),
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				name, val, p, e, hooks, replace,
				parts, start, end, unit,
				method;

			// will store per property easing and be used to determine when an animation is complete
			opt.animatedProperties = {};

			// first pass over propertys to expand / normalize
			for ( p in prop ) {
				name = jQuery.camelCase( p );
				if ( p !== name ) {
					prop[ name ] = prop[ p ];
					delete prop[ p ];
				}

				if ( ( hooks = jQuery.cssHooks[ name ] ) && "expand" in hooks ) {
					replace = hooks.expand( prop[ name ] );
					delete prop[ name ];

					// not quite $.extend, this wont overwrite keys already present.
					// also - reusing 'p' from above because we have the correct "name"
					for ( p in replace ) {
						if ( ! ( p in prop ) ) {
							prop[ p ] = replace[ p ];
						}
					}
				}
			}

			for ( name in prop ) {
				val = prop[ name ];
				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
				if ( jQuery.isArray( val ) ) {
					opt.animatedProperties[ name ] = val[ 1 ];
					val = prop[ name ] = val[ 0 ];
				} else {
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
				}

				if ( val === "hide" && hidden || val === "show" && !hidden ) {
					return opt.complete.call( this );
				}

				if ( isElement && ( name === "height" || name === "width" ) ) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE does not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height animated
					if ( jQuery.css( this, "display" ) === "inline" &&
							jQuery.css( this, "float" ) === "none" ) {

						// inline-level elements accept inline-block;
						// block-level elements need to be inline with layout
						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
							this.style.display = "inline-block";

						} else {
							this.style.zoom = 1;
						}
					}
				}
			}

			if ( opt.overflow != null ) {
				this.style.overflow = "hidden";
			}

			for ( p in prop ) {
				e = new jQuery.fx( this, opt, p );
				val = prop[ p ];

				if ( rfxtypes.test( val ) ) {

					// Tracks whether to show or hide based on private
					// data attached to the element
					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
					if ( method ) {
						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
						e[ method ]();
					} else {
						e[ val ]();
					}

				} else {
					parts = rfxnum.exec( val );
					start = e.cur();

					if ( parts ) {
						end = parseFloat( parts[2] );
						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );

						// We need to compute starting value
						if ( unit !== "px" ) {
							jQuery.style( this, p, (end || 1) + unit);
							start = ( (end || 1) / e.cur() ) * start;
							jQuery.style( this, p, start + unit);
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] ) {
							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
						}

						e.custom( start, end, unit );

					} else {
						e.custom( start, val, "" );
					}
				}
			}

			// For JS strict compliance
			return true;
		}

		return optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},

	stop: function( type, clearQueue, gotoEnd ) {
		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var index,
				hadTimers = false,
				timers = jQuery.timers,
				data = jQuery._data( this );

			// clear marker counters if we know they won't be
			if ( !gotoEnd ) {
				jQuery._unmark( true, this );
			}

			function stopQueue( elem, data, index ) {
				var hooks = data[ index ];
				jQuery.removeData( elem, index, true );
				hooks.stop( gotoEnd );
			}

			if ( type == null ) {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
						stopQueue( this, data, index );
					}
				}
			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
				stopQueue( this, data, index );
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					if ( gotoEnd ) {

						// force the next step to be the last
						timers[ index ]( true );
					} else {
						timers[ index ].saveState();
					}
					hadTimers = true;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( !( gotoEnd && hadTimers ) ) {
				jQuery.dequeue( this, type );
			}
		});
	}

});

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout( clearFxNow, 0 );
	return ( fxNow = jQuery.now() );
}

function clearFxNow() {
	fxNow = undefined;
}

// Generate parameters to create a standard animation
function genFx( type, num ) {
	var obj = {};

	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
		obj[ this ] = type;
	});

	return obj;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx( "show", 1 ),
	slideUp: genFx( "hide", 1 ),
	slideToggle: genFx( "toggle", 1 ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.extend({
	speed: function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function( noUnmark ) {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			} else if ( noUnmark !== false ) {
				jQuery._unmark( this );
			}
		};

		return opt;
	},

	easing: {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return ( -Math.cos( p*Math.PI ) / 2 ) + 0.5;
		}
	},

	timers: [],

	fx: function( elem, options, prop ) {
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		options.orig = options.orig || {};
	}

});

jQuery.fx.prototype = {
	// Simple function for setting a style value
	update: function() {
		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
	},

	// Get the current size
	cur: function() {
		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
			return this.elem[ this.prop ];
		}

		var parsed,
			r = jQuery.css( this.elem, this.prop );
		// Empty strings, null, undefined and "auto" are converted to 0,
		// complex values such as "rotate(1rad)" are returned as is,
		// simple values such as "10px" are parsed to Float.
		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
	},

	// Start an animation from one number to another
	custom: function( from, to, unit ) {
		var self = this,
			fx = jQuery.fx;

		this.startTime = fxNow || createFxNow();
		this.end = to;
		this.now = this.start = from;
		this.pos = this.state = 0;
		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );

		function t( gotoEnd ) {
			return self.step( gotoEnd );
		}

		t.queue = this.options.queue;
		t.elem = this.elem;
		t.saveState = function() {
			if ( jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
				if ( self.options.hide ) {
					jQuery._data( self.elem, "fxshow" + self.prop, self.start );
				} else if ( self.options.show ) {
					jQuery._data( self.elem, "fxshow" + self.prop, self.end );
				}
			}
		};

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval( fx.tick, fx.interval );
		}
	},

	// Simple 'show' function
	show: function() {
		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );

		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any flash of content
		if ( dataShow !== undefined ) {
			// This show is picking up where a previous hide or show left off
			this.custom( this.cur(), dataShow );
		} else {
			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
		}

		// Start by showing the element
		jQuery( this.elem ).show();
	},

	// Simple 'hide' function
	hide: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom( this.cur(), 0 );
	},

	// Each step of an animation
	step: function( gotoEnd ) {
		var p, n, complete,
			t = fxNow || createFxNow(),
			done = true,
			elem = this.elem,
			options = this.options;

		if ( gotoEnd || t >= options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			options.animatedProperties[ this.prop ] = true;

			for ( p in options.animatedProperties ) {
				if ( options.animatedProperties[ p ] !== true ) {
					done = false;
				}
			}

			if ( done ) {
				// Reset the overflow
				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {

					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
						elem.style[ "overflow" + value ] = options.overflow[ index ];
					});
				}

				// Hide the element if the "hide" operation was done
				if ( options.hide ) {
					jQuery( elem ).hide();
				}

				// Reset the properties, if the item has been hidden or shown
				if ( options.hide || options.show ) {
					for ( p in options.animatedProperties ) {
						jQuery.style( elem, p, options.orig[ p ] );
						jQuery.removeData( elem, "fxshow" + p, true );
						// Toggle data is no longer needed
						jQuery.removeData( elem, "toggle" + p, true );
					}
				}

				// Execute the complete function
				// in the event that the complete function throws an exception
				// we must ensure it won't be called twice. #5684

				complete = options.complete;
				if ( complete ) {

					options.complete = false;
					complete.call( elem );
				}
			}

			return false;

		} else {
			// classical easing cannot be used with an Infinity duration
			if ( options.duration == Infinity ) {
				this.now = t;
			} else {
				n = t - this.startTime;
				this.state = n / options.duration;

				// Perform the easing function, defaults to swing
				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
				this.now = this.start + ( (this.end - this.start) * this.pos );
			}
			// Perform the next step of the animation
			this.update();
		}

		return true;
	}
};

jQuery.extend( jQuery.fx, {
	tick: function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
	},

	interval: 13,

	stop: function() {
		clearInterval( timerId );
		timerId = null;
	},

	speeds: {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	},

	step: {
		opacity: function( fx ) {
			jQuery.style( fx.elem, "opacity", fx.now );
		},

		_default: function( fx ) {
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
			} else {
				fx.elem[ fx.prop ] = fx.now;
			}
		}
	}
});

// Ensure props that can't be negative don't go there on undershoot easing
jQuery.each( fxAttrs.concat.apply( [], fxAttrs ), function( i, prop ) {
	// exclude marginTop, marginLeft, marginBottom and marginRight from this list
	if ( prop.indexOf( "margin" ) ) {
		jQuery.fx.step[ prop ] = function( fx ) {
			jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
		};
	}
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}

// Try to restore the default display value of an element
function defaultDisplay( nodeName ) {

	if ( !elemdisplay[ nodeName ] ) {

		var body = document.body,
			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
			display = elem.css( "display" );
		elem.remove();

		// If the simple way fails,
		// get element's real default display by attaching it to a temp iframe
		if ( display === "none" || display === "" ) {
			// No iframe to use yet, so create it
			if ( !iframe ) {
				iframe = document.createElement( "iframe" );
				iframe.frameBorder = iframe.width = iframe.height = 0;
			}

			body.appendChild( iframe );

			// Create a cacheable copy of the iframe document on first call.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
			if ( !iframeDoc || !iframe.createElement ) {
				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
				iframeDoc.write( ( jQuery.support.boxModel ? "<!doctype html>" : "" ) + "<html><body>" );
				iframeDoc.close();
			}

			elem = iframeDoc.createElement( nodeName );

			iframeDoc.body.appendChild( elem );

			display = jQuery.css( elem, "display" );
			body.removeChild( iframe );
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return elemdisplay[ nodeName ];
}




var getOffset,
	rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;

if ( "getBoundingClientRect" in document.documentElement ) {
	getOffset = function( elem, doc, docElem, box ) {
		try {
			box = elem.getBoundingClientRect();
		} catch(e) {}

		// Make sure we're not dealing with a disconnected DOM node
		if ( !box || !jQuery.contains( docElem, elem ) ) {
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
		}

		var body = doc.body,
			win = getWindow( doc ),
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
			top  = box.top  + scrollTop  - clientTop,
			left = box.left + scrollLeft - clientLeft;

		return { top: top, left: left };
	};

} else {
	getOffset = function( elem, doc, docElem ) {
		var computedStyle,
			offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
				break;
			}

			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
			top  -= elem.scrollTop;
			left -= elem.scrollLeft;

			if ( elem === offsetParent ) {
				top  += elem.offsetTop;
				left += elem.offsetLeft;

				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}

				prevOffsetParent = offsetParent;
				offsetParent = elem.offsetParent;
			}

			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
			top  += body.offsetTop;
			left += body.offsetLeft;
		}

		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
			top  += Math.max( docElem.scrollTop, body.scrollTop );
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
		}

		return { top: top, left: left };
	};
}

jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var elem = this[0],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return null;
	}

	if ( elem === doc.body ) {
		return jQuery.offset.bodyOffset( elem );
	}

	return getOffset( elem, doc, doc.documentElement );
};

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return null;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					jQuery.support.boxModel && win.document.documentElement[ method ] ||
						win.document.body[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					 top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}




// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	var clientProp = "client" + name,
		scrollProp = "scroll" + name,
		offsetProp = "offset" + name;

	// innerHeight and innerWidth
	jQuery.fn[ "inner" + name ] = function() {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, "padding" ) ) :
			this[ type ]() :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn[ "outer" + name ] = function( margin ) {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
			this[ type ]() :
			null;
	};

	jQuery.fn[ type ] = function( value ) {
		return jQuery.access( this, function( elem, type, value ) {
			var doc, docElemProp, orig, ret;

			if ( jQuery.isWindow( elem ) ) {
				// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
				doc = elem.document;
				docElemProp = doc.documentElement[ clientProp ];
				return jQuery.support.boxModel && docElemProp ||
					doc.body && doc.body[ clientProp ] || docElemProp;
			}

			// Get document width or height
			if ( elem.nodeType === 9 ) {
				// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
				doc = elem.documentElement;

				// when a window > document, IE6 reports a offset[Width/Height] > client[Width/Height]
				// so we can't use max, as it'll choose the incorrect offset[Width/Height]
				// instead we use the correct client[Width/Height]
				// support:IE6
				if ( doc[ clientProp ] >= doc[ scrollProp ] ) {
					return doc[ clientProp ];
				}

				return Math.max(
					elem.body[ scrollProp ], doc[ scrollProp ],
					elem.body[ offsetProp ], doc[ offsetProp ]
				);
			}

			// Get width or height on the element
			if ( value === undefined ) {
				orig = jQuery.css( elem, type );
				ret = parseFloat( orig );
				return jQuery.isNumeric( ret ) ? ret : orig;
			}

			// Set the width or height on the element
			jQuery( elem ).css( type, value );
		}, type, value, arguments.length, null );
	};
});




// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}



})( window );
/*! async.js | https://github.com/caolan/async/blob/master/LICENSE */
/*global setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root = this,
        previous_async = root.async;

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = async;
    }
    else {
        root.async = async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    //// cross-browser compatiblity functions ////

    var _forEach = function (arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _forEach(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _forEach(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        async.nextTick = function (fn) {
            setTimeout(fn, 0);
        };
    }
    else {
        async.nextTick = process.nextTick;
    }

    async.forEach = function (arr, iterator, callback) {
        callback = callback || function () {
        };
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _forEach(arr, function (x) {
            iterator(x, function (err) {
                if (err) {
                    callback(err);
                    callback = function () {
                    };
                }
                else {
                    completed += 1;
                    if (completed === arr.length) {
                        callback();
                    }
                }
            });
        });
    };

    async.forEachSeries = function (arr, iterator, callback) {
        callback = callback || function () {
        };
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {
                    };
                }
                else {
                    completed += 1;
                    if (completed === arr.length) {
                        callback();
                    }
                    else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };

    async.forEachLimit = function (arr, limit, iterator, callback) {
        callback = callback || function () {
        };
        if (!arr.length || limit <= 0) {
            return callback();
        }
        var completed = 0;
        var started = 0;
        var running = 0;

        (function replenish() {
            if (completed === arr.length) {
                return callback();
            }

            while (running < limit && started < arr.length) {
                iterator(arr[started], function (err) {
                    if (err) {
                        callback(err);
                        callback = function () {
                        };
                    }
                    else {
                        completed += 1;
                        running -= 1;
                        if (completed === arr.length) {
                            callback();
                        }
                        else {
                            replenish();
                        }
                    }
                });
                started += 1;
                running += 1;
            }
        })();
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.forEach].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.forEachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (err, v) {
                results[x.index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);


    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.forEachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr,function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {
                    };
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.forEach(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {
                    };
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.forEach(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {
                    };
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {
        };
        var keys = _keys(tasks);
        if (!keys.length) {
            return callback(null);
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            _forEach(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (_keys(results).length === keys.length) {
                callback(null, results);
                callback = function () {
                };
            }
        });

        _forEach(keys, function (k) {
            var task = (tasks[k] instanceof Function) ? [tasks[k]] : tasks[k];
            var taskCallback = function (err) {
                if (err) {
                    callback(err);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {
                    };
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    taskComplete();
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {
        };
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback(err);
                    callback = function () {
                    };
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.nextTick(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    async.parallel = function (tasks, callback) {
        callback = callback || function () {
        };
        if (tasks.constructor === Array) {
            async.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.forEach(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {
        };
        if (tasks.constructor === Array) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.forEachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1) : null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.queue = function (worker, concurrency) {
        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
                if (data.constructor !== Array) {
                    data = [data];
                }
                _forEach(data, function (task) {
                    q.tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    if (q.saturated && q.tasks.length == concurrency) {
                        q.saturated();
                    }
                    async.nextTick(q.process);
                });
            },
            process: function () {
                if (workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if (q.empty && q.tasks.length == 0) q.empty();
                    workers += 1;
                    worker(task.data, function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if (q.drain && q.tasks.length + workers == 0) q.drain();
                        q.process();
                    });
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            }
        };
        return q;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _forEach(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
     async.warn = _console_fn('warn');
     async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                callback.apply(null, memo[key]);
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                        q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
        return function () {
            return (fn.unmemoized || fn).apply(null, arguments);
        }
    };

}());
HammerheadClient.define('ContentEditableHelper', function (require, exports) {
    var $ = require('jQuery'),
        Util = require('Util');

    //nodes utils
    function getOwnFirstVisibleTextNode(el) {
        var childrenArray = $.makeArray(el.childNodes),
            child = null;

        if (!childrenArray.length && el.nodeType === 3 && !exports.isInvisibleTextNode(el))
            return el;

        $.each(childrenArray, function (index, value) {
            if (value.nodeType === 3 && !exports.isInvisibleTextNode(value)) {
                child = value;
                return false;
            }
        });
        return child;
    }

    function getOwnFirstVisibleNode(el) {
        var childrenArray = $.makeArray(el.childNodes),
            child = null;

        $.each(childrenArray, function (index, value) {
            if (value.nodeType === 3) {
                if (!exports.isInvisibleTextNode(value)) {
                    child = value;
                    return false;
                }
            }
            else if (Util.isRenderedNode(value) && getOwnFirstVisibleNode(value)) {
                child = value;
                return false;
            }
        });
        return child;
    }

    function getOwnPreviousVisibleSibling(el) {
        var sibling = null,
            current = el;

        while (!sibling) {
            current = current.previousSibling;
            if (!current)
                break;
            else if (Util.isRenderedNode(current) && !exports.isInvisibleTextNode(current)) {
                sibling = current;
                break;
            }
        }
        return sibling;
    }

    //NOTE: before such elements (like div or p) adds line breaks before and after it
    // (except line break before first visible element in contentEditable parent)
    // this line breaks is not contained in node values
    //so we should take it into account manually
    function isNodeBlockWithBreakLine(parent, node) {
        var parentFirstVisibleChild = null,
            firstVisibleChild = null;

        if (!Util.isTheSameNode(node, parent) && node.childNodes.length && /div|p/.test(node.tagName.toLowerCase())) {
            parentFirstVisibleChild = getOwnFirstVisibleNode(parent);

            if (!parentFirstVisibleChild || Util.isTheSameNode(node, parentFirstVisibleChild))
                return false;

            firstVisibleChild = exports.getFirstVisibleTextNode(parentFirstVisibleChild);
            if (!firstVisibleChild || Util.isTheSameNode(node, firstVisibleChild))
                return false;

            return getOwnFirstVisibleTextNode(node);
        }
        return false;
    }

    function isNodeAfterNodeBlockWithBreakLine(parent, node) {
        var isRenderedNode = Util.isRenderedNode(node),
            parentFirstVisibleChild = null,
            firstVisibleChild = null,
            previousSibling = null;

        if (!Util.isTheSameNode(node, parent) &&
            ((isRenderedNode && node.nodeType === 1 && node.childNodes.length && !/div|p/.test(node.tagName.toLowerCase())) ||
                (node.nodeType === 3 && !Util.isTheSameNode(node, parent) && node.nodeValue.length && !exports.isInvisibleTextNode(node)))) {

            if (isRenderedNode && node.nodeType === 1) {
                parentFirstVisibleChild = getOwnFirstVisibleNode(parent);

                if (!parentFirstVisibleChild || Util.isTheSameNode(node, parentFirstVisibleChild))
                    return false;

                firstVisibleChild = exports.getFirstVisibleTextNode(parentFirstVisibleChild);
                if (!firstVisibleChild || Util.isTheSameNode(node, firstVisibleChild))
                    return false;
            }

            previousSibling = getOwnPreviousVisibleSibling(node);

            return (previousSibling && previousSibling.nodeType === 1 &&
                /div|p/.test(previousSibling.tagName.toLowerCase()) && getOwnFirstVisibleTextNode(previousSibling));
        }
        return false;
    }

    exports.getFirstVisibleTextNode = function (el) {
        var childrenArray = $.makeArray(el.childNodes),
            element = null;

        if (!childrenArray.length && el.nodeType === 3 && !exports.isInvisibleTextNode(el))
            return el;

        $.each(childrenArray, function (index, value) {
            if (value.nodeType === 3 && !exports.isInvisibleTextNode(value)) {
                element = value;
                return false;
            }
            else if (Util.isRenderedNode(value) && (value.nodeType === 1 || (value.childNodes && value.childNodes.length))) {
                element = exports.getFirstVisibleTextNode(value);
                if (element)
                    return false;
            }
        });
        return element;
    };

    exports.getLastVisibleTextNode = function (el, onlyVisible) {
        var childrenArray = $.makeArray(el.childNodes),
            element = null;

        if (!childrenArray.length && el.nodeType === 3 && !exports.isInvisibleTextNode(el))
            return el;

        if (childrenArray.length)
            childrenArray = childrenArray.reverse();

        $.each(childrenArray, function (index, value) {
            if (value.nodeType === 3 && (onlyVisible ? !exports.isInvisibleTextNode(value) : true)) {
                element = value;
                return false;
            }
            else if (Util.isRenderedNode(value) && (value.nodeType === 1 || (value.childNodes && value.childNodes.length))) {
                element = exports.getLastVisibleTextNode(value, false);
                if (element)
                    return false;
            }
        });
        return element;
    };

    exports.getFirstNonWhitespaceSymbolIndex = function (nodeValue, startFrom) {
        if (!nodeValue || !nodeValue.length)
            return 0;

        var valueLength = nodeValue.length,
            index = startFrom || 0;

        for (var i = index; i < valueLength; i++) {
            if (nodeValue.charCodeAt(i) === 10 || nodeValue.charCodeAt(i) === 32)
                index++;
            else
                break;
        }
        return index;
    };

    exports.getLastNonWhitespaceSymbolIndex = function (nodeValue) {
        if (!nodeValue || !nodeValue.length)
            return 0;

        var valueLength = nodeValue.length,
            index = valueLength;

        for (var i = valueLength - 1; i >= 0; i--) {
            if (nodeValue.charCodeAt(i) === 10 || nodeValue.charCodeAt(i) === 32)
                index--;
            else
                break;
        }
        return index;
    };

    exports.isInvisibleTextNode = function (node) {
        if (node.nodeType !== 3)
            return false;

        var nodeValue = node.nodeValue,
            firstVisibleIndex = exports.getFirstNonWhitespaceSymbolIndex(nodeValue),
            lastVisibleIndex = exports.getLastNonWhitespaceSymbolIndex(nodeValue);

        return firstVisibleIndex === nodeValue.length && lastVisibleIndex === 0;
    };

    //dom utils
    exports.findContentEditableParent = function (el) {
        var $elParents = $(el).parents(),
            currentDocument = null,
            parent = null;

        function hasContentEditableAttr(el) {
            return typeof $(el).attr('contenteditable') !== 'undefined' && $(el).attr('contenteditable') !== 'false' && $(el).attr('contenteditable') !== 'inherit';
        }

        if (hasContentEditableAttr(el) && Util.isContentEditableElement(el))
            return el;

        currentDocument = Util.findDocument(el);
        if (currentDocument.designMode === 'on')
            return currentDocument.body;

        $.each($elParents, function (index, item) {
            if (hasContentEditableAttr(item) && Util.isContentEditableElement(item)) {
                parent = item;
                return false;
            }
        });
        return parent;
    };

    exports.getNearestCommonAncestor = function (node1, node2) {
        if (Util.isTheSameNode(node1, node2)) {
            if (Util.isTheSameNode(node2, exports.findContentEditableParent(node1)))
                return node1;
            return node1.parentNode;
        }

        var ancestors = [],
            contentEditableParent = exports.findContentEditableParent(node1),
            curNode = null;

        if (!Util.isElementContainsNode(contentEditableParent, node2))
            return null;

        for (curNode = node1; curNode !== contentEditableParent; curNode = curNode.parentNode)
            ancestors.push(curNode);

        for (curNode = node2; curNode !== contentEditableParent; curNode = curNode.parentNode) {
            if ($.inArray(curNode, ancestors) !== -1)
                return curNode;
        }

        return contentEditableParent;
    };

    //selection utils
    function getSelectedPositionInParentByOffset(node, offset) {
        var currentNode = null,
            currentOffset = null,
            isSearchForLastChild = offset >= node.childNodes.length;

        //NOTE: IE behavior
        if (isSearchForLastChild)
            currentNode = node.childNodes[node.childNodes.length - 1];
        else {
            currentNode = node.childNodes[offset];
            currentOffset = 0;
        }

        while (Util.isRenderedNode(currentNode) && currentNode.nodeType === 1) {
            if (currentNode.childNodes && currentNode.childNodes.length)
                currentNode = currentNode.childNodes[isSearchForLastChild ? currentNode.childNodes.length - 1 : 0];
            else {
                //NOTE: if we didn't find a text node then always set offset to zero
                currentOffset = 0;
                break;
            }
        }

        if (currentOffset !== 0 && Util.isRenderedNode(currentNode))
            currentOffset = currentNode.nodeValue ? currentNode.nodeValue.length : 0;

        return {
            node: currentNode,
            offset: currentOffset
        };
    }

    function getSelectionStart(el, selection, inverseSelection) {
        var startNode = inverseSelection ? selection.focusNode : selection.anchorNode,
            startOffset = inverseSelection ? selection.focusOffset : selection.anchorOffset,

            correctedStartPosition = {
                node: startNode,
                offset: startOffset
            };

        //NOTE: window.getSelection() can't returns not rendered node like selected node, so we shouldn't check it
        if ((Util.isTheSameNode(el, startNode) || startNode.nodeType === 1) && startNode.childNodes && startNode.childNodes.length)
            correctedStartPosition = getSelectedPositionInParentByOffset(startNode, startOffset);

        return {
            node: correctedStartPosition.node,
            offset: correctedStartPosition.offset
        };
    }

    function getSelectionEnd(el, selection, inverseSelection) {
        var endNode = inverseSelection ? selection.anchorNode : selection.focusNode,
            endOffset = inverseSelection ? selection.anchorOffset : selection.focusOffset,

            correctedEndPosition = {
                node: endNode,
                offset: endOffset
            };

        //NOTE: window.getSelection() can't returns not rendered node like selected node, so we shouldn't check it
        if ((Util.isTheSameNode(el, endNode) || endNode.nodeType === 1) && endNode.childNodes && endNode.childNodes.length)
            correctedEndPosition = getSelectedPositionInParentByOffset(endNode, endOffset);

        return {
            node: correctedEndPosition.node,
            offset: correctedEndPosition.offset
        };
    }

    exports.getSelection = function (el, selection, inverseSelection) {
        var correctedStart = getSelectionStart(el, selection, inverseSelection),
            correctedEnd = getSelectionEnd(el, selection, inverseSelection);

        return {
            startNode: correctedStart.node,
            startOffset: correctedStart.offset,
            endNode: correctedEnd.node,
            endOffset: correctedEnd.offset
        };
    };

    exports.getSelectionStartPosition = function (el, selection, inverseSelection) {
        var correctedSelectionStart = getSelectionStart(el, selection, inverseSelection);

        return exports.calculatePositionByNodeAndOffset(el, correctedSelectionStart.node, correctedSelectionStart.offset);
    };

    exports.getSelectionEndPosition = function (el, selection, inverseSelection) {
        var correctedSelectionEnd = getSelectionEnd(el, selection, inverseSelection);

        return exports.calculatePositionByNodeAndOffset(el, correctedSelectionEnd.node, correctedSelectionEnd.offset);
    };

    exports.calculateNodeAndOffsetByPosition = function (el, offset) {
        var point = {
            offset: offset,
            node: null
        };

        function checkChildNodes(target) {
            var childNodes = target.childNodes;

            if (point.node)
                return point;

            if (!Util.isRenderedNode(target))
                return point;

            if (target.nodeType === 3) {
                if (point.offset <= target.nodeValue.length) {
                    point.node = target;
                    return point;
                }
                else if (target.nodeValue.length) {
                    if (!point.node && isNodeAfterNodeBlockWithBreakLine(el, target))
                        point.offset--;

                    point.offset -= target.nodeValue.length;
                }
            }
            else if (target.nodeType === 1) {
                if (point.offset === 0 && !exports.getContentEditableValue(target).length) {
                    point.node = target;
                    return point;
                }
                if (!point.node && (isNodeBlockWithBreakLine(el, target) || isNodeAfterNodeBlockWithBreakLine(el, target)))
                    point.offset--;
                else if (!childNodes.length && target.nodeType === 1 && target.tagName.toLowerCase() === 'br')
                    point.offset--;
            }

            $.each(childNodes, function (index, value) {
                point = checkChildNodes(value);
            });

            return point;
        }

        return checkChildNodes(el);
    };

    exports.calculatePositionByNodeAndOffset = function (el, node, offset) {
        var currentOffset = 0,
            find = false;

        function checkChildNodes(target) {
            var childNodes = target.childNodes;

            if (find)
                return currentOffset;

            if (Util.isTheSameNode(node, target)) {
                if (isNodeBlockWithBreakLine(el, target) || isNodeAfterNodeBlockWithBreakLine(el, target))
                    currentOffset++;

                find = true;
                return currentOffset + offset;
            }

            if (!Util.isRenderedNode(target))
                return currentOffset;

            if (!childNodes.length && target.nodeValue && target.nodeValue.length) {
                if (!find && isNodeAfterNodeBlockWithBreakLine(el, target))
                    currentOffset++;

                currentOffset += target.nodeValue.length;
            }

            else if (!childNodes.length && target.nodeType === 1 && target.tagName.toLowerCase() === 'br')
                currentOffset++;

            else if (!find && (isNodeBlockWithBreakLine(el, target) || isNodeAfterNodeBlockWithBreakLine(el, target)))
                currentOffset++;

            $.each(childNodes, function (index, value) {
                currentOffset = checkChildNodes(value);
            });

            return currentOffset;
        }

        return checkChildNodes(el);
    };

    exports.getElementBySelection = function (selection) {
        var el = exports.getNearestCommonAncestor(selection.anchorNode, selection.focusNode);
        return Util.isTextNode(el) ? el.parentElement : el;
    };

    //NOTE: We can not determine first visible symbol of node in all cases,
    // so we should create a range and select all text contents of the node.
    // Then range object will contain information about node's the first and last visible symbol.
    exports.getFirstVisiblePosition = function (el) {
        var firstVisibleTextChild = el.nodeType === 3 ? el : exports.getFirstVisibleTextNode(el),
            curDocument = Util.findDocument(el),
            range = curDocument.createRange();

        if (firstVisibleTextChild) {
            range.selectNodeContents(firstVisibleTextChild);
            return exports.calculatePositionByNodeAndOffset(el, firstVisibleTextChild, range.startOffset);
        }
        return 0;
    };

    exports.getLastVisiblePosition = function (el) {
        var lastVisibleTextChild = el.nodeType === 3 ? el : exports.getLastVisibleTextNode(el, true),
            curDocument = Util.findDocument(el),
            range = curDocument.createRange();

        if (lastVisibleTextChild) {
            range.selectNodeContents(lastVisibleTextChild);
            return exports.calculatePositionByNodeAndOffset(el, lastVisibleTextChild, range.endOffset);
        }
        return 0;
    };

    //contents util
    exports.getContentEditableValue = function (target) {
        var elementValue = '',
            childNodes = target.childNodes;

        if (!Util.isRenderedNode(target))
            return elementValue;

        if (!target.childNodes.length && target.nodeType === 3)
            return target.nodeValue;
        else if (target.childNodes.length === 1 && target.childNodes[0].nodeType === 3)
            return target.childNodes[0].nodeValue;

        $.each(childNodes, function (index, value) {
            elementValue += exports.getContentEditableValue(value);
        });
        return elementValue;
    };
});

HammerheadClient.define('CookieUtil', function (require, exports) {
    var $ = require('jQuery');

    //NOTE: The name/key cannot be empty but the value can
    var COOKIE_PAIR_REGEX = /^([^=;]+)\s*=\s*(("?)[^\n\r\0]*\3)/,
        TRAILING_SEMICOLON_REGEX = /;+$/;


    //Exports
    //-------------------------------------------------------------------------------------
    exports.parse = function (str) {
        str = $.trim(str);

        var trailingSemicolonCheck = TRAILING_SEMICOLON_REGEX.exec(str);

        if (trailingSemicolonCheck)
            str = str.slice(0, trailingSemicolonCheck.index);

        var firstSemicolonIdx = str.indexOf(';'),
            keyValueString = firstSemicolonIdx > -1 ? str.substr(0, firstSemicolonIdx) : str,
            keyValueParsingResult = COOKIE_PAIR_REGEX.exec(keyValueString);

        if (!keyValueParsingResult)
            return null;

        var parsedCookie = {
            key: keyValueParsingResult[1],
            value: keyValueParsingResult[2]
        };

        parsedCookie.key = $.trim(parsedCookie.key);
        parsedCookie.value = $.trim(parsedCookie.value);

        if (firstSemicolonIdx === -1)
            return parsedCookie;

        var attributesString = $.trim(str.slice(firstSemicolonIdx).replace(/^\s*;\s*/, ''));

        if (attributesString.length === 0)
            return parsedCookie;

        var attrValStrings = attributesString.split(/\s*;\s*/);

        while (attrValStrings.length) {
            var attrValueStr = attrValStrings.shift();

            var separatorIdx = attrValueStr.indexOf('='),
                key = null,
                value = null;

            if (separatorIdx === -1)
                key = attrValueStr;
            else {
                key = attrValueStr.substr(0, separatorIdx);
                value = $.trim(attrValueStr.substr(separatorIdx + 1));
            }

            key = $.trim(key.toLowerCase());

            switch (key) {
                case 'expires':
                case 'max-age':
                case 'path':
                    parsedCookie[key] = value;
                    break;

                case 'secure':
                case 'httponly':
                    parsedCookie[key] = true;
                    break;

                case 'domain':
                    //NOTE: remove leading '.'
                    parsedCookie.domain = $.trim(value.replace(/^\./, ''));
                    break;

                default:
                    break;
            }
        }

        return parsedCookie;
    };

    exports.format = function (parsedCookie) {
        var cookieStr = parsedCookie.key;

        if (parsedCookie.value !== null)
            cookieStr += '=' + parsedCookie.value;

        cookieStr += ';';

        for (var attrName in parsedCookie) {
            if (parsedCookie.hasOwnProperty(attrName)) {
                if (attrName !== 'key' && attrName !== 'value') {
                    cookieStr += attrName;

                    //NOTE: skip attrs without value and boolean attrs (e.g. Secure)
                    if (typeof parsedCookie[attrName] !== 'undefined' && parsedCookie[attrName] !== true)
                        cookieStr += '=' + parsedCookie[attrName];

                    cookieStr += ';';
                }
            }
        }

        return cookieStr;
    };

    exports.get = function (document, name) {
        var cookies = document.cookie.split(';');

        for (var i = 0; i < cookies.length; i++) {
            var cookie = $.trim(cookies[i]);

            if (cookie.indexOf(name + '=') === 0 || cookie === name)
                return cookie;
        }

        return null;
    };

    exports['delete'] = function (document, name) {
        document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    };
});
HammerheadClient.define('Hammerhead', function (require, exports) {
    var $ = require('jQuery'),
        async = require('async'),
        ContentEditableHelper = require('ContentEditableHelper'),
        DOMSandbox = require('DOMSandbox'),
        Errs = require('Shared.Errors'),
        EventSandbox = require('DOMSandbox.Event'),
        IFrameSandbox = require('DOMSandbox.IFrame'),
        InfoManager = require('DOMSandbox.Upload.InfoManager'),
        JSON = require('JSON'),
        JSProcessor = require('Shared.JSProcessor'),
        MessageSandbox = require('DOMSandbox.Message'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        PageProc = require('Shared.PageProc'),
        PageState = require('PageState'),
        SandboxedJQuery = require('SandboxedJQuery'),
        SandboxUtil = require('DOMSandbox.Util'),
        ShadowUI = require('DOMSandbox.ShadowUI'),
        SharedConst = require('Shared.Const'),
        TextSelection = require('TextSelection'),
        Transport = require('Transport'),
        UploadSandbox = require('DOMSandbox.Upload'),
        Util = require('Util'),
        XhrSandbox = require('DOMSandbox.Xhr');

    // Const
    exports.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME = SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME;
    exports.DOM_SANDBOX_PROCESSED_CONTEXT = SharedConst.DOM_SANDBOX_PROCESSED_CONTEXT;
    exports.DOM_SANDBOX_STORED_ATTR_POSTFIX = SharedConst.DOM_SANDBOX_STORED_ATTR_POSTFIX;
    exports.EVENT_SANDBOX_DISPATCH_EVENT_FLAG = SharedConst.EVENT_SANDBOX_DISPATCH_EVENT_FLAG;
    exports.OLD_ATTR_VALUES = SharedConst.OLD_ATTR_VALUES;
    exports.PROPERTIES_FOR_WRAPPING = JSProcessor.wrappedProperties;
    exports.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR = SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR;
    exports.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR = SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR;
    exports.TEST_CAFE_UI_CLASSNAME_POSTFIX = SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX;

    // Events
    exports.BEFORE_BEFORE_UNLOAD_EVENT = EventSandbox.BEFORE_BEFORE_UNLOAD_EVENT;
    exports.BEFORE_UNLOAD_EVENT = EventSandbox.BEFORE_UNLOAD_EVENT;
    exports.BODY_CREATED = DOMSandbox.BODY_CREATED;
    exports.DOM_DOCUMENT_CLEARED = DOMSandbox.DOCUMENT_CLEARED;
    exports.FILE_UPLOADING_EVENT = UploadSandbox.FILE_UPLOADING_EVENT;
    exports.IFRAME_READY_TO_INIT = IFrameSandbox.IFRAME_READY_TO_INIT;
    exports.UNCAUGHT_JS_ERROR = DOMSandbox.UNCAUGHT_JS_ERROR;
    exports.UNLOAD_EVENT = EventSandbox.UNLOAD_EVENT;
    exports.XHR_COMPLETED = XhrSandbox.XHR_COMPLETED;
    exports.XHR_ERROR = XhrSandbox.XHR_ERROR;
    exports.XHR_SEND = XhrSandbox.XHR_SEND;

    var getEventOwner = function (evtName) {
        switch (evtName) {
            case EventSandbox.BEFORE_UNLOAD_EVENT:
            case EventSandbox.BEFORE_BEFORE_UNLOAD_EVENT:
            case EventSandbox.UNLOAD_EVENT:
                return EventSandbox;

            case DOMSandbox.BODY_CREATED:
            case DOMSandbox.DOCUMENT_CLEARED:
            case DOMSandbox.UNCAUGHT_JS_ERROR:
                return DOMSandbox;

            case UploadSandbox.FILE_UPLOADING_EVENT:
                return UploadSandbox;

            case IFrameSandbox.IFRAME_READY_TO_INIT:
                return IFrameSandbox;

            case XhrSandbox.XHR_COMPLETED:
            case XhrSandbox.XHR_ERROR:
            case XhrSandbox.XHR_SEND:
                return XhrSandbox;

            default:
                return null;
        }
    };

    exports.on = function (evtName, handler) {
        var eventOwner = getEventOwner(evtName);

        if (eventOwner)
            eventOwner.on(evtName, handler);
    };

    exports.off = function (evtName, handler) {
        var eventOwner = getEventOwner(evtName);

        if (eventOwner)
            eventOwner.off(evtName, handler);
    };

    // Methods
    exports.getOriginElementAttributes = SandboxUtil.getAttributesProperty;
    exports.getStoredAttrName = PageProc.getStoredAttrName;
    exports.upload = UploadSandbox.upload;

    // Private members
    exports._raiseBodyCreatedEvent = DOMSandbox.raiseBodyCreatedEvent;
    exports._rebindDomSandboxToIframe = DOMSandbox.rebindDomSandboxToIframe;
    exports._UploadManager = InfoManager;
    
    // Modules
    exports.$ = $;
    exports.async = async;
    exports.ContentEditableHelper = ContentEditableHelper;
    exports.Errs = Errs;
    exports.EventSandbox = EventSandbox;
    exports.EventSimulator = EventSandbox.Simulator;
    exports.JSON = JSON;
    exports.JSProcessor = JSProcessor;
    exports.MessageSandbox = MessageSandbox;
    exports.NativeMethods = NativeMethods;
    exports.PageState = PageState;
    exports.ShadowUI = ShadowUI;
    exports.TextSelection = TextSelection;
    exports.Transport = Transport;
    exports.Util = Util;

    exports.init = function () {
        DOMSandbox.init(window, document);
        exports.SandboxedJQuery = SandboxedJQuery.jQuery;
        PageState.init(ShadowUI.getRoot, ShadowUI.select);
    };

    window.Hammerhead = exports;
});
HammerheadClient.define('JSON', function (require, exports) {
    var Util = require('Util');

    //NOTE: json2.js uses fallbacks to existing JSON implementations. So we can't rely on it in our client code.
    //This is an isolated implementation of JSON that is not rely on any external stuff (prototypes, existing JSON
    //implementations, etc.)
    //Serialization/deserialization logic borrowed from http://json.org/json2.js
    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        };


    function quote(string) {

        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

        // Produce a string from holder[key].

        var i, // The loop counter.
            k, // The member key.
            v, // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

        // If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object') {
            //NOTE: determine exact object type instead of relying on prototype.toJSON like in original json2.js
            var objToStrValue = Object.prototype.toString.apply(value);
            if (objToStrValue === '[object String]' ||
                objToStrValue === '[object Number]' ||
                objToStrValue === '[object Boolean]') {
                value = value.valueOf();
            } else if (objToStrValue === '[object Date]') {
                value = isFinite(this.valueOf())
                    ? this.getUTCFullYear() + '-' +
                      f(this.getUTCMonth() + 1) + '-' +
                      f(this.getUTCDate()) + 'T' +
                      f(this.getUTCHours()) + ':' +
                      f(this.getUTCMinutes()) + ':' +
                      f(this.getUTCSeconds()) + 'Z'
                    : null;
            }
        }

        // What happens next depends on the value's type.
        switch (typeof value) {
            case 'string':
                return quote(value);

            case 'number':

                // JSON numbers must be finite. Encode non-finite numbers as null.

                return isFinite(value) ? String(value) : 'null';

            case 'boolean':
            case 'null':

                // If the value is a boolean or null, convert it to a string. Note:
                // typeof null does not produce 'null'. The case is included here in
                // the remote chance that this gets fixed someday.

                return String(value);

            // If the type is 'object', we might be dealing with an object or an array or
            // null.

            case 'object':

                // Due to a specification blunder in ECMAScript, typeof null is 'object',
                // so watch out for that case.

                if (!value) {
                    return 'null';
                }

                // Make an array to hold the partial results of stringifying this object value.

                gap += indent;
                partial = [];

                // Is the value an array?

                if (Object.prototype.toString.apply(value) === '[object Array]') {

                    // The value is an array. Stringify every element. Use null as a placeholder
                    // for non-JSON values.

                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }

                    // Join all of the elements together, separated with commas, and wrap them in
                    // brackets.

                    v = partial.length === 0
                        ? '[]'
                        : gap
                        ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                        : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }

                // Iterate through all of the keys in the object.
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }

                // Join all of the member texts together, separated with commas,
                // and wrap them in braces.

                v = partial.length === 0
                    ? '{}'
                    : gap
                    ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                    : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
        }
    }

    function isDOMNode(obj) {
        if (typeof Node === 'object')
            return obj instanceof Node;

        return typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
    }

    function isSerializable(value) {
        if (value) {
            //NOTE: jquery object, DOM nodes and functions are disallowed obj types because we can't serialize them correctly
            if (typeof value === 'function' || Util.isJQueryObj(value) || isDOMNode(value))
                return false;

            if (typeof value === 'object') {
                for (var prop in value) {
                    if (value.hasOwnProperty(prop) && !isSerializable(value[prop]))
                        return false;
                }
            }
        }

        return true;
    }


    //Exports
    //-------------------------------------------------------------------------------------
    exports.stringify = function (value) {
        gap = '';
        indent = '';

        // Make a fake root object containing our value under the key of ''.
        // Return the result of stringifying the value.
        return str('', {'': value});
    };


    exports.parse = function (text, reviver) {
        // The parse method takes a text and an optional reviver function, and returns
        // a JavaScript value if the text is a valid JSON text.

        var j;

        function walk(holder, key) {

            // The walk method is used to recursively walk the resulting structure so
            // that modifications can be made.

            var k, v, value = holder[key];
            if (value && typeof value === 'object') {
                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = walk(value, k);
                        if (v !== undefined) {
                            value[k] = v;
                        } else {
                            delete value[k];
                        }
                    }
                }
            }
            return reviver.call(holder, key, value);
        }


        // Parsing happens in four stages. In the first stage, we replace certain
        // Unicode characters with escape sequences. JavaScript handles many characters
        // incorrectly, either silently deleting them, or treating them as line endings.

        text = String(text);
        cx.lastIndex = 0;
        if (cx.test(text)) {
            text = text.replace(cx, function (a) {
                return '\\u' +
                       ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
            });
        }

        // In the second stage, we run the text against regular expressions that look
        // for non-JSON patterns. We are especially concerned with '()' and 'new'
        // because they can cause invocation, and '=' because it can cause mutation.
        // But just to be safe, we want to reject all unexpected forms.

        // We split the second stage into 4 regexp operations in order to work around
        // crippling inefficiencies in IE's and Safari's regexp engines. First we
        // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
        // replace all simple value tokens with ']' characters. Third, we delete all
        // open brackets that follow a colon or comma or that begin the text. Finally,
        // we look to see that the remaining characters are only whitespace or ']' or
        // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

        if (/^[\],:{}\s]*$/
            .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

            // In the third stage we use the eval function to compile the text into a
            // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
            // in JavaScript: it can begin a block or an object literal. We wrap the text
            // in parens to eliminate the ambiguity.

            j = eval('(' + text + ')');

            // In the optional fourth stage, we recursively walk the new structure, passing
            // each name/value pair to a reviver function for possible transformation.

            return typeof reviver === 'function'
                ? walk({'': j}, '')
                : j;
        }

        // If the text is not JSON parseable, then a SyntaxError is thrown.

        throw new SyntaxError('JSON.parse');
    };

    //NOTE: one more addition - func below allows as to check is it possible to correctly serialize given value
    exports.isSerializable = isSerializable;
});
HammerheadClient.define('PageState', function (require, exports) {
    var $ = require('jQuery'),
        EventSandbox = require('DOMSandbox.Event'),
        JSProcessor = require('Shared.JSProcessor'),
        TextSelection = require('TextSelection'),
        Util = require('Util'),

        EventSimulator = EventSandbox.Simulator;

    var shadowUIGetRoot = null,
        shadowUISelect = null,

        lastSavedActiveElement = null;

    function getInnerHTML(el) {
        var $testCafeRoot = shadowUIGetRoot();

        if (el.tagName.toLowerCase() === 'body' && hasRootElement(el, $testCafeRoot)) {
            var $cloneBody = $(el).clone(),
                $cloneRoot = shadowUISelect('#' + $testCafeRoot[0].id, $cloneBody);

            $cloneRoot.remove();

            return window[JSProcessor.GET_PROPERTY_METH_NAME]($cloneBody[0], 'innerHTML');
        }

        return window[JSProcessor.GET_PROPERTY_METH_NAME](el, 'innerHTML');
    }

    function hasRootElement(el, $root) {
        var $testCafeRoot = $root || shadowUIGetRoot();

        return shadowUISelect('#' + $testCafeRoot[0].id, $(el)).length;
    }

    function setInnerHTML(el, savedInnerHTML) {
        //NOTE: we should change the contentEditable element's content only if it's really necessary,
        // because otherwise the element will change and will not be available (element.parentElement = null)
        if (!(el.tagName.toLowerCase() === 'body' && hasRootElement(el))) {
            if (window[JSProcessor.GET_PROPERTY_METH_NAME](el, 'innerHTML') !== savedInnerHTML)
                window[JSProcessor.SET_PROPERTY_METH_NAME](el, 'innerHTML', savedInnerHTML);
        } else if (getInnerHTML(el) !== savedInnerHTML) {
            var currentBodyChildren = el.children,
                oldBodyContainer = document.createDocumentFragment(),
                oldBody = $('<body>').attr('contenteditable', 'true')[0],
                oldBodyChildren = null,
                tempNode = null;

            $.each(currentBodyChildren, function (index, item) {
                el.removeChild(item);
            });

            oldBodyContainer.appendChild(oldBody);
            window[JSProcessor.SET_PROPERTY_METH_NAME](oldBody, 'innerHTML', savedInnerHTML);
            oldBodyChildren = oldBody.childNodes;

            while (oldBodyChildren.length) {
                //NOTE: we previously copy node from oldBody because after adding node to body oldBodyChildren array may changed
                tempNode = oldBodyChildren[0];
                oldBody.removeChild(oldBodyChildren[0]);
                oldBodyChildren = oldBody.childNodes;
                el.appendChild(tempNode);
            }
        }
    }

    exports.addAffectedElement = function (state, affectedElement) {
        var isTextEditable = Util.isTextEditableElement(affectedElement);

        state.affectedElement = affectedElement;

        if (isTextEditable || Util.isContentEditableElement(affectedElement)) {
            state.affectedElementValue = isTextEditable ? affectedElement.value : getInnerHTML(affectedElement);
            state.affectedElementStartSelection = TextSelection.getSelectionStart(affectedElement);
            state.affectedElementEndSelection = TextSelection.getSelectionEnd(affectedElement);
            state.affectedElementSelectionInverse = TextSelection.hasInverseSelection(affectedElement);
        }

        state.affectedElementSelectedIndex = Util.isSelectElement(affectedElement) ? affectedElement.selectedIndex : null;
    };

    exports.getLastActiveElement = function () {
        return lastSavedActiveElement;
    };

    exports.init = function (getRoot, select) {
        shadowUIGetRoot = getRoot;
        shadowUISelect = select;
    };

    exports.restoreState = function (state, quiet, callback) {
        var curActiveElement = Util.getActiveElement(),
            activeElement = state.activeElement,
            isActiveElementTextEditable = Util.isTextEditableElement(activeElement);

        function focusCallback() {
            if (Util.isSelectElement(activeElement) && activeElement.selectedIndex !== state.selectedIndex)
                activeElement.selectedIndex = state.selectedIndex;

            if (isActiveElementTextEditable || Util.isContentEditableElement(activeElement)) {
                if (isActiveElementTextEditable)
                    activeElement.value = state.elementValue;
                else
                    setInnerHTML(activeElement, state.elementValue);

                //NOTE: some scripts restore old editor value if it hasn't received keydown or keyup events after value changing
                EventSimulator.keydown(activeElement);
                EventSimulator.keyup(activeElement);

                TextSelection.select(activeElement, state.startSelection, state.endSelection, state.selectionInverse);
            }

            callback();
        }

        if (state.affectedElement && state.affectedElement !== activeElement) {
            if (Util.isEditableElement(state.affectedElement)) {
                if (Util.isTextEditableElement(state.affectedElement))
                    state.affectedElement.value = state.affectedElementValue;
                //NOTE: we should change the contentEditable element's content only if it's really necessary,
                // because otherwise the element will change and will not be available (element.parentElement = null)
                else
                    setInnerHTML(state.affectedElement, state.affectedElementValue);

                //NOTE: some scripts restore old editor value if it hasn't received keydown or keyup events after value changing
                EventSimulator.keydown(state.affectedElement);
                EventSimulator.keyup(state.affectedElement);

                TextSelection.select(state.affectedElement, state.affectedElementStartSelection,
                    state.affectedElementEndSelection, state.affectedElementSelectionInverse);
            }

            if (Util.isSelectElement(state.affectedElement))
                state.affectedElement.selectedIndex = state.affectedElementSelectedIndex;
        }

        if (curActiveElement !== activeElement && Util.isElementFocusable($(activeElement)))
            EventSandbox.focus(activeElement, focusCallback, quiet);
        //T132655: document.activeElement is null after recording hover action in IE
        else if (Util.isIE && document.activeElement === null && activeElement && activeElement === document.body)
            EventSandbox.focus(activeElement, focusCallback, true);
        else
            focusCallback();
    };

    exports.saveState = function (affectedElement) {
        var state = {},
            activeElement = Util.getActiveElement(),
            isTextEditable = Util.isTextEditableElement(activeElement);

        lastSavedActiveElement = state.activeElement = activeElement;
        state.selectionInverse = false;
        state.selectedIndex = Util.isSelectElement(activeElement) ? activeElement.selectedIndex : null;

        if (isTextEditable || Util.isContentEditableElement(activeElement)) {
            state.elementValue = isTextEditable ? activeElement.value :
                getInnerHTML(activeElement);
            state.startSelection = TextSelection.getSelectionStart(activeElement);
            state.endSelection = TextSelection.getSelectionEnd(activeElement);
            state.selectionInverse = TextSelection.hasInverseSelection(activeElement);
        }


        if (affectedElement)
            exports.addAffectedElement(state, affectedElement);

        return state;
    };
});
HammerheadClient.define('SandboxedJQuery', function (require, exports) {
    var DomAccessorWrappers = require('DOMSandbox.DomAccessorWrappers'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        Util = require('Util');

    exports.init = function(window, undefined) {
        DomAccessorWrappers.init(window, window.document);

        var __get$ = window.__get$,
            __set$ = window.__set$,
            __get$Loc = window.__get$Loc,
            __call$ = window.__call$,
            __proc$Script = window.__proc$Script;

        // ------------------- Sandboxed jQuery --------------------------
        /*!
         * jQuery JavaScript Library v1.7.2
         * http://jquery.com/
         *
         * Copyright 2011, John Resig
         * Dual licensed under the MIT or GPL Version 2 licenses.
         * http://jquery.org/license
         *
         * Includes Sizzle.js
         * http://sizzlejs.com/
         * Copyright 2011, The Dojo Foundation
         * Released under the MIT, BSD, and GPL Licenses.
         *
         * Date: Wed Mar 21 12:46:34 2012 -0700
         */
        (function (window, undefined) {
            // Use the correct document accordingly with window argument (sandbox)
            var document = window.document, navigator = window.navigator, location = __get$(window, "location");
            var jQuery = function () {
                // Define a local copy of jQuery
                var jQuery = function (selector, context) {
                        // The jQuery object is actually just the init constructor 'enhanced'
                        return new jQuery.fn.init(selector, context, rootjQuery);
                    },
                // Map over jQuery in case of overwrite
                    _jQuery = window.jQuery,
                // Map over the $ in case of overwrite
                    _$ = window.$,
                // A central reference to the root jQuery(document)
                    rootjQuery,
                // A simple way to check for HTML strings or ID strings
                // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
                    quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,
                // Check if a string has a non-whitespace character in it
                    rnotwhite = /\S/,
                // Used for trimming whitespace
                    trimLeft = /^\s+/, trimRight = /\s+$/,
                // Match a standalone tag
                    rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,
                // JSON RegExp
                    rvalidchars = /^[\],:{}\s]*$/, rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
                // Useragent RegExp
                    rwebkit = /(webkit)[ \/]([\w.]+)/, ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/, rmsie = /(msie) ([\w.]+)/, rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
                // Matches dashed string for camelizing
                    rdashAlpha = /-([a-z]|[0-9])/gi, rmsPrefix = /^-ms-/,
                // Used by jQuery.camelCase as callback to replace()
                    fcamelCase = function (all, letter) {
                        return (letter + "").toUpperCase();
                    },
                // Keep a UserAgent string for use with jQuery.browser
                    userAgent = navigator.userAgent,
                // For matching the engine and version of the browser
                    browserMatch,
                // The deferred used on DOM ready
                    readyList,
                // The ready event handler
                    DOMContentLoaded,
                // Save a reference to some core methods
                    toString = Object.prototype.toString, hasOwn = Object.prototype.hasOwnProperty, push = Array.prototype.push, slice = Array.prototype.slice, trim = String.prototype.trim, indexOf = Array.prototype.indexOf,
                // [[Class]] -> type pairs
                    class2type = {};
                jQuery.fn = jQuery.prototype = {
                    constructor: jQuery,
                    init: function (selector, context, rootjQuery) {
                        var match, elem, ret, doc;
                        // Handle $(""), $(null), or $(undefined)
                        if (!selector) {
                            return this;
                        }
                        // Handle $(DOMElement)
                        if (selector.nodeType) {
                            this.context = this[0] = selector;
                            this.length = 1;
                            return this;
                        }
                        // The body element only exists once, optimize finding it
                        if (selector === "body" && !context && document.body) {
                            this.context = document;
                            this[0] = document.body;
                            this.selector = selector;
                            this.length = 1;
                            return this;
                        }
                        // Handle HTML strings
                        if (typeof selector === "string") {
                            // Are we dealing with HTML string or an ID?
                            if (selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3) {
                                // Assume that strings that start and end with <> are HTML and skip the regex check
                                match = [
                                    null,
                                    selector,
                                    null
                                ];
                            } else {
                                match = quickExpr.exec(selector);
                            }
                            // Verify a match, and that no context was specified for #id
                            if (match && (match[1] || !context)) {
                                // HANDLE: $(html) -> $(array)
                                if (match[1]) {
                                    context = context instanceof jQuery ? context[0] : context;
                                    doc = context ? context.ownerDocument || context : document;
                                    // If a single string is passed in and it's a single tag
                                    // just do a createElement and skip the rest
                                    ret = rsingleTag.exec(selector);
                                    if (ret) {
                                        if (jQuery.isPlainObject(context)) {
                                            selector = [document.createElement(ret[1])];
                                            jQuery.fn.attr.call(selector, context, true);
                                        } else {
                                            selector = [doc.createElement(ret[1])];
                                        }
                                    } else {
                                        ret = jQuery.buildFragment([match[1]], [doc]);
                                        selector = (ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment).childNodes;
                                    }
                                    return jQuery.merge(this, selector);    // HANDLE: $("#id")
                                } else {
                                    elem = document.getElementById(match[2]);
                                    // Check parentNode to catch when Blackberry 4.6 returns
                                    // nodes that are no longer in the document #6963
                                    if (elem && elem.parentNode) {
                                        // Handle the case where IE and Opera return items
                                        // by name instead of ID
                                        if (elem.id !== match[2]) {
                                            return rootjQuery.find(selector);
                                        }
                                        // Otherwise, we inject the element directly into the jQuery object
                                        this.length = 1;
                                        this[0] = elem;
                                    }
                                    this.context = document;
                                    this.selector = selector;
                                    return this;
                                }    // HANDLE: $(expr, $(...))
                            } else if (!context || context.jquery) {
                                return (context || rootjQuery).find(selector);    // HANDLE: $(expr, context)
                                // (which is just equivalent to: $(context).find(expr)
                            } else {
                                return this.constructor(context).find(selector);
                            }    // HANDLE: $(function)
                            // Shortcut for document ready
                        } else if (jQuery.isFunction(selector)) {
                            return rootjQuery.ready(selector);
                        }
                        if (selector.selector !== undefined) {
                            this.selector = selector.selector;
                            this.context = selector.context;
                        }
                        return jQuery.makeArray(selector, this);
                    },
                    selector: "",
                    jquery: "1.7.2",
                    length: 0,
                    size: function () {
                        return this.length;
                    },
                    toArray: function () {
                        return slice.call(this, 0);
                    },
                    get: function (num) {
                        return num == null ? this.toArray() : num < 0 ? __get$(this, this.length + num) : __get$(this, num);
                    },
                    pushStack: function (elems, name, selector) {
                        // Build a new jQuery matched element set
                        var ret = this.constructor();
                        if (jQuery.isArray(elems)) {
                            push.apply(ret, elems);
                        } else {
                            jQuery.merge(ret, elems);
                        }
                        // Add the old object onto the stack (as a reference)
                        ret.prevObject = this;
                        ret.context = this.context;
                        if (name === "find") {
                            ret.selector = this.selector + (this.selector ? " " : "") + selector;
                        } else if (name) {
                            ret.selector = this.selector + "." + name + "(" + selector + ")";
                        }
                        // Return the newly-formed element set
                        return ret;
                    },
                    each: function (callback, args) {
                        return jQuery.each(this, callback, args);
                    },
                    ready: function (fn) {
                        // Attach the listeners
                        jQuery.bindReady();
                        // Add the callback
                        readyList.add(fn);
                        return this;
                    },
                    eq: function (i) {
                        i = +i;
                        return i === -1 ? this.slice(i) : this.slice(i, i + 1);
                    },
                    first: function () {
                        return this.eq(0);
                    },
                    last: function () {
                        return this.eq(-1);
                    },
                    slice: function () {
                        return this.pushStack(slice.apply(this, arguments), "slice", slice.call(arguments).join(","));
                    },
                    map: function (callback) {
                        return this.pushStack(jQuery.map(this, function (elem, i) {
                            return callback.call(elem, i, elem);
                        }));
                    },
                    end: function () {
                        return this.prevObject || this.constructor(null);
                    },
                    push: push,
                    sort: [].sort,
                    splice: [].splice
                };
                // Give the init function the jQuery prototype for later instantiation
                jQuery.fn.init.prototype = jQuery.fn;
                jQuery.extend = jQuery.fn.extend = function () {
                    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
                    // Handle a deep copy situation
                    if (typeof target === "boolean") {
                        deep = target;
                        target = arguments[1] || {};
                        // skip the boolean and the target
                        i = 2;
                    }
                    // Handle case when target is a string or something (possible in deep copy)
                    if (typeof target !== "object" && !jQuery.isFunction(target)) {
                        target = {};
                    }
                    // extend jQuery itself if only one argument is passed
                    if (length === i) {
                        target = this;
                        --i;
                    }
                    for (; i < length; i++) {
                        // Only deal with non-null/undefined values
                        if ((options = __get$(arguments, i)) != null) {
                            // Extend the base object
                            for (name in options) {
                                src = __get$(target, name);
                                copy = __get$(options, name);
                                // Prevent never-ending loop
                                if (target === copy) {
                                    continue;
                                }
                                // Recurse if we're merging plain objects or arrays
                                if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                                    if (copyIsArray) {
                                        copyIsArray = false;
                                        clone = src && jQuery.isArray(src) ? src : [];
                                    } else {
                                        clone = src && jQuery.isPlainObject(src) ? src : {};
                                    }
                                    // Never move original objects, clone them
                                    __set$(target, name, jQuery.extend(deep, clone, copy));    // Don't bring in undefined values
                                } else if (copy !== undefined) {
                                    __set$(target, name, copy);
                                }
                            }
                        }
                    }
                    // Return the modified object
                    return target;
                };
                jQuery.extend({
                    noConflict: function (deep) {
                        if (window.$ === jQuery) {
                            window.$ = _$;
                        }
                        if (!window.$)
                            delete window.$;
                        if (deep && window.jQuery === jQuery) {
                            window.jQuery = _jQuery;
                        }
                        if (!window.jQuery)
                            delete window.jQuery;
                        return jQuery;
                    },
                    isReady: false,
                    readyWait: 1,
                    holdReady: function (hold) {
                        if (hold) {
                            jQuery.readyWait++;
                        } else {
                            jQuery.ready(true);
                        }
                    },
                    ready: function (wait) {
                        // Either a released hold or an DOMready/load event and not yet ready
                        if (wait === true && !--jQuery.readyWait || wait !== true && !jQuery.isReady) {
                            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
                            if (!document.body) {
                                return NativeMethods.setTimeout.call(window, __proc$Script(jQuery.ready), 1);
                            }
                            // Remember that the DOM is ready
                            jQuery.isReady = true;
                            // If a normal DOM Ready event fired, decrement, and wait if need be
                            if (wait !== true && --jQuery.readyWait > 0) {
                                return;
                            }
                            // If there are functions bound, to execute
                            readyList.fireWith(document, [jQuery]);
                            // Trigger any bound ready events
                            if (jQuery.fn.trigger) {
                                jQuery(document).trigger("ready").off("ready");
                            }
                        }
                    },
                    bindReady: function () {
                        if (readyList) {
                            return;
                        }
                        readyList = jQuery.Callbacks("once memory");
                        // Catch cases where $(document).ready() is called after the
                        // browser event has already occurred.
                        if (document.readyState === "complete") {
                            // Handle it asynchronously to allow scripts the opportunity to delay ready
                            return NativeMethods.setTimeout.call(window, __proc$Script(jQuery.ready), 1);
                        }
                        // Mozilla, Opera and webkit nightlies currently support this event
                        if (document.addEventListener) {
                            // Use the handy event callback
                            document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
                            // A fallback to window.onload, that will always work
                            window.addEventListener("load", jQuery.ready, false);    // If IE event model is used
                        } else if (document.attachEvent) {
                            // ensure firing before onload,
                            // maybe late but safe also for iframes
                            document.attachEvent("onreadystatechange", DOMContentLoaded);
                            // A fallback to window.onload, that will always work
                            window.attachEvent("onload", jQuery.ready);
                            // If IE and not a frame
                            // continually check to see if the document is ready
                            var toplevel = false;
                            try {
                                toplevel = window.frameElement == null;
                            } catch (e) {
                            }
                            if (document.documentElement.doScroll && toplevel) {
                                doScrollCheck();
                            }
                        }
                    },
                    isFunction: function (obj) {
                        return jQuery.type(obj) === "function";
                    },
                    isArray: Array.isArray || function (obj) {
                        return jQuery.type(obj) === "array";
                    },
                    isWindow: function (obj) {
                        return obj != null && obj == obj.window;
                    },
                    isNumeric: function (obj) {
                        return !isNaN(parseFloat(obj)) && isFinite(obj);
                    },
                    type: function (obj) {
                        return obj == null ? String(obj) : __get$(class2type, toString.call(obj)) || "object";
                    },
                    isPlainObject: function (obj) {
                        // Must be an Object.
                        // Because of IE, we also have to check the presence of the constructor property.
                        // Make sure that DOM nodes and window objects don't pass through, as well
                        if (!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)) {
                            return false;
                        }
                        try {
                            // Not own constructor property must be Object
                            if (obj.constructor && !hasOwn.call(obj, "constructor") && !hasOwn.call(obj.constructor.prototype, "isPrototypeOf")) {
                                return false;
                            }
                        } catch (e) {
                            // IE8,9 Will throw exceptions on certain host objects #9897
                            return false;
                        }
                        // Own properties are enumerated firstly, so to speed up,
                        // if last one is own, then all properties are own.
                        var key;
                        for (key in obj) {
                        }
                        return key === undefined || hasOwn.call(obj, key);
                    },
                    isEmptyObject: function (obj) {
                        for (var name in obj) {
                            return false;
                        }
                        return true;
                    },
                    error: function (msg) {
                        throw new Error(msg);
                    },
                    parseJSON: function (data) {
                        if (typeof data !== "string" || !data) {
                            return null;
                        }
                        // Make sure leading/trailing whitespace is removed (IE can't handle it)
                        data = jQuery.trim(data);
                        // Attempt to parse using the native JSON parser first
                        if (window.JSON && window.JSON.parse) {
                            return window.JSON.parse(data);
                        }
                        // Make sure the incoming data is actual JSON
                        // Logic borrowed from http://json.org/json2.js
                        if (rvalidchars.test(data.replace(rvalidescape, "@").replace(rvalidtokens, "]").replace(rvalidbraces, ""))) {
                            return new Function(__proc$Script("return " + data))();
                        }
                        jQuery.error("Invalid JSON: " + data);
                    },
                    parseXML: function (data) {
                        if (typeof data !== "string" || !data) {
                            return null;
                        }
                        var xml, tmp;
                        try {
                            if (window.DOMParser) {
                                // Standard
                                tmp = new DOMParser();
                                xml = tmp.parseFromString(data, "text/xml");
                            } else {
                                // IE
                                xml = new ActiveXObject("Microsoft.XMLDOM");
                                xml.async = "false";
                                xml.loadXML(data);
                            }
                        } catch (e) {
                            xml = undefined;
                        }
                        if (!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length) {
                            jQuery.error("Invalid XML: " + data);
                        }
                        return xml;
                    },
                    noop: function () {
                    },
                    globalEval: function (data) {
                        if (data && rnotwhite.test(data)) {
                            // We use execScript on Internet Explorer
                            // We use an anonymous function so that context is window
                            // rather than jQuery in Firefox
                            (window.execScript || function (data) {
                                window["eval"].call(window, __proc$Script(data));
                            })(data);
                        }
                    },
                    camelCase: function (string) {
                        return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
                    },
                    nodeName: function (elem, name) {
                        return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
                    },
                    each: function (object, callback, args) {
                        var name, i = 0, length = object.length, isObj = length === undefined || jQuery.isFunction(object);
                        if (args) {
                            if (isObj) {
                                for (name in object) {
                                    if (callback.apply(__get$(object, name), args) === false) {
                                        break;
                                    }
                                }
                            } else {
                                for (; i < length;) {
                                    if (callback.apply(__get$(object, i++), args) === false) {
                                        break;
                                    }
                                }
                            }    // A special, fast, case for the most common use of each
                        } else {
                            if (isObj) {
                                for (name in object) {
                                    if (callback.call(__get$(object, name), name, __get$(object, name)) === false) {
                                        break;
                                    }
                                }
                            } else {
                                for (; i < length;) {
                                    if (callback.call(__get$(object, i), i, __get$(object, i++)) === false) {
                                        break;
                                    }
                                }
                            }
                        }
                        return object;
                    },
                    trim: trim ? function (text) {
                        return text == null ? "" : trim.call(text);
                    } : function (text) {
                        return text == null ? "" : text.toString().replace(trimLeft, "").replace(trimRight, "");
                    },
                    makeArray: function (array, results) {
                        var ret = results || [];
                        if (array != null) {
                            // The window, strings (and functions) also have 'length'
                            // Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
                            var type = jQuery.type(array);
                            if (array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow(array)) {
                                push.call(ret, array);
                            } else {
                                jQuery.merge(ret, array);
                            }
                        }
                        return ret;
                    },
                    inArray: function (elem, array, i) {
                        var len;
                        if (array) {
                            if (indexOf) {
                                return indexOf.call(array, elem, i);
                            }
                            len = array.length;
                            i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                            for (; i < len; i++) {
                                // Skip accessing in sparse arrays
                                if (i in array && __get$(array, i) === elem) {
                                    return i;
                                }
                            }
                        }
                        return -1;
                    },
                    merge: function (first, second) {
                        var i = first.length, j = 0;
                        if (typeof second.length === "number") {
                            for (var l = second.length; j < l; j++) {
                                __set$(first, i++, __get$(second, j));
                            }
                        } else {
                            while (__get$(second, j) !== undefined) {
                                __set$(first, i++, __get$(second, j++));
                            }
                        }
                        first.length = i;
                        return first;
                    },
                    grep: function (elems, callback, inv) {
                        var ret = [], retVal;
                        inv = !!inv;
                        // Go through the array, only saving the items
                        // that pass the validator function
                        for (var i = 0, length = elems.length; i < length; i++) {
                            retVal = !!callback(__get$(elems, i), i);
                            if (inv !== retVal) {
                                ret.push(__get$(elems, i));
                            }
                        }
                        return ret;
                    },
                    map: function (elems, callback, arg) {
                        var value, key, ret = [], i = 0, length = elems.length,
                        // jquery objects are treated as arrays
                            isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && (length > 0 && elems[0] && __get$(elems, length - 1) || length === 0 || jQuery.isArray(elems));
                        // Go through the array, translating each of the items to their
                        if (isArray) {
                            for (; i < length; i++) {
                                value = callback(__get$(elems, i), i, arg);
                                if (value != null) {
                                    __set$(ret, ret.length, value);
                                }
                            }    // Go through every key on the object,
                        } else {
                            for (key in elems) {
                                value = callback(__get$(elems, key), key, arg);
                                if (value != null) {
                                    __set$(ret, ret.length, value);
                                }
                            }
                        }
                        // Flatten any nested arrays
                        return ret.concat.apply([], ret);
                    },
                    guid: 1,
                    proxy: function (fn, context) {
                        if (typeof context === "string") {
                            var tmp = __get$(fn, context);
                            context = fn;
                            fn = tmp;
                        }
                        // Quick check to determine if target is callable, in the spec
                        // this throws a TypeError, but we will just return undefined.
                        if (!jQuery.isFunction(fn)) {
                            return undefined;
                        }
                        // Simulated bind
                        var args = slice.call(arguments, 2), proxy = function () {
                            return fn.apply(context, args.concat(slice.call(arguments)));
                        };
                        // Set the guid of unique handler to the same of original handler, so it can be removed
                        proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;
                        return proxy;
                    },
                    access: function (elems, fn, key, value, chainable, emptyGet, pass) {
                        var exec, bulk = key == null, i = 0, length = elems.length;
                        // Sets many values
                        if (key && typeof key === "object") {
                            for (i in key) {
                                jQuery.access(elems, fn, i, __get$(key, i), 1, emptyGet, value);
                            }
                            chainable = 1;    // Sets one value
                        } else if (value !== undefined) {
                            // Optionally, function values get executed if exec is true
                            exec = pass === undefined && jQuery.isFunction(value);
                            if (bulk) {
                                // Bulk operations only iterate when executing function values
                                if (exec) {
                                    exec = fn;
                                    fn = function (elem, key, value) {
                                        return exec.call(jQuery(elem), value);
                                    };    // Otherwise they run against the entire set
                                } else {
                                    fn.call(elems, value);
                                    fn = null;
                                }
                            }
                            if (fn) {
                                for (; i < length; i++) {
                                    fn(__get$(elems, i), key, exec ? value.call(__get$(elems, i), i, fn(__get$(elems, i), key)) : value, pass);
                                }
                            }
                            chainable = 1;
                        }
                        return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
                    },
                    now: function () {
                        return new Date().getTime();
                    },
                    uaMatch: function (ua) {
                        ua = ua.toLowerCase();
                        var match = rwebkit.exec(ua) || ropera.exec(ua) || rmsie.exec(ua) || ua.indexOf("compatible") < 0 && rmozilla.exec(ua) || [];
                        return {
                            browser: match[1] || "",
                            version: match[2] || "0"
                        };
                    },
                    sub: function () {
                        function jQuerySub(selector, context) {
                            return new jQuerySub.fn.init(selector, context);
                        }
                        jQuery.extend(true, jQuerySub, this);
                        jQuerySub.superclass = this;
                        jQuerySub.fn = jQuerySub.prototype = this();
                        jQuerySub.fn.constructor = jQuerySub;
                        jQuerySub.sub = this.sub;
                        jQuerySub.fn.init = function init(selector, context) {
                            if (context && context instanceof jQuery && !(context instanceof jQuerySub)) {
                                context = jQuerySub(context);
                            }
                            return jQuery.fn.init.call(this, selector, context, rootjQuerySub);
                        };
                        jQuerySub.fn.init.prototype = jQuerySub.fn;
                        var rootjQuerySub = jQuerySub(document);
                        return jQuerySub;
                    },
                    browser: {}
                });
                // Populate the class2type map
                jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function (i, name) {
                    __set$(class2type, "[object " + name + "]", name.toLowerCase());
                });
                browserMatch = jQuery.uaMatch(userAgent);
                if (browserMatch.browser) {
                    __set$(jQuery.browser, browserMatch.browser, true);
                    jQuery.browser.version = browserMatch.version;
                }
                // Deprecated, use jQuery.browser.webkit instead
                if (jQuery.browser.webkit) {
                    jQuery.browser.safari = true;
                }
                // IE doesn't match non-breaking spaces with \s
                if (rnotwhite.test("\xa0")) {
                    trimLeft = /^[\s\xA0]+/;
                    trimRight = /[\s\xA0]+$/;
                }
                // All jQuery objects should point back to these
                rootjQuery = jQuery(document);
                // Cleanup functions for the document ready method
                if (document.addEventListener) {
                    DOMContentLoaded = function () {
                        document.removeEventListener("DOMContentLoaded", DOMContentLoaded, false);
                        jQuery.ready();
                    };
                } else if (document.attachEvent) {
                    DOMContentLoaded = function () {
                        // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
                        if (document.readyState === "complete") {
                            document.detachEvent("onreadystatechange", DOMContentLoaded);
                            jQuery.ready();
                        }
                    };
                }
                // The DOM ready check for Internet Explorer
                function doScrollCheck() {
                    if (jQuery.isReady) {
                        return;
                    }
                    try {
                        // If IE is used, use the trick by Diego Perini
                        // http://javascript.nwbox.com/IEContentLoaded/
                        document.documentElement.doScroll("left");
                    } catch (e) {
                        NativeMethods.setTimeout.call(window, __proc$Script(doScrollCheck), 1);
                        return;
                    }
                    // and execute any waiting functions
                    jQuery.ready();
                }
                return jQuery;
            }();
            // String to Object flags format cache
            var flagsCache = {};
            // Convert String-formatted flags into Object-formatted ones and store in cache
            function createFlags(flags) {
                var object = __set$(flagsCache, flags, {}), i, length;
                flags = flags.split(/\s+/);
                for (i = 0, length = flags.length; i < length; i++) {
                    __set$(object, __get$(flags, i), true);
                }
                return object;
            }
            /*
             * Create a callback list using the following parameters:
             *
             *	flags:	an optional list of space-separated flags that will change how
             *			the callback list behaves
             *
             * By default a callback list will act like an event callback list and can be
             * "fired" multiple times.
             *
             * Possible flags:
             *
             *	once:			will ensure the callback list can only be fired once (like a Deferred)
             *
             *	memory:			will keep track of previous values and will call any callback added
             *					after the list has been fired right away with the latest "memorized"
             *					values (like a Deferred)
             *
             *	unique:			will ensure a callback can only be added once (no duplicate in the list)
             *
             *	stopOnFalse:	interrupt callings when a callback returns false
             *
             */
            jQuery.Callbacks = function (flags) {
                // Convert flags from String-formatted to Object-formatted
                // (we check in cache first)
                flags = flags ? __get$(flagsCache, flags) || createFlags(flags) : {};
                var
                // Actual callback list
                    list = [],
                // Stack of fire calls for repeatable lists
                    stack = [],
                // Last fire value (for non-forgettable lists)
                    memory,
                // Flag to know if list was already fired
                    fired,
                // Flag to know if list is currently firing
                    firing,
                // First callback to fire (used internally by add and fireWith)
                    firingStart,
                // End of the loop when firing
                    firingLength,
                // Index of currently firing callback (modified by remove if needed)
                    firingIndex,
                // Add one or several callbacks to the list
                    add = function (args) {
                        var i, length, elem, type, actual;
                        for (i = 0, length = args.length; i < length; i++) {
                            elem = __get$(args, i);
                            type = jQuery.type(elem);
                            if (type === "array") {
                                // Inspect recursively
                                add(elem);
                            } else if (type === "function") {
                                // Add if not in unique mode and callback is not in
                                if (!flags.unique || !self.has(elem)) {
                                    list.push(elem);
                                }
                            }
                        }
                    },
                // Fire callbacks
                    fire = function (context, args) {
                        args = args || [];
                        memory = !flags.memory || [
                            context,
                            args
                        ];
                        fired = true;
                        firing = true;
                        firingIndex = firingStart || 0;
                        firingStart = 0;
                        firingLength = list.length;
                        for (; list && firingIndex < firingLength; firingIndex++) {
                            if (__get$(list, firingIndex).apply(context, args) === false && flags.stopOnFalse) {
                                memory = true;
                                // Mark as halted
                                break;
                            }
                        }
                        firing = false;
                        if (list) {
                            if (!flags.once) {
                                if (stack && stack.length) {
                                    memory = stack.shift();
                                    self.fireWith(memory[0], memory[1]);
                                }
                            } else if (memory === true) {
                                self.disable();
                            } else {
                                list = [];
                            }
                        }
                    },
                // Actual Callbacks object
                    self = {
                        add: function () {
                            if (list) {
                                var length = list.length;
                                add(arguments);
                                // Do we need to add the callbacks to the
                                // current firing batch?
                                if (firing) {
                                    firingLength = list.length;    // With memory, if we're not firing then
                                    // we should call right away, unless previous
                                    // firing was halted (stopOnFalse)
                                } else if (memory && memory !== true) {
                                    firingStart = length;
                                    fire(memory[0], memory[1]);
                                }
                            }
                            return this;
                        },
                        remove: function () {
                            if (list) {
                                var args = arguments, argIndex = 0, argLength = args.length;
                                for (; argIndex < argLength; argIndex++) {
                                    for (var i = 0; i < list.length; i++) {
                                        if (__get$(args, argIndex) === __get$(list, i)) {
                                            // Handle firingIndex and firingLength
                                            if (firing) {
                                                if (i <= firingLength) {
                                                    firingLength--;
                                                    if (i <= firingIndex) {
                                                        firingIndex--;
                                                    }
                                                }
                                            }
                                            // Remove the element
                                            list.splice(i--, 1);
                                            // If we have some unicity property then
                                            // we only need to do this once
                                            if (flags.unique) {
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            return this;
                        },
                        has: function (fn) {
                            if (list) {
                                var i = 0, length = list.length;
                                for (; i < length; i++) {
                                    if (fn === __get$(list, i)) {
                                        return true;
                                    }
                                }
                            }
                            return false;
                        },
                        empty: function () {
                            list = [];
                            return this;
                        },
                        disable: function () {
                            list = stack = memory = undefined;
                            return this;
                        },
                        disabled: function () {
                            return !list;
                        },
                        lock: function () {
                            stack = undefined;
                            if (!memory || memory === true) {
                                self.disable();
                            }
                            return this;
                        },
                        locked: function () {
                            return !stack;
                        },
                        fireWith: function (context, args) {
                            if (stack) {
                                if (firing) {
                                    if (!flags.once) {
                                        stack.push([
                                            context,
                                            args
                                        ]);
                                    }
                                } else if (!(flags.once && memory)) {
                                    fire(context, args);
                                }
                            }
                            return this;
                        },
                        fire: function () {
                            self.fireWith(this, arguments);
                            return this;
                        },
                        fired: function () {
                            return !!fired;
                        }
                    };
                return self;
            };
            var
            // Static reference to slice
                sliceDeferred = [].slice;
            jQuery.extend({
                Deferred: function (func) {
                    var doneList = jQuery.Callbacks("once memory"), failList = jQuery.Callbacks("once memory"), progressList = jQuery.Callbacks("memory"), state = "pending", lists = {
                        resolve: doneList,
                        reject: failList,
                        notify: progressList
                    }, promise = {
                        done: doneList.add,
                        fail: failList.add,
                        progress: progressList.add,
                        state: function () {
                            return state;
                        },
                        isResolved: doneList.fired,
                        isRejected: failList.fired,
                        then: function (doneCallbacks, failCallbacks, progressCallbacks) {
                            deferred.done(doneCallbacks).fail(failCallbacks).progress(progressCallbacks);
                            return this;
                        },
                        always: function () {
                            deferred.done.apply(deferred, arguments).fail.apply(deferred, arguments);
                            return this;
                        },
                        pipe: function (fnDone, fnFail, fnProgress) {
                            return jQuery.Deferred(function (newDefer) {
                                jQuery.each({
                                    done: [
                                        fnDone,
                                        "resolve"
                                    ],
                                    fail: [
                                        fnFail,
                                        "reject"
                                    ],
                                    progress: [
                                        fnProgress,
                                        "notify"
                                    ]
                                }, function (handler, data) {
                                    var fn = data[0], action = data[1], returned;
                                    if (jQuery.isFunction(fn)) {
                                        __call$(deferred, handler, [function () {
                                            returned = fn.apply(this, arguments);
                                            if (returned && jQuery.isFunction(returned.promise)) {
                                                returned.promise().then(newDefer.resolve, newDefer.reject, newDefer.notify);
                                            } else {
                                                __call$(newDefer, action + "With", [this === deferred ? newDefer : this, [returned]]);
                                            }
                                        }]);
                                    } else {
                                        __call$(deferred, handler, [__get$(newDefer, action)]);
                                    }
                                });
                            }).promise();
                        },
                        promise: function (obj) {
                            if (obj == null) {
                                obj = promise;
                            } else {
                                for (var key in promise) {
                                    __set$(obj, key, __get$(promise, key));
                                }
                            }
                            return obj;
                        }
                    }, deferred = promise.promise({}), key;
                    for (key in lists) {
                        __set$(deferred, key, __get$(lists, key).fire);
                        __set$(deferred, key + "With", __get$(lists, key).fireWith);
                    }
                    // Handle state
                    deferred.done(function () {
                        state = "resolved";
                    }, failList.disable, progressList.lock).fail(function () {
                            state = "rejected";
                        }, doneList.disable, progressList.lock);
                    // Call given func if any
                    if (func) {
                        func.call(deferred, deferred);
                    }
                    // All done!
                    return deferred;
                },
                when: function (firstParam) {
                    var args = sliceDeferred.call(arguments, 0), i = 0, length = args.length, pValues = new Array(length), count = length, pCount = length, deferred = length <= 1 && firstParam && jQuery.isFunction(firstParam.promise) ? firstParam : jQuery.Deferred(), promise = deferred.promise();
                    function resolveFunc(i) {
                        return function (value) {
                            __set$(args, i, arguments.length > 1 ? sliceDeferred.call(arguments, 0) : value);
                            if (!--count) {
                                deferred.resolveWith(deferred, args);
                            }
                        };
                    }
                    function progressFunc(i) {
                        return function (value) {
                            __set$(pValues, i, arguments.length > 1 ? sliceDeferred.call(arguments, 0) : value);
                            deferred.notifyWith(promise, pValues);
                        };
                    }
                    if (length > 1) {
                        for (; i < length; i++) {
                            if (__get$(args, i) && __get$(args, i).promise && jQuery.isFunction(__get$(args, i).promise)) {
                                __get$(args, i).promise().then(resolveFunc(i), deferred.reject, progressFunc(i));
                            } else {
                                --count;
                            }
                        }
                        if (!count) {
                            deferred.resolveWith(deferred, args);
                        }
                    } else if (deferred !== firstParam) {
                        deferred.resolveWith(deferred, length ? [firstParam] : []);
                    }
                    return promise;
                }
            });
            jQuery.support = function () {
                var support, all, a, select, opt, input, fragment, tds, events, eventName, i, isSupported, div = document.createElement("div"), documentElement = document.documentElement;
                // Preliminary tests
                div.setAttribute("className", "t");
                __set$(div, "innerHTML", "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>");
                all = div.getElementsByTagName("*");
                a = div.getElementsByTagName("a")[0];
                // Can't get basic test support
                if (!all || !all.length || !a) {
                    return {};
                }
                // First batch of supports tests
                select = document.createElement("select");
                opt = select.appendChild(document.createElement("option"));
                input = div.getElementsByTagName("input")[0];
                support = {
                    leadingWhitespace: div.firstChild.nodeType === 3,
                    tbody: !div.getElementsByTagName("tbody").length,
                    htmlSerialize: !!div.getElementsByTagName("link").length,
                    style: /top/.test(a.getAttribute("style")),
                    hrefNormalized: a.getAttribute("href") === "/a",
                    opacity: /^0.55/.test(a.style.opacity),
                    cssFloat: !!a.style.cssFloat,
                    checkOn: __get$(input, "value") === "on",
                    optSelected: opt.selected,
                    getSetAttribute: div.className !== "t",
                    enctype: !!document.createElement("form").enctype,
                    html5Clone: document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>",
                    submitBubbles: true,
                    changeBubbles: true,
                    focusinBubbles: false,
                    deleteExpando: true,
                    noCloneEvent: true,
                    inlineBlockNeedsLayout: false,
                    shrinkWrapBlocks: false,
                    reliableMarginRight: true,
                    pixelMargin: true
                };
                // jQuery.boxModel DEPRECATED in 1.3, use jQuery.support.boxModel instead
                jQuery.boxModel = support.boxModel = document.compatMode === "CSS1Compat";
                // Make sure checked status is properly cloned
                input.checked = true;
                support.noCloneChecked = input.cloneNode(true).checked;
                // Make sure that the options inside disabled selects aren't marked as disabled
                // (WebKit marks them as disabled)
                select.disabled = true;
                support.optDisabled = !opt.disabled;
                // Test to see if it's possible to delete an expando from an element
                // Fails in Internet Explorer
                try {
                    delete div.test;
                } catch (e) {
                    support.deleteExpando = false;
                }
                if (!div.addEventListener && div.attachEvent && div.fireEvent) {
                    div.attachEvent("onclick", function () {
                        // Cloning a node shouldn't copy over any
                        // bound event handlers (IE does this)
                        support.noCloneEvent = false;
                    });
                    div.cloneNode(true).fireEvent("onclick");
                }
                // Check if a radio maintains its value
                // after being appended to the DOM
                input = document.createElement("input");
                __set$(input, "value", "t");
                input.setAttribute("type", "radio");
                support.radioValue = __get$(input, "value") === "t";
                input.setAttribute("checked", "checked");
                // #11217 - WebKit loses check when the name is after the checked attribute
                input.setAttribute("name", "t");
                div.appendChild(input);
                fragment = document.createDocumentFragment();
                fragment.appendChild(div.lastChild);
                // WebKit doesn't clone checked state correctly in fragments
                support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
                // Check if a disconnected checkbox will retain its checked
                // value of true after appended to the DOM (IE6/7)
                support.appendChecked = input.checked;
                fragment.removeChild(input);
                fragment.appendChild(div);
                // Technique from Juriy Zaytsev
                // http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
                // We only care about the case where non-standard event systems
                // are used, namely in IE. Short-circuiting here helps us to
                // avoid an eval call (in setAttribute) which can cause CSP
                // to go haywire. See: https://developer.mozilla.org/en/Security/CSP
                if (div.attachEvent) {
                    for (i in {
                        submit: 1,
                        change: 1,
                        focusin: 1
                    }) {
                        eventName = "on" + i;
                        isSupported = eventName in div;
                        if (!isSupported) {
                            div.setAttribute(eventName, "return;");
                            isSupported = typeof __get$(div, eventName) === "function";
                        }
                        __set$(support, i + "Bubbles", isSupported);
                    }
                }
                fragment.removeChild(div);
                // Null elements to avoid leaks in IE
                fragment = select = opt = div = input = null;
                // Run tests that need a body at doc ready
                jQuery(function () {
                    var container, outer, inner, table, td, offsetSupport, marginDiv, conMarginTop, style, html, positionTopLeftWidthHeight, paddingMarginBorderVisibility, paddingMarginBorder, body = document.getElementsByTagName("body")[0];
                    if (!body) {
                        // Return for frameset docs that don't have a body
                        return;
                    }
                    conMarginTop = 1;
                    paddingMarginBorder = "padding:0;margin:0;border:";
                    positionTopLeftWidthHeight = "position:absolute;top:0;left:0;width:1px;height:1px;";
                    paddingMarginBorderVisibility = paddingMarginBorder + "0;visibility:hidden;";
                    style = "style='" + positionTopLeftWidthHeight + paddingMarginBorder + "5px solid #000;";
                    html = "<div " + style + "display:block;'><div style='" + paddingMarginBorder + "0;display:block;overflow:hidden;'></div></div>" + "<table " + style + "' cellpadding='0' cellspacing='0'>" + "<tr><td></td></tr></table>";
                    container = document.createElement("div");
                    __set$(container.style, "cssText", paddingMarginBorderVisibility + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px");
                    body.insertBefore(container, body.firstChild);
                    // Construct the test element
                    div = document.createElement("div");
                    container.appendChild(div);
                    // Check if table cells still have offsetWidth/Height when they are set
                    // to display:none and there are still other visible table cells in a
                    // table row; if so, offsetWidth/Height are not reliable for use when
                    // determining if an element has been hidden directly using
                    // display:none (it is still safe to use offsets if a parent element is
                    // hidden; don safety goggles and see bug #4512 for more information).
                    // (only IE 8 fails this test)
                    __set$(div, "innerHTML", "<table><tr><td style='" + paddingMarginBorder + "0;display:none'></td><td>t</td></tr></table>");
                    tds = div.getElementsByTagName("td");
                    isSupported = tds[0].offsetHeight === 0;
                    tds[0].style.display = "";
                    tds[1].style.display = "none";
                    // Check if empty table cells still have offsetWidth/Height
                    // (IE <= 8 fail this test)
                    support.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;
                    // Check if div with explicit width and no margin-right incorrectly
                    // gets computed margin-right based on width of container. For more
                    // info see bug #3333
                    // Fails in WebKit before Feb 2011 nightlies
                    // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                    if (window.getComputedStyle) {
                        __set$(div, "innerHTML", "");
                        marginDiv = document.createElement("div");
                        marginDiv.style.width = "0";
                        marginDiv.style.marginRight = "0";
                        div.style.width = "2px";
                        div.appendChild(marginDiv);
                        support.reliableMarginRight = (parseInt((window.getComputedStyle(marginDiv, null) || { marginRight: 0 }).marginRight, 10) || 0) === 0;
                    }
                    if (typeof div.style.zoom !== "undefined") {
                        // Check if natively block-level elements act like inline-block
                        // elements when setting their display to 'inline' and giving
                        // them layout
                        // (IE < 8 does this)
                        __set$(div, "innerHTML", "");
                        div.style.width = div.style.padding = "1px";
                        div.style.border = 0;
                        div.style.overflow = "hidden";
                        div.style.display = "inline";
                        div.style.zoom = 1;
                        support.inlineBlockNeedsLayout = div.offsetWidth === 3;
                        // Check if elements with layout shrink-wrap their children
                        // (IE 6 does this)
                        div.style.display = "block";
                        div.style.overflow = "visible";
                        __set$(div, "innerHTML", "<div style='width:5px;'></div>");
                        support.shrinkWrapBlocks = div.offsetWidth !== 3;
                    }
                    __set$(div.style, "cssText", positionTopLeftWidthHeight + paddingMarginBorderVisibility);
                    __set$(div, "innerHTML", html);
                    outer = div.firstChild;
                    inner = outer.firstChild;
                    td = outer.nextSibling.firstChild.firstChild;
                    offsetSupport = {
                        doesNotAddBorder: inner.offsetTop !== 5,
                        doesAddBorderForTableAndCells: td.offsetTop === 5
                    };
                    inner.style.position = "fixed";
                    inner.style.top = "20px";
                    // safari subtracts parent border width here which is 5px
                    offsetSupport.fixedPosition = inner.offsetTop === 20 || inner.offsetTop === 15;
                    inner.style.position = inner.style.top = "";
                    outer.style.overflow = "hidden";
                    outer.style.position = "relative";
                    offsetSupport.subtractsBorderForOverflowNotVisible = inner.offsetTop === -5;
                    offsetSupport.doesNotIncludeMarginInBodyOffset = body.offsetTop !== conMarginTop;
                    if (window.getComputedStyle) {
                        div.style.marginTop = "1%";
                        support.pixelMargin = (window.getComputedStyle(div, null) || { marginTop: 0 }).marginTop !== "1%";
                    }
                    if (typeof container.style.zoom !== "undefined") {
                        container.style.zoom = 1;
                    }
                    body.removeChild(container);
                    marginDiv = div = container = null;
                    jQuery.extend(support, offsetSupport);
                });
                return support;
            }();
            var rbrace = /^(?:\{.*\}|\[.*\])$/, rmultiDash = /([A-Z])/g;
            jQuery.extend({
                cache: {},
                uuid: 0,
                expando: "jQuery" + (jQuery.fn.jquery + Math.random()).replace(/\D/g, ""),
                noData: {
                    "embed": true,
                    "object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
                    "applet": true
                },
                hasData: function (elem) {
                    elem = elem.nodeType ? __get$(jQuery.cache, __get$(elem, jQuery.expando)) : __get$(elem, jQuery.expando);
                    return !!elem && !isEmptyDataObject(elem);
                },
                data: function (elem, name, data, pvt) {
                    if (!jQuery.acceptData(elem)) {
                        return;
                    }
                    var privateCache, thisCache, ret, internalKey = jQuery.expando, getByName = typeof name === "string",
                    // We have to handle DOM nodes and JS objects differently because IE6-7
                    // can't GC object references properly across the DOM-JS boundary
                        isNode = elem.nodeType,
                    // Only DOM nodes need the global jQuery cache; JS object data is
                    // attached directly to the object so GC can occur automatically
                        cache = isNode ? jQuery.cache : elem,
                    // Only defining an ID for JS objects if its cache already exists allows
                    // the code to shortcut on the same path as a DOM node with no cache
                        id = isNode ? __get$(elem, internalKey) : __get$(elem, internalKey) && internalKey, isEvents = name === "events";
                    // Avoid doing any more work than we need to when trying to get data on an
                    // object that has no data at all
                    if ((!id || !__get$(cache, id) || !isEvents && !pvt && !__get$(__get$(cache, id), "data")) && getByName && data === undefined) {
                        return;
                    }
                    if (!id) {
                        // Only DOM nodes need a new unique ID for each element since their data
                        // ends up in the global cache
                        if (isNode) {
                            __set$(elem, internalKey, id = ++jQuery.uuid);
                        } else {
                            id = internalKey;
                        }
                    }
                    if (!__get$(cache, id)) {
                        __set$(cache, id, {});
                        // Avoids exposing jQuery metadata on plain JS objects when the object
                        // is serialized using JSON.stringify
                        if (!isNode) {
                            __get$(cache, id).toJSON = jQuery.noop;
                        }
                    }
                    // An object can be passed to jQuery.data instead of a key/value pair; this gets
                    // shallow copied over onto the existing cache
                    if (typeof name === "object" || typeof name === "function") {
                        if (pvt) {
                            __set$(cache, id, jQuery.extend(__get$(cache, id), name));
                        } else {
                            __set$(__get$(cache, id), "data", jQuery.extend(__get$(__get$(cache, id), "data"), name));
                        }
                    }
                    privateCache = thisCache = __get$(cache, id);
                    // jQuery data() is stored in a separate object inside the object's internal data
                    // cache in order to avoid key collisions between internal data and user-defined
                    // data.
                    if (!pvt) {
                        if (!__get$(thisCache, "data")) {
                            __set$(thisCache, "data", {});
                        }
                        thisCache = __get$(thisCache, "data");
                    }
                    if (data !== undefined) {
                        __set$(thisCache, jQuery.camelCase(name), data);
                    }
                    // Users should not attempt to inspect the internal events object using jQuery.data,
                    // it is undocumented and subject to change. But does anyone listen? No.
                    if (isEvents && !__get$(thisCache, name)) {
                        return privateCache.events;
                    }
                    // Check for both converted-to-camel and non-converted data property names
                    // If a data property was specified
                    if (getByName) {
                        // First Try to find as-is property data
                        ret = __get$(thisCache, name);
                        // Test for null|undefined property data
                        if (ret == null) {
                            // Try to find the camelCased property
                            ret = __get$(thisCache, jQuery.camelCase(name));
                        }
                    } else {
                        ret = thisCache;
                    }
                    return ret;
                },
                removeData: function (elem, name, pvt) {
                    if (!jQuery.acceptData(elem)) {
                        return;
                    }
                    var thisCache, i, l,
                    // Reference to internal data cache key
                        internalKey = jQuery.expando, isNode = elem.nodeType,
                    // See jQuery.data for more information
                        cache = isNode ? jQuery.cache : elem,
                    // See jQuery.data for more information
                        id = isNode ? __get$(elem, internalKey) : internalKey;
                    // If there is already no cache entry for this object, there is no
                    // purpose in continuing
                    if (!__get$(cache, id)) {
                        return;
                    }
                    if (name) {
                        thisCache = pvt ? __get$(cache, id) : __get$(__get$(cache, id), "data");
                        if (thisCache) {
                            // Support array or space separated string names for data keys
                            if (!jQuery.isArray(name)) {
                                // try the string as a key before any manipulation
                                if (name in thisCache) {
                                    name = [name];
                                } else {
                                    // split the camel cased version by spaces unless a key with the spaces exists
                                    name = jQuery.camelCase(name);
                                    if (name in thisCache) {
                                        name = [name];
                                    } else {
                                        name = name.split(" ");
                                    }
                                }
                            }
                            for (i = 0, l = name.length; i < l; i++) {
                                delete thisCache[__get$(name, i)];
                            }
                            // If there is no data left in the cache, we want to continue
                            // and let the cache object itself get destroyed
                            if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
                                return;
                            }
                        }
                    }
                    // See jQuery.data for more information
                    if (!pvt) {
                        delete __get$(cache, id).data;
                        // Don't destroy the parent cache unless the internal data object
                        // had been the only thing left in it
                        if (!isEmptyDataObject(__get$(cache, id))) {
                            return;
                        }
                    }
                    // Browsers that fail expando deletion also refuse to delete expandos on
                    // the window, but it will allow it on all other JS objects; other browsers
                    // don't care
                    // Ensure that `cache` is not a window object #10080
                    if (jQuery.support.deleteExpando || !cache.setInterval) {
                        delete cache[id];
                    } else {
                        __set$(cache, id, null);
                    }
                    // We destroyed the cache and need to eliminate the expando on the node to avoid
                    // false lookups in the cache for entries that no longer exist
                    if (isNode) {
                        // IE does not allow us to delete expando properties from nodes,
                        // nor does it have a removeAttribute function on Document nodes;
                        // we must handle all of these cases
                        if (jQuery.support.deleteExpando) {
                            delete elem[internalKey];
                        } else if (elem.removeAttribute) {
                            elem.removeAttribute(internalKey);
                        } else {
                            __set$(elem, internalKey, null);
                        }
                    }
                },
                _data: function (elem, name, data) {
                    return jQuery.data(elem, name, data, true);
                },
                acceptData: function (elem) {
                    if (elem.nodeName) {
                        var match = __get$(jQuery.noData, elem.nodeName.toLowerCase());
                        if (match) {
                            return !(match === true || elem.getAttribute("classid") !== match);
                        }
                    }
                    return true;
                }
            });
            jQuery.fn.extend({
                data: function (key, value) {
                    var parts, part, attr, name, l, elem = this[0], i = 0, data = null;
                    // Gets all values
                    if (key === undefined) {
                        if (this.length) {
                            data = jQuery.data(elem);
                            if (elem.nodeType === 1 && !jQuery._data(elem, "parsedAttrs")) {
                                attr = __get$(elem, "attributes");
                                for (l = attr.length; i < l; i++) {
                                    name = __get$(attr, i).name;
                                    if (name.indexOf("data-") === 0) {
                                        name = jQuery.camelCase(name.substring(5));
                                        dataAttr(elem, name, __get$(data, name));
                                    }
                                }
                                jQuery._data(elem, "parsedAttrs", true);
                            }
                        }
                        return data;
                    }
                    // Sets multiple values
                    if (typeof key === "object") {
                        return this.each(function () {
                            jQuery.data(this, key);
                        });
                    }
                    parts = key.split(".", 2);
                    parts[1] = parts[1] ? "." + parts[1] : "";
                    part = parts[1] + "!";
                    return jQuery.access(this, function (value) {
                        if (value === undefined) {
                            data = this.triggerHandler("getData" + part, [parts[0]]);
                            // Try to fetch any internally stored data first
                            if (data === undefined && elem) {
                                data = jQuery.data(elem, key);
                                data = dataAttr(elem, key, data);
                            }
                            return data === undefined && parts[1] ? this.data(parts[0]) : data;
                        }
                        parts[1] = value;
                        this.each(function () {
                            var self = jQuery(this);
                            self.triggerHandler("setData" + part, parts);
                            jQuery.data(this, key, value);
                            self.triggerHandler("changeData" + part, parts);
                        });
                    }, null, value, arguments.length > 1, null, false);
                },
                removeData: function (key) {
                    return this.each(function () {
                        jQuery.removeData(this, key);
                    });
                }
            });
            function dataAttr(elem, key, data) {
                // If nothing was found internally, try to fetch any
                // data from the HTML5 data-* attribute
                if (data === undefined && elem.nodeType === 1) {
                    var name = "data-" + key.replace(rmultiDash, "-$1").toLowerCase();
                    data = elem.getAttribute(name);
                    if (typeof data === "string") {
                        try {
                            data = data === "true" ? true : data === "false" ? false : data === "null" ? null : jQuery.isNumeric(data) ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                        } catch (e) {
                        }
                        // Make sure we set the data so it isn't changed later
                        jQuery.data(elem, key, data);
                    } else {
                        data = undefined;
                    }
                }
                return data;
            }
            // checks a cache object for emptiness
            function isEmptyDataObject(obj) {
                for (var name in obj) {
                    // if the public data object is empty, the private is still empty
                    if (name === "data" && jQuery.isEmptyObject(__get$(obj, name))) {
                        continue;
                    }
                    if (name !== "toJSON") {
                        return false;
                    }
                }
                return true;
            }
            function handleQueueMarkDefer(elem, type, src) {
                var deferDataKey = type + "defer", queueDataKey = type + "queue", markDataKey = type + "mark", defer = jQuery._data(elem, deferDataKey);
                if (defer && (src === "queue" || !jQuery._data(elem, queueDataKey)) && (src === "mark" || !jQuery._data(elem, markDataKey))) {
                    // Give room for hard-coded callbacks to fire first
                    // and eventually mark/queue something else on the element
                    NativeMethods.setTimeout.call(window, __proc$Script(function () {
                        if (!jQuery._data(elem, queueDataKey) && !jQuery._data(elem, markDataKey)) {
                            jQuery.removeData(elem, deferDataKey, true);
                            defer.fire();
                        }
                    }), 0);
                }
            }
            jQuery.extend({
                _mark: function (elem, type) {
                    if (elem) {
                        type = (type || "fx") + "mark";
                        jQuery._data(elem, type, (jQuery._data(elem, type) || 0) + 1);
                    }
                },
                _unmark: function (force, elem, type) {
                    if (force !== true) {
                        type = elem;
                        elem = force;
                        force = false;
                    }
                    if (elem) {
                        type = type || "fx";
                        var key = type + "mark", count = force ? 0 : (jQuery._data(elem, key) || 1) - 1;
                        if (count) {
                            jQuery._data(elem, key, count);
                        } else {
                            jQuery.removeData(elem, key, true);
                            handleQueueMarkDefer(elem, type, "mark");
                        }
                    }
                },
                queue: function (elem, type, data) {
                    var q;
                    if (elem) {
                        type = (type || "fx") + "queue";
                        q = jQuery._data(elem, type);
                        // Speed up dequeue by getting out quickly if this is just a lookup
                        if (data) {
                            if (!q || jQuery.isArray(data)) {
                                q = jQuery._data(elem, type, jQuery.makeArray(data));
                            } else {
                                q.push(data);
                            }
                        }
                        return q || [];
                    }
                },
                dequeue: function (elem, type) {
                    type = type || "fx";
                    var queue = jQuery.queue(elem, type), fn = queue.shift(), hooks = {};
                    // If the fx queue is dequeued, always remove the progress sentinel
                    if (fn === "inprogress") {
                        fn = queue.shift();
                    }
                    if (fn) {
                        // Add a progress sentinel to prevent the fx queue from being
                        // automatically dequeued
                        if (type === "fx") {
                            queue.unshift("inprogress");
                        }
                        jQuery._data(elem, type + ".run", hooks);
                        fn.call(elem, function () {
                            jQuery.dequeue(elem, type);
                        }, hooks);
                    }
                    if (!queue.length) {
                        jQuery.removeData(elem, type + "queue " + type + ".run", true);
                        handleQueueMarkDefer(elem, type, "queue");
                    }
                }
            });
            jQuery.fn.extend({
                queue: function (type, data) {
                    var setter = 2;
                    if (typeof type !== "string") {
                        data = type;
                        type = "fx";
                        setter--;
                    }
                    if (arguments.length < setter) {
                        return jQuery.queue(this[0], type);
                    }
                    return data === undefined ? this : this.each(function () {
                        var queue = jQuery.queue(this, type, data);
                        if (type === "fx" && queue[0] !== "inprogress") {
                            jQuery.dequeue(this, type);
                        }
                    });
                },
                dequeue: function (type) {
                    return this.each(function () {
                        jQuery.dequeue(this, type);
                    });
                },
                delay: function (time, type) {
                    time = jQuery.fx ? __get$(jQuery.fx.speeds, time) || time : time;
                    type = type || "fx";
                    return this.queue(type, function (next, hooks) {
                        var timeout = NativeMethods.setTimeout.call(window, __proc$Script(next), time);
                        hooks.stop = function () {
                            clearTimeout(timeout);
                        };
                    });
                },
                clearQueue: function (type) {
                    return this.queue(type || "fx", []);
                },
                promise: function (type, object) {
                    if (typeof type !== "string") {
                        object = type;
                        type = undefined;
                    }
                    type = type || "fx";
                    var defer = jQuery.Deferred(), elements = this, i = elements.length, count = 1, deferDataKey = type + "defer", queueDataKey = type + "queue", markDataKey = type + "mark", tmp;
                    function resolve() {
                        if (!--count) {
                            defer.resolveWith(elements, [elements]);
                        }
                    }
                    while (i--) {
                        if (tmp = jQuery.data(__get$(elements, i), deferDataKey, undefined, true) || (jQuery.data(__get$(elements, i), queueDataKey, undefined, true) || jQuery.data(__get$(elements, i), markDataKey, undefined, true)) && jQuery.data(__get$(elements, i), deferDataKey, jQuery.Callbacks("once memory"), true)) {
                            count++;
                            tmp.add(resolve);
                        }
                    }
                    resolve();
                    return defer.promise(object);
                }
            });
            var rclass = /[\n\t\r]/g, rspace = /\s+/, rreturn = /\r/g, rtype = /^(?:button|input)$/i, rfocusable = /^(?:button|input|object|select|textarea)$/i, rclickable = /^a(?:rea)?$/i, rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute, nodeHook, boolHook, fixSpecified;
            jQuery.fn.extend({
                attr: function (name, value) {
                    return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
                },
                removeAttr: function (name) {
                    return this.each(function () {
                        jQuery.removeAttr(this, name);
                    });
                },
                prop: function (name, value) {
                    return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
                },
                removeProp: function (name) {
                    name = __get$(jQuery.propFix, name) || name;
                    return this.each(function () {
                        // try/catch handles cases where IE balks (such as removing a property on window)
                        try {
                            __set$(this, name, undefined);
                            delete this[name];
                        } catch (e) {
                        }
                    });
                },
                addClass: function (value) {
                    var classNames, i, l, elem, setClass, c, cl;
                    if (jQuery.isFunction(value)) {
                        return this.each(function (j) {
                            jQuery(this).addClass(value.call(this, j, this.className));
                        });
                    }
                    if (value && typeof value === "string") {
                        classNames = value.split(rspace);
                        for (i = 0, l = this.length; i < l; i++) {
                            elem = __get$(this, i);
                            if (elem.nodeType === 1) {
                                if (!elem.className && classNames.length === 1) {
                                    elem.className = value;
                                } else {
                                    setClass = " " + elem.className + " ";
                                    for (c = 0, cl = classNames.length; c < cl; c++) {
                                        if (!~setClass.indexOf(" " + __get$(classNames, c) + " ")) {
                                            setClass = setClass + (__get$(classNames, c) + " ");
                                        }
                                    }
                                    elem.className = jQuery.trim(setClass);
                                }
                            }
                        }
                    }
                    return this;
                },
                removeClass: function (value) {
                    var classNames, i, l, elem, className, c, cl;
                    if (jQuery.isFunction(value)) {
                        return this.each(function (j) {
                            jQuery(this).removeClass(value.call(this, j, this.className));
                        });
                    }
                    if (value && typeof value === "string" || value === undefined) {
                        classNames = (value || "").split(rspace);
                        for (i = 0, l = this.length; i < l; i++) {
                            elem = this[i];
                            if (elem.nodeType === 1 && elem.className) {
                                if (value) {
                                    className = (" " + elem.className + " ").replace(rclass, " ");
                                    for (c = 0, cl = classNames.length; c < cl; c++) {
                                        className = className.replace(" " + __get$(classNames, c) + " ", " ");
                                    }
                                    elem.className = jQuery.trim(className);
                                } else {
                                    elem.className = "";
                                }
                            }
                        }
                    }
                    return this;
                },
                toggleClass: function (value, stateVal) {
                    var type = typeof value, isBool = typeof stateVal === "boolean";
                    if (jQuery.isFunction(value)) {
                        return this.each(function (i) {
                            jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                        });
                    }
                    return this.each(function () {
                        if (type === "string") {
                            // toggle individual class names
                            var className, i = 0, self = jQuery(this), state = stateVal, classNames = value.split(rspace);
                            while (className = __get$(classNames, i++)) {
                                // check each className given, space seperated list
                                state = isBool ? state : !self.hasClass(className);
                                __call$(self, state ? "addClass" : "removeClass", [className]);
                            }
                        } else if (type === "undefined" || type === "boolean") {
                            if (this.className) {
                                // store className if set
                                jQuery._data(this, "__className__", this.className);
                            }
                            // toggle whole className
                            this.className = this.className || value === false ? "" : jQuery._data(this, "__className__") || "";
                        }
                    });
                },
                hasClass: function (selector) {
                    var className = " " + selector + " ", i = 0, l = this.length;
                    for (; i < l; i++) {
                        if (__get$(this, i).nodeType === 1 && (" " + __get$(this, i).className + " ").replace(rclass, " ").indexOf(className) > -1) {
                            return true;
                        }
                    }
                    return false;
                },
                val: function (value) {
                    var hooks, ret, isFunction, elem = this[0];
                    if (!arguments.length) {
                        if (elem) {
                            hooks = __get$(jQuery.valHooks, elem.type) || __get$(jQuery.valHooks, elem.nodeName.toLowerCase());
                            if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
                                return ret;
                            }
                            ret = __get$(elem, "value");
                            return typeof ret === "string" ? ret.replace(rreturn, "") : ret == null ? "" : ret;
                        }
                        return;
                    }
                    isFunction = jQuery.isFunction(value);
                    return this.each(function (i) {
                        var self = jQuery(this), val;
                        if (this.nodeType !== 1) {
                            return;
                        }
                        if (isFunction) {
                            val = value.call(this, i, self.val());
                        } else {
                            val = value;
                        }
                        // Treat null/undefined as ""; convert numbers to string
                        if (val == null) {
                            val = "";
                        } else if (typeof val === "number") {
                            val = val + "";
                        } else if (jQuery.isArray(val)) {
                            val = jQuery.map(val, function (value) {
                                return value == null ? "" : value + "";
                            });
                        }
                        hooks = __get$(jQuery.valHooks, this.type) || __get$(jQuery.valHooks, this.nodeName.toLowerCase());
                        // If set returns undefined, fall back to normal setting
                        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
                            __set$(this, "value", val);
                        }
                    });
                }
            });
            jQuery.extend({
                valHooks: {
                    option: {
                        get: function (elem) {
                            // attributes.value is undefined in Blackberry 4.7 but
                            // uses .value. See #6932
                            var val = __get$(__get$(elem, "attributes"), "value");
                            return !val || val.specified ? __get$(elem, "value") : __get$(elem, "text");
                        }
                    },
                    select: {
                        get: function (elem) {
                            var value, i, max, option, index = elem.selectedIndex, values = [], options = elem.options, one = elem.type === "select-one";
                            // Nothing was selected
                            if (index < 0) {
                                return null;
                            }
                            // Loop through all the selected options
                            i = one ? index : 0;
                            max = one ? index + 1 : options.length;
                            for (; i < max; i++) {
                                option = __get$(options, i);
                                // Don't return options that are disabled or in a disabled optgroup
                                if (option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, "optgroup"))) {
                                    // Get the specific value for the option
                                    value = jQuery(option).val();
                                    // We don't need an array for one selects
                                    if (one) {
                                        return value;
                                    }
                                    // Multi-Selects return an array
                                    values.push(value);
                                }
                            }
                            // Fixes Bug #2551 -- select.val() broken in IE after form.reset()
                            if (one && !values.length && options.length) {
                                return jQuery(__get$(options, index)).val();
                            }
                            return values;
                        },
                        set: function (elem, value) {
                            var values = jQuery.makeArray(value);
                            jQuery(elem).find("option").each(function () {
                                this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                            });
                            if (!values.length) {
                                elem.selectedIndex = -1;
                            }
                            return values;
                        }
                    }
                },
                attrFn: {
                    val: true,
                    css: true,
                    html: true,
                    text: true,
                    data: true,
                    width: true,
                    height: true,
                    offset: true
                },
                attr: function (elem, name, value, pass) {
                    var ret, hooks, notxml, nType = elem.nodeType;
                    // don't get/set attributes on text, comment and attribute nodes
                    if (!elem || nType === 3 || nType === 8 || nType === 2) {
                        return;
                    }
                    if (pass && name in jQuery.attrFn) {
                        return __call$(jQuery(elem), name, [value]);
                    }
                    // Fallback to prop when attributes are not supported
                    if (typeof elem.getAttribute === "undefined") {
                        return jQuery.prop(elem, name, value);
                    }
                    notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                    // All attributes are lowercase
                    // Grab necessary hook if one is defined
                    if (notxml) {
                        name = name.toLowerCase();
                        hooks = __get$(jQuery.attrHooks, name) || (rboolean.test(name) ? boolHook : nodeHook);
                    }
                    if (value !== undefined) {
                        if (value === null) {
                            jQuery.removeAttr(elem, name);
                            return;
                        } else if (hooks && "set" in hooks && notxml && (ret = hooks.set(elem, value, name)) !== undefined) {
                            return ret;
                        } else {
                            elem.setAttribute(name, "" + value);
                            return value;
                        }
                    } else if (hooks && "get" in hooks && notxml && (ret = hooks.get(elem, name)) !== null) {
                        return ret;
                    } else {
                        ret = elem.getAttribute(name);
                        // Non-existent attributes return null, we normalize to undefined
                        return ret === null ? undefined : ret;
                    }
                },
                removeAttr: function (elem, value) {
                    var propName, attrNames, name, l, isBool, i = 0;
                    if (value && elem.nodeType === 1) {
                        attrNames = value.toLowerCase().split(rspace);
                        l = attrNames.length;
                        for (; i < l; i++) {
                            name = __get$(attrNames, i);
                            if (name) {
                                propName = __get$(jQuery.propFix, name) || name;
                                isBool = rboolean.test(name);
                                // See #9699 for explanation of this approach (setting first, then removal)
                                // Do not do this for boolean attributes (see #10870)
                                if (!isBool) {
                                    jQuery.attr(elem, name, "");
                                }
                                elem.removeAttribute(getSetAttribute ? name : propName);
                                // Set corresponding property to false for boolean attributes
                                if (isBool && propName in elem) {
                                    __set$(elem, propName, false);
                                }
                            }
                        }
                    }
                },
                attrHooks: {
                    type: {
                        set: function (elem, value) {
                            // We can't allow the type property to be changed (since it causes problems in IE)
                            if (rtype.test(elem.nodeName) && elem.parentNode) {
                                jQuery.error("type property can't be changed");
                            } else if (!jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input")) {
                                // Setting the type on a radio button after the value resets the value in IE6-9
                                // Reset value to it's default in case type is set after value
                                // This is for element creation
                                var val = __get$(elem, "value");
                                elem.setAttribute("type", value);
                                if (val) {
                                    __set$(elem, "value", val);
                                }
                                return value;
                            }
                        }
                    },
                    value: {
                        get: function (elem, name) {
                            if (nodeHook && jQuery.nodeName(elem, "button")) {
                                return nodeHook.get(elem, name);
                            }
                            return name in elem ? __get$(elem, "value") : null;
                        },
                        set: function (elem, value, name) {
                            if (nodeHook && jQuery.nodeName(elem, "button")) {
                                return nodeHook.set(elem, value, name);
                            }
                            // Does not return so that setAttribute is also used
                            __set$(elem, "value", value);
                        }
                    }
                },
                propFix: {
                    tabindex: "tabIndex",
                    readonly: "readOnly",
                    "for": "htmlFor",
                    "class": "className",
                    maxlength: "maxLength",
                    cellspacing: "cellSpacing",
                    cellpadding: "cellPadding",
                    rowspan: "rowSpan",
                    colspan: "colSpan",
                    usemap: "useMap",
                    frameborder: "frameBorder",
                    contenteditable: "contentEditable"
                },
                prop: function (elem, name, value) {
                    var ret, hooks, notxml, nType = elem.nodeType;
                    // don't get/set properties on text, comment and attribute nodes
                    if (!elem || nType === 3 || nType === 8 || nType === 2) {
                        return;
                    }
                    notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
                    if (notxml) {
                        // Fix name and attach hooks
                        name = __get$(jQuery.propFix, name) || name;
                        hooks = __get$(jQuery.propHooks, name);
                    }
                    if (value !== undefined) {
                        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                            return ret;
                        } else {
                            return __set$(elem, name, value);
                        }
                    } else {
                        if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
                            return ret;
                        } else {
                            return __get$(elem, name);
                        }
                    }
                },
                propHooks: {
                    tabIndex: {
                        get: function (elem) {
                            // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
                            // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
                            var attributeNode = elem.getAttributeNode("tabindex");
                            return attributeNode && attributeNode.specified ? parseInt(__get$(attributeNode, "value"), 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && __get$(elem, "href") ? 0 : undefined;
                        }
                    }
                }
            });
            // Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
            jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;
            // Hook for boolean attributes
            boolHook = {
                get: function (elem, name) {
                    // Align boolean attributes with corresponding properties
                    // Fall back to attribute presence where some booleans are not supported
                    var attrNode, property = jQuery.prop(elem, name);
                    return property === true || typeof property !== "boolean" && (attrNode = elem.getAttributeNode(name)) && attrNode.nodeValue !== false ? name.toLowerCase() : undefined;
                },
                set: function (elem, value, name) {
                    var propName;
                    if (value === false) {
                        // Remove boolean attributes when set to false
                        jQuery.removeAttr(elem, name);
                    } else {
                        // value is true since we know at this point it's type boolean and not false
                        // Set boolean attributes to the same name and set the DOM property
                        propName = __get$(jQuery.propFix, name) || name;
                        if (propName in elem) {
                            // Only set the IDL specifically if it already exists on the element
                            __set$(elem, propName, true);
                        }
                        elem.setAttribute(name, name.toLowerCase());
                    }
                    return name;
                }
            };
            // IE6/7 do not support getting/setting some attributes with get/setAttribute
            if (!getSetAttribute) {
                fixSpecified = {
                    name: true,
                    id: true,
                    coords: true
                };
                // Use this for any attribute in IE6/7
                // This fixes almost every IE6/7 issue
                nodeHook = jQuery.valHooks.button = {
                    get: function (elem, name) {
                        var ret;
                        ret = elem.getAttributeNode(name);
                        return ret && (__get$(fixSpecified, name) ? ret.nodeValue !== "" : ret.specified) ? ret.nodeValue : undefined;
                    },
                    set: function (elem, value, name) {
                        // Set the existing or create a new attribute node
                        var ret = elem.getAttributeNode(name);
                        if (!ret) {
                            ret = document.createAttribute(name);
                            elem.setAttributeNode(ret);
                        }
                        return ret.nodeValue = value + "";
                    }
                };
                // Apply the nodeHook to tabindex
                jQuery.attrHooks.tabindex.set = nodeHook.set;
                // Set width and height to auto instead of 0 on empty string( Bug #8150 )
                // This is for removals
                jQuery.each([
                    "width",
                    "height"
                ], function (i, name) {
                    __set$(jQuery.attrHooks, name, jQuery.extend(__get$(jQuery.attrHooks, name), {
                        set: function (elem, value) {
                            if (value === "") {
                                elem.setAttribute(name, "auto");
                                return value;
                            }
                        }
                    }));
                });
                // Set contenteditable to false on removals(#10429)
                // Setting to empty string throws an error as an invalid value
                jQuery.attrHooks.contenteditable = {
                    get: nodeHook.get,
                    set: function (elem, value, name) {
                        if (value === "") {
                            value = "false";
                        }
                        nodeHook.set(elem, value, name);
                    }
                };
            }
            // Some attributes require a special call on IE
            if (!jQuery.support.hrefNormalized) {
                jQuery.each([
                    "href",
                    "src",
                    "width",
                    "height"
                ], function (i, name) {
                    __set$(jQuery.attrHooks, name, jQuery.extend(__get$(jQuery.attrHooks, name), {
                        get: function (elem) {
                            var ret = elem.getAttribute(name, 2);
                            return ret === null ? undefined : ret;
                        }
                    }));
                });
            }
            if (!jQuery.support.style) {
                jQuery.attrHooks.style = {
                    get: function (elem) {
                        // Return undefined in the case of empty string
                        // Normalize to lowercase since IE uppercases css property names
                        return __get$(elem.style, "cssText").toLowerCase() || undefined;
                    },
                    set: function (elem, value) {
                        return __set$(elem.style, "cssText", "" + value);
                    }
                };
            }
            // Safari mis-reports the default selected property of an option
            // Accessing the parent's selectedIndex property fixes it
            if (!jQuery.support.optSelected) {
                jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
                    get: function (elem) {
                        var parent = elem.parentNode;
                        if (parent) {
                            parent.selectedIndex;
                            // Make sure that it also works with optgroups, see #5701
                            if (parent.parentNode) {
                                parent.parentNode.selectedIndex;
                            }
                        }
                        return null;
                    }
                });
            }
            // IE6/7 call enctype encoding
            if (!jQuery.support.enctype) {
                jQuery.propFix.enctype = "encoding";
            }
            // Radios and checkboxes getter/setter
            if (!jQuery.support.checkOn) {
                jQuery.each([
                    "radio",
                    "checkbox"
                ], function () {
                    __set$(jQuery.valHooks, this, {
                        get: function (elem) {
                            // Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
                            return elem.getAttribute("value") === null ? "on" : __get$(elem, "value");
                        }
                    });
                });
            }
            jQuery.each([
                "radio",
                "checkbox"
            ], function () {
                __set$(jQuery.valHooks, this, jQuery.extend(__get$(jQuery.valHooks, this), {
                    set: function (elem, value) {
                        if (jQuery.isArray(value)) {
                            return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
                        }
                    }
                }));
            });
            var rformElems = /^(?:textarea|input|select)$/i, rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/, rhoverHack = /(?:^|\s)hover(\.\S+)?\b/, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/, quickParse = function (selector) {
                var quick = rquickIs.exec(selector);
                if (quick) {
                    //   0  1    2   3
                    // [ _, tag, id, class ]
                    quick[1] = (quick[1] || "").toLowerCase();
                    quick[3] = quick[3] && new RegExp("(?:^|\\s)" + quick[3] + "(?:\\s|$)");
                }
                return quick;
            }, quickIs = function (elem, m) {
                var attrs = __get$(elem, "attributes") || {};
                return (!m[1] || elem.nodeName.toLowerCase() === m[1]) && (!m[2] || __get$(attrs.id || {}, "value") === m[2]) && (!m[3] || m[3].test(__get$(attrs["class"] || {}, "value")));
            }, hoverHack = function (events) {
                return jQuery.event.special.hover ? events : events.replace(rhoverHack, "mouseenter$1 mouseleave$1");
            };
            /*
             * Helper functions for managing events -- not part of the public interface.
             * Props to Dean Edwards' addEvent library for many of the ideas.
             */
            jQuery.event = {
                add: function (elem, types, handler, data, selector) {
                    var elemData, eventHandle, events, t, tns, type, namespaces, handleObj, handleObjIn, quick, handlers, special;
                    // Don't attach events to noData or text/comment nodes (allow plain objects tho)
                    if (elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data(elem))) {
                        return;
                    }
                    // Caller can pass in an object of custom data in lieu of the handler
                    if (handler.handler) {
                        handleObjIn = handler;
                        handler = handleObjIn.handler;
                        selector = handleObjIn.selector;
                    }
                    // Make sure that the handler has a unique ID, used to find/remove it later
                    if (!handler.guid) {
                        handler.guid = jQuery.guid++;
                    }
                    // Init the element's event structure and main handler, if this is the first
                    events = elemData.events;
                    if (!events) {
                        elemData.events = events = {};
                    }
                    eventHandle = elemData.handle;
                    if (!eventHandle) {
                        elemData.handle = eventHandle = function (e) {
                            // Discard the second event of a jQuery.event.trigger() and
                            // when an event is called after a page has unloaded
                            return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                        };
                        // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
                        eventHandle.elem = elem;
                    }
                    // Handle multiple events separated by a space
                    // jQuery(...).bind("mouseover mouseout", fn);
                    types = jQuery.trim(hoverHack(types)).split(" ");
                    for (t = 0; t < types.length; t++) {
                        tns = rtypenamespace.exec(__get$(types, t)) || [];
                        type = tns[1];
                        namespaces = (tns[2] || "").split(".").sort();
                        // If event changes its type, use the special event handlers for the changed type
                        special = __get$(jQuery.event.special, type) || {};
                        // If selector defined, determine special event api type, otherwise given type
                        type = (selector ? special.delegateType : special.bindType) || type;
                        // Update special based on newly reset type
                        special = __get$(jQuery.event.special, type) || {};
                        // handleObj is passed to all event handlers
                        handleObj = jQuery.extend({
                            type: type,
                            origType: tns[1],
                            data: data,
                            handler: handler,
                            guid: handler.guid,
                            selector: selector,
                            quick: selector && quickParse(selector),
                            namespace: namespaces.join(".")
                        }, handleObjIn);
                        // Init the event handler queue if we're the first
                        handlers = __get$(events, type);
                        if (!handlers) {
                            handlers = __set$(events, type, []);
                            handlers.delegateCount = 0;
                            // Only use addEventListener/attachEvent if the special events handler returns false
                            if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                                // Bind the global event handler to the element
                                if (elem.addEventListener) {
                                    elem.addEventListener(type, eventHandle, false);
                                } else if (elem.attachEvent) {
                                    elem.attachEvent("on" + type, eventHandle);
                                }
                            }
                        }
                        if (special.add) {
                            special.add.call(elem, handleObj);
                            if (!handleObj.handler.guid) {
                                handleObj.handler.guid = handler.guid;
                            }
                        }
                        // Add to the element's handler list, delegates in front
                        if (selector) {
                            handlers.splice(handlers.delegateCount++, 0, handleObj);
                        } else {
                            handlers.push(handleObj);
                        }
                        // Keep track of which events have ever been used, for event optimization
                        __set$(jQuery.event.global, type, true);
                    }
                    // Nullify elem to prevent memory leaks in IE
                    elem = null;
                },
                global: {},
                remove: function (elem, types, handler, selector, mappedTypes) {
                    var elemData = jQuery.hasData(elem) && jQuery._data(elem), t, tns, type, origType, namespaces, origCount, j, events, special, handle, eventType, handleObj;
                    if (!elemData || !(events = elemData.events)) {
                        return;
                    }
                    // Once for each type.namespace in types; type may be omitted
                    types = jQuery.trim(hoverHack(types || "")).split(" ");
                    for (t = 0; t < types.length; t++) {
                        tns = rtypenamespace.exec(__get$(types, t)) || [];
                        type = origType = tns[1];
                        namespaces = tns[2];
                        // Unbind all events (on this namespace, if provided) for the element
                        if (!type) {
                            for (type in events) {
                                jQuery.event.remove(elem, type + __get$(types, t), handler, selector, true);
                            }
                            continue;
                        }
                        special = __get$(jQuery.event.special, type) || {};
                        type = (selector ? special.delegateType : special.bindType) || type;
                        eventType = __get$(events, type) || [];
                        origCount = eventType.length;
                        namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
                        // Remove matching events
                        for (j = 0; j < eventType.length; j++) {
                            handleObj = __get$(eventType, j);
                            if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!namespaces || namespaces.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
                                eventType.splice(j--, 1);
                                if (handleObj.selector) {
                                    eventType.delegateCount--;
                                }
                                if (special.remove) {
                                    special.remove.call(elem, handleObj);
                                }
                            }
                        }
                        // Remove generic event handler if we removed something and no more handlers exist
                        // (avoids potential for endless recursion during removal of special event handlers)
                        if (eventType.length === 0 && origCount !== eventType.length) {
                            if (!special.teardown || special.teardown.call(elem, namespaces) === false) {
                                jQuery.removeEvent(elem, type, elemData.handle);
                            }
                            delete events[type];
                        }
                    }
                    // Remove the expando if it's no longer used
                    if (jQuery.isEmptyObject(events)) {
                        handle = elemData.handle;
                        if (handle) {
                            handle.elem = null;
                        }
                        // removeData also checks for emptiness and clears the expando if empty
                        // so use it instead of delete
                        jQuery.removeData(elem, [
                            "events",
                            "handle"
                        ], true);
                    }
                },
                customEvent: {
                    "getData": true,
                    "setData": true,
                    "changeData": true
                },
                trigger: function (event, data, elem, onlyHandlers) {
                    // Don't do events on text and comment nodes
                    if (elem && (elem.nodeType === 3 || elem.nodeType === 8)) {
                        return;
                    }
                    // Event object or event type
                    var type = event.type || event, namespaces = [], cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;
                    // focus/blur morphs to focusin/out; ensure we're not firing them right now
                    if (rfocusMorph.test(type + jQuery.event.triggered)) {
                        return;
                    }
                    if (type.indexOf("!") >= 0) {
                        // Exclusive events trigger only for the exact event (no namespaces)
                        type = type.slice(0, -1);
                        exclusive = true;
                    }
                    if (type.indexOf(".") >= 0) {
                        // Namespaced trigger; create a regexp to match event type in handle()
                        namespaces = type.split(".");
                        type = namespaces.shift();
                        namespaces.sort();
                    }
                    if ((!elem || __get$(jQuery.event.customEvent, type)) && !__get$(jQuery.event.global, type)) {
                        // No jQuery handlers for this event type, and it can't have inline handlers
                        return;
                    }
                    // Caller can pass in an Event, Object, or just an event type string
                    event = typeof event === "object" ? __get$(event, jQuery.expando) ? event : new jQuery.Event(type, event) : new jQuery.Event(type);
                    event.type = type;
                    event.isTrigger = true;
                    event.exclusive = exclusive;
                    event.namespace = namespaces.join(".");
                    event.namespace_re = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
                    ontype = type.indexOf(":") < 0 ? "on" + type : "";
                    // Handle a global trigger
                    if (!elem) {
                        // TODO: Stop taunting the data cache; remove global events and always attach to document
                        cache = jQuery.cache;
                        for (i in cache) {
                            if (__get$(cache, i).events && __get$(__get$(cache, i).events, type)) {
                                jQuery.event.trigger(event, data, __get$(cache, i).handle.elem, true);
                            }
                        }
                        return;
                    }
                    // Clean up the event in case it is being reused
                    event.result = undefined;
                    if (!__get$(event, "target")) {
                        __set$(event, "target", elem);
                    }
                    // Clone any incoming data and prepend the event, creating the handler arg list
                    data = data != null ? jQuery.makeArray(data) : [];
                    data.unshift(event);
                    // Allow special events to draw outside the lines
                    special = __get$(jQuery.event.special, type) || {};
                    if (special.trigger && special.trigger.apply(elem, data) === false) {
                        return;
                    }
                    // Determine event propagation path in advance, per W3C events spec (#9951)
                    // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
                    eventPath = [[
                        elem,
                        special.bindType || type
                    ]];
                    if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                        bubbleType = special.delegateType || type;
                        cur = rfocusMorph.test(bubbleType + type) ? elem : elem.parentNode;
                        old = null;
                        for (; cur; cur = cur.parentNode) {
                            eventPath.push([
                                cur,
                                bubbleType
                            ]);
                            old = cur;
                        }
                        // Only add window if we got to document (e.g., not plain obj or detached DOM)
                        if (old && old === elem.ownerDocument) {
                            eventPath.push([
                                old.defaultView || old.parentWindow || window,
                                bubbleType
                            ]);
                        }
                    }
                    // Fire handlers on the event path
                    for (i = 0; i < eventPath.length && !event.isPropagationStopped(); i++) {
                        cur = __get$(eventPath, i)[0];
                        event.type = __get$(eventPath, i)[1];
                        handle = __get$(jQuery._data(cur, "events") || {}, event.type) && jQuery._data(cur, "handle");
                        if (handle) {
                            handle.apply(cur, data);
                        }
                        // Note that this is a bare JS function and not a jQuery handler
                        handle = ontype && __get$(cur, ontype);
                        if (handle && jQuery.acceptData(cur) && handle.apply(cur, data) === false) {
                            event.preventDefault();
                        }
                    }
                    event.type = type;
                    // If nobody prevented the default action, do it now
                    if (!onlyHandlers && !event.isDefaultPrevented()) {
                        if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === "click" && jQuery.nodeName(elem, "a")) && jQuery.acceptData(elem)) {
                            // Call a native DOM method on the target with the same name name as the event.
                            // Can't use an .isFunction() check here because IE6/7 fails that test.
                            // Don't do default actions on window, that's where global variables be (#6170)
                            // IE<9 dies on focus/blur to hidden element (#1486)
                            if (ontype && __get$(elem, type) && (type !== "focus" && type !== "blur" || __get$(event, "target").offsetWidth !== 0) && !jQuery.isWindow(elem)) {
                                // Don't re-trigger an onFOO event when we call its FOO() method
                                old = __get$(elem, ontype);
                                if (old) {
                                    __set$(elem, ontype, null);
                                }
                                // Prevent re-triggering of the same event, since we already bubbled it above
                                jQuery.event.triggered = type;
                                if (!Util.isDocumentInstance(elem) || type !== 'ready')
                                    __call$(elem, type, []);
                                jQuery.event.triggered = undefined;
                                if (old) {
                                    __set$(elem, ontype, old);
                                }
                            }
                        }
                    }
                    return event.result;
                },
                dispatch: function (event) {
                    // Make a writable jQuery.Event from the native event object
                    event = jQuery.event.fix(event || window.event);
                    var handlers = __get$(jQuery._data(this, "events") || {}, event.type) || [], delegateCount = handlers.delegateCount, args = [].slice.call(arguments, 0), run_all = !event.exclusive && !event.namespace, special = __get$(jQuery.event.special, event.type) || {}, handlerQueue = [], i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;
                    // Use the fix-ed jQuery.Event rather than the (read-only) native event
                    args[0] = event;
                    event.delegateTarget = this;
                    // Call the preDispatch hook for the mapped type, and let it bail if desired
                    if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                        return;
                    }
                    // Determine handlers that should run if there are delegated events
                    // Avoid non-left-click bubbling in Firefox (#3861)
                    if (delegateCount && !(event.button && event.type === "click")) {
                        // Pregenerate a single jQuery object for reuse with .is()
                        jqcur = jQuery(this);
                        jqcur.context = this.ownerDocument || this;
                        for (cur = __get$(event, "target"); cur != this; cur = cur.parentNode || this) {
                            // Don't process events on disabled elements (#6911, #8165)
                            if (cur.disabled !== true) {
                                selMatch = {};
                                matches = [];
                                jqcur[0] = cur;
                                for (i = 0; i < delegateCount; i++) {
                                    handleObj = __get$(handlers, i);
                                    sel = handleObj.selector;
                                    if (__get$(selMatch, sel) === undefined) {
                                        __set$(selMatch, sel, handleObj.quick ? quickIs(cur, handleObj.quick) : jqcur.is(sel));
                                    }
                                    if (__get$(selMatch, sel)) {
                                        matches.push(handleObj);
                                    }
                                }
                                if (matches.length) {
                                    handlerQueue.push({
                                        elem: cur,
                                        matches: matches
                                    });
                                }
                            }
                        }
                    }
                    // Add the remaining (directly-bound) handlers
                    if (handlers.length > delegateCount) {
                        handlerQueue.push({
                            elem: this,
                            matches: handlers.slice(delegateCount)
                        });
                    }
                    // Run delegates first; they may want to stop propagation beneath us
                    for (i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++) {
                        matched = __get$(handlerQueue, i);
                        event.currentTarget = matched.elem;
                        for (j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++) {
                            handleObj = __get$(matched.matches, j);
                            // Triggered event must either 1) be non-exclusive and have no namespace, or
                            // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
                            if (run_all || !event.namespace && !handleObj.namespace || event.namespace_re && event.namespace_re.test(handleObj.namespace)) {
                                __set$(event, "data", __get$(handleObj, "data"));
                                event.handleObj = handleObj;
                                ret = ((__get$(jQuery.event.special, handleObj.origType) || {}).handle || handleObj.handler).apply(matched.elem, args);
                                if (ret !== undefined) {
                                    event.result = ret;
                                    if (ret === false) {
                                        event.preventDefault();
                                        event.stopPropagation();
                                    }
                                }
                            }
                        }
                    }
                    // Call the postDispatch hook for the mapped type
                    if (special.postDispatch) {
                        special.postDispatch.call(this, event);
                    }
                    return event.result;
                },
                props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                fixHooks: {},
                keyHooks: {
                    props: "char charCode key keyCode".split(" "),
                    filter: function (event, original) {
                        // Add which for key events
                        if (event.which == null) {
                            event.which = original.charCode != null ? original.charCode : original.keyCode;
                        }
                        return event;
                    }
                },
                mouseHooks: {
                    props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                    filter: function (event, original) {
                        var eventDoc, doc, body, button = original.button, fromElement = original.fromElement;
                        // Calculate pageX/Y if missing and clientX/Y available
                        if (event.pageX == null && original.clientX != null) {
                            eventDoc = __get$(event, "target").ownerDocument || document;
                            doc = eventDoc.documentElement;
                            body = eventDoc.body;
                            event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                            event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                        }
                        // Add relatedTarget, if necessary
                        if (!event.relatedTarget && fromElement) {
                            event.relatedTarget = fromElement === __get$(event, "target") ? original.toElement : fromElement;
                        }
                        // Add which for click: 1 === left; 2 === middle; 3 === right
                        // Note: button is not normalized, so don't use it
                        if (!event.which && button !== undefined) {
                            event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                        }
                        return event;
                    }
                },
                fix: function (event) {
                    if (__get$(event, jQuery.expando)) {
                        return event;
                    }
                    // Create a writable copy of the event object and normalize some properties
                    var i, prop, originalEvent = event, fixHook = __get$(jQuery.event.fixHooks, event.type) || {}, copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
                    event = jQuery.Event(originalEvent);
                    for (i = copy.length; i;) {
                        prop = __get$(copy, --i);
                        __set$(event, prop, __get$(originalEvent, prop));
                    }
                    // Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
                    if (!__get$(event, "target")) {
                        __set$(event, "target", originalEvent.srcElement || document);
                    }
                    // Target should not be a text node (#504, Safari)
                    if (__get$(event, "target").nodeType === 3) {
                        __set$(event, "target", __get$(event, "target").parentNode);
                    }
                    // For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
                    if (event.metaKey === undefined) {
                        event.metaKey = event.ctrlKey;
                    }
                    return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
                },
                special: {
                    ready: { setup: jQuery.bindReady },
                    load: { noBubble: true },
                    focus: { delegateType: "focusin" },
                    blur: { delegateType: "focusout" },
                    beforeunload: {
                        setup: function (data, namespaces, eventHandle) {
                            // We only want to do this special case on windows
                            if (jQuery.isWindow(this)) {
                                __set$(this, "onbeforeunload", eventHandle);
                            }
                        },
                        teardown: function (namespaces, eventHandle) {
                            if (__get$(this, "onbeforeunload") === eventHandle) {
                                __set$(this, "onbeforeunload", null);
                            }
                        }
                    }
                },
                simulate: function (type, elem, event, bubble) {
                    // Piggyback on a donor event to simulate a different one.
                    // Fake originalEvent to avoid donor's stopPropagation, but if the
                    // simulated event prevents default then we do the same on the donor.
                    var e = jQuery.extend(new jQuery.Event(), event, {
                        type: type,
                        isSimulated: true,
                        originalEvent: {}
                    });
                    if (bubble) {
                        jQuery.event.trigger(e, null, elem);
                    } else {
                        jQuery.event.dispatch.call(elem, e);
                    }
                    if (e.isDefaultPrevented()) {
                        event.preventDefault();
                    }
                }
            };
            // Some plugins are using, but it's undocumented/deprecated and will be removed.
            // The 1.7 special event interface should provide all the hooks needed now.
            jQuery.event.handle = jQuery.event.dispatch;
            jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {
                if (elem.removeEventListener) {
                    elem.removeEventListener(type, handle, false);
                }
            } : function (elem, type, handle) {
                if (elem.detachEvent) {
                    elem.detachEvent("on" + type, handle);
                }
            };
            jQuery.Event = function (src, props) {
                // Allow instantiation without the 'new' keyword
                if (!(this instanceof jQuery.Event)) {
                    return new jQuery.Event(src, props);
                }
                // Event object
                if (src && src.type) {
                    this.originalEvent = src;
                    this.type = src.type;
                    // Events bubbling up the document may have been marked as prevented
                    // by a handler lower down the tree; reflect the correct value.
                    this.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;    // Event type
                } else {
                    this.type = src;
                }
                // Put explicitly provided properties onto the event object
                if (props) {
                    jQuery.extend(this, props);
                }
                // Create a timestamp if incoming event doesn't have one
                this.timeStamp = src && src.timeStamp || jQuery.now();
                // Mark it as fixed
                __set$(this, jQuery.expando, true);
            };
            function returnFalse() {
                return false;
            }
            function returnTrue() {
                return true;
            }
            // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
            // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
            jQuery.Event.prototype = {
                preventDefault: function () {
                    this.isDefaultPrevented = returnTrue;
                    var e = this.originalEvent;
                    if (!e) {
                        return;
                    }
                    // if preventDefault exists run it on the original event
                    if (e.preventDefault) {
                        e.preventDefault();    // otherwise set the returnValue property of the original event to false (IE)
                    } else {
                        e.returnValue = false;
                    }
                },
                stopPropagation: function () {
                    this.isPropagationStopped = returnTrue;
                    var e = this.originalEvent;
                    if (!e) {
                        return;
                    }
                    // if stopPropagation exists run it on the original event
                    if (e.stopPropagation) {
                        e.stopPropagation();
                    }
                    // otherwise set the cancelBubble property of the original event to true (IE)
                    e.cancelBubble = true;
                },
                stopImmediatePropagation: function () {
                    this.isImmediatePropagationStopped = returnTrue;
                    this.stopPropagation();
                },
                isDefaultPrevented: returnFalse,
                isPropagationStopped: returnFalse,
                isImmediatePropagationStopped: returnFalse
            };
            // Create mouseenter/leave events using mouseover/out and event-time checks
            jQuery.each({
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            }, function (orig, fix) {
                __set$(jQuery.event.special, orig, {
                    delegateType: fix,
                    bindType: fix,
                    handle: function (event) {
                        var target = this, related = event.relatedTarget, handleObj = event.handleObj, selector = handleObj.selector, ret;
                        // For mousenter/leave call the handler if related is outside the target.
                        // NB: No relatedTarget if the mouse left/entered the browser window
                        if (!related || related !== target && !jQuery.contains(target, related)) {
                            event.type = handleObj.origType;
                            ret = handleObj.handler.apply(this, arguments);
                            event.type = fix;
                        }
                        return ret;
                    }
                });
            });
            // IE submit delegation
            if (!jQuery.support.submitBubbles) {
                jQuery.event.special.submit = {
                    setup: function () {
                        // Only need this for delegated form submit events
                        if (jQuery.nodeName(this, "form")) {
                            return false;
                        }
                        // Lazy-add a submit handler when a descendant form may potentially be submitted
                        jQuery.event.add(this, "click._submit keypress._submit", function (e) {
                            // Node name check avoids a VML-related crash in IE (#9807)
                            var elem = __get$(e, "target"), form = jQuery.nodeName(elem, "input") || jQuery.nodeName(elem, "button") ? elem.form : undefined;
                            if (form && !form._submit_attached) {
                                jQuery.event.add(form, "submit._submit", function (event) {
                                    event._submit_bubble = true;
                                });
                                form._submit_attached = true;
                            }
                        });    // return undefined since we don't need an event listener
                    },
                    postDispatch: function (event) {
                        // If form was submitted by the user, bubble the event up the tree
                        if (event._submit_bubble) {
                            delete event._submit_bubble;
                            if (this.parentNode && !event.isTrigger) {
                                jQuery.event.simulate("submit", this.parentNode, event, true);
                            }
                        }
                    },
                    teardown: function () {
                        // Only need this for delegated form submit events
                        if (jQuery.nodeName(this, "form")) {
                            return false;
                        }
                        // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
                        jQuery.event.remove(this, "._submit");
                    }
                };
            }
            // IE change delegation and checkbox/radio fix
            if (!jQuery.support.changeBubbles) {
                jQuery.event.special.change = {
                    setup: function () {
                        if (rformElems.test(this.nodeName)) {
                            // IE doesn't fire change on a check/radio until blur; trigger it on click
                            // after a propertychange. Eat the blur-change in special.change.handle.
                            // This still fires onchange a second time for check/radio after blur.
                            if (this.type === "checkbox" || this.type === "radio") {
                                jQuery.event.add(this, "propertychange._change", function (event) {
                                    if (event.originalEvent.propertyName === "checked") {
                                        this._just_changed = true;
                                    }
                                });
                                jQuery.event.add(this, "click._change", function (event) {
                                    if (this._just_changed && !event.isTrigger) {
                                        this._just_changed = false;
                                        jQuery.event.simulate("change", this, event, true);
                                    }
                                });
                            }
                            return false;
                        }
                        // Delegated event; lazy-add a change handler on descendant inputs
                        jQuery.event.add(this, "beforeactivate._change", function (e) {
                            var elem = __get$(e, "target");
                            if (rformElems.test(elem.nodeName) && !elem._change_attached) {
                                jQuery.event.add(elem, "change._change", function (event) {
                                    if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                        jQuery.event.simulate("change", this.parentNode, event, true);
                                    }
                                });
                                elem._change_attached = true;
                            }
                        });
                    },
                    handle: function (event) {
                        var elem = __get$(event, "target");
                        // Swallow native change events from checkbox/radio, we already triggered them above
                        if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox") {
                            return event.handleObj.handler.apply(this, arguments);
                        }
                    },
                    teardown: function () {
                        jQuery.event.remove(this, "._change");
                        return rformElems.test(this.nodeName);
                    }
                };
            }
            // Create "bubbling" focus and blur events
            if (!jQuery.support.focusinBubbles) {
                jQuery.each({
                    focus: "focusin",
                    blur: "focusout"
                }, function (orig, fix) {
                    // Attach a single capturing handler while someone wants focusin/focusout
                    var attaches = 0, handler = function (event) {
                        jQuery.event.simulate(fix, __get$(event, "target"), jQuery.event.fix(event), true);
                    };
                    __set$(jQuery.event.special, fix, {
                        setup: function () {
                            if (attaches++ === 0) {
                                document.addEventListener(orig, handler, true);
                            }
                        },
                        teardown: function () {
                            if (--attaches === 0) {
                                document.removeEventListener(orig, handler, true);
                            }
                        }
                    });
                });
            }
            jQuery.fn.extend({
                on: function (types, selector, data, fn, one) {
                    var origFn, type;
                    // Types can be a map of types/handlers
                    if (typeof types === "object") {
                        // ( types-Object, selector, data )
                        if (typeof selector !== "string") {
                            // && selector != null
                            // ( types-Object, data )
                            data = data || selector;
                            selector = undefined;
                        }
                        for (type in types) {
                            this.on(type, selector, data, __get$(types, type), one);
                        }
                        return this;
                    }
                    if (data == null && fn == null) {
                        // ( types, fn )
                        fn = selector;
                        data = selector = undefined;
                    } else if (fn == null) {
                        if (typeof selector === "string") {
                            // ( types, selector, fn )
                            fn = data;
                            data = undefined;
                        } else {
                            // ( types, data, fn )
                            fn = data;
                            data = selector;
                            selector = undefined;
                        }
                    }
                    if (fn === false) {
                        fn = returnFalse;
                    } else if (!fn) {
                        return this;
                    }
                    if (one === 1) {
                        origFn = fn;
                        fn = function (event) {
                            // Can use an empty set, since event contains the info
                            jQuery().off(event);
                            return origFn.apply(this, arguments);
                        };
                        // Use same guid so caller can remove using origFn
                        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
                    }
                    return this.each(function () {
                        jQuery.event.add(this, types, fn, data, selector);
                    });
                },
                one: function (types, selector, data, fn) {
                    return this.on(types, selector, data, fn, 1);
                },
                off: function (types, selector, fn) {
                    if (types && types.preventDefault && types.handleObj) {
                        // ( event )  dispatched jQuery.Event
                        var handleObj = types.handleObj;
                        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                        return this;
                    }
                    if (typeof types === "object") {
                        // ( types-object [, selector] )
                        for (var type in types) {
                            this.off(type, selector, __get$(types, type));
                        }
                        return this;
                    }
                    if (selector === false || typeof selector === "function") {
                        // ( types [, fn] )
                        fn = selector;
                        selector = undefined;
                    }
                    if (fn === false) {
                        fn = returnFalse;
                    }
                    return this.each(function () {
                        jQuery.event.remove(this, types, fn, selector);
                    });
                },
                bind: function (types, data, fn) {
                    return this.on(types, null, data, fn);
                },
                unbind: function (types, fn) {
                    return this.off(types, null, fn);
                },
                live: function (types, data, fn) {
                    jQuery(this.context).on(types, this.selector, data, fn);
                    return this;
                },
                die: function (types, fn) {
                    jQuery(this.context).off(types, this.selector || "**", fn);
                    return this;
                },
                delegate: function (selector, types, data, fn) {
                    return this.on(types, selector, data, fn);
                },
                undelegate: function (selector, types, fn) {
                    // ( namespace ) or ( selector, types [, fn] )
                    return arguments.length == 1 ? this.off(selector, "**") : this.off(types, selector, fn);
                },
                trigger: function (type, data) {
                    return this.each(function () {
                        jQuery.event.trigger(type, data, this);
                    });
                },
                triggerHandler: function (type, data) {
                    if (this[0]) {
                        return jQuery.event.trigger(type, data, this[0], true);
                    }
                },
                toggle: function (fn) {
                    // Save reference to arguments for access in closure
                    var args = arguments, guid = fn.guid || jQuery.guid++, i = 0, toggler = function (event) {
                        // Figure out which function to execute
                        var lastToggle = (jQuery._data(this, "lastToggle" + fn.guid) || 0) % i;
                        jQuery._data(this, "lastToggle" + fn.guid, lastToggle + 1);
                        // Make sure that clicks stop
                        event.preventDefault();
                        // and execute the function
                        return __get$(args, lastToggle).apply(this, arguments) || false;
                    };
                    // link all the functions, so any of them can unbind this click handler
                    toggler.guid = guid;
                    while (i < args.length) {
                        __get$(args, i++).guid = guid;
                    }
                    return this.click(toggler);
                },
                hover: function (fnOver, fnOut) {
                    return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
                }
            });
            jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "), function (i, name) {
                // Handle event binding
                __set$(jQuery.fn, name, function (data, fn) {
                    if (fn == null) {
                        fn = data;
                        data = null;
                    }
                    return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
                });
                if (jQuery.attrFn) {
                    __set$(jQuery.attrFn, name, true);
                }
                if (rkeyEvent.test(name)) {
                    __set$(jQuery.event.fixHooks, name, jQuery.event.keyHooks);
                }
                if (rmouseEvent.test(name)) {
                    __set$(jQuery.event.fixHooks, name, jQuery.event.mouseHooks);
                }
            });
            /*!
             * Sizzle CSS Selector Engine
             *  Copyright 2011, The Dojo Foundation
             *  Released under the MIT, BSD, and GPL Licenses.
             *  More information: http://sizzlejs.com/
             */
            (function () {
                var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g, expando = "sizcache" + (Math.random() + "").replace(".", ""), done = 0, toString = Object.prototype.toString, hasDuplicate = false, baseHasDuplicate = true, rBackslash = /\\/g, rReturn = /\r\n/g, rNonWord = /\W/;
                // Here we check if the JavaScript engine is using some sort of
                // optimization where it does not always call our comparision
                // function. If that is the case, discard the hasDuplicate value.
                //   Thus far that includes Google Chrome.
                [
                    0,
                    0
                ].sort(function () {
                        baseHasDuplicate = false;
                        return 0;
                    });
                var Sizzle = function (selector, context, results, seed) {
                    results = results || [];
                    context = context || document;
                    var origContext = context;
                    if (context.nodeType !== 1 && context.nodeType !== 9) {
                        return [];
                    }
                    if (!selector || typeof selector !== "string") {
                        return results;
                    }
                    var m, set, checkSet, extra, ret, cur, pop, i, prune = true, contextXML = Sizzle.isXML(context), parts = [], soFar = selector;
                    // Reset the position of the chunker regexp (start from head)
                    do {
                        chunker.exec("");
                        m = chunker.exec(soFar);
                        if (m) {
                            soFar = m[3];
                            parts.push(m[1]);
                            if (m[2]) {
                                extra = m[3];
                                break;
                            }
                        }
                    } while (m);
                    if (parts.length > 1 && origPOS.exec(selector)) {
                        if (parts.length === 2 && __get$(Expr.relative, parts[0])) {
                            set = posProcess(parts[0] + parts[1], context, seed);
                        } else {
                            set = __get$(Expr.relative, parts[0]) ? [context] : Sizzle(parts.shift(), context);
                            while (parts.length) {
                                selector = parts.shift();
                                if (__get$(Expr.relative, selector)) {
                                    selector = selector + parts.shift();
                                }
                                set = posProcess(selector, set, seed);
                            }
                        }
                    } else {
                        // Take a shortcut and set the context if the root selector is an ID
                        // (but not if it'll be faster if the inner selector is an ID)
                        if (!seed && parts.length > 1 && context.nodeType === 9 && !contextXML && Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(__get$(parts, parts.length - 1))) {
                            ret = Sizzle.find(parts.shift(), context, contextXML);
                            context = ret.expr ? Sizzle.filter(ret.expr, ret.set)[0] : ret.set[0];
                        }
                        if (context) {
                            ret = seed ? {
                                expr: parts.pop(),
                                set: makeArray(seed)
                            } : Sizzle.find(parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML);
                            set = ret.expr ? Sizzle.filter(ret.expr, ret.set) : ret.set;
                            if (parts.length > 0) {
                                checkSet = makeArray(set);
                            } else {
                                prune = false;
                            }
                            while (parts.length) {
                                cur = parts.pop();
                                pop = cur;
                                if (!__get$(Expr.relative, cur)) {
                                    cur = "";
                                } else {
                                    pop = parts.pop();
                                }
                                if (pop == null) {
                                    pop = context;
                                }
                                __call$(Expr.relative, cur, [
                                    checkSet,
                                    pop,
                                    contextXML
                                ]);
                            }
                        } else {
                            checkSet = parts = [];
                        }
                    }
                    if (!checkSet) {
                        checkSet = set;
                    }
                    if (!checkSet) {
                        Sizzle.error(cur || selector);
                    }
                    if (toString.call(checkSet) === "[object Array]") {
                        if (!prune) {
                            results.push.apply(results, checkSet);
                        } else if (context && context.nodeType === 1) {
                            for (i = 0; __get$(checkSet, i) != null; i++) {
                                if (__get$(checkSet, i) && (__get$(checkSet, i) === true || __get$(checkSet, i).nodeType === 1 && Sizzle.contains(context, __get$(checkSet, i)))) {
                                    results.push(__get$(set, i));
                                }
                            }
                        } else {
                            for (i = 0; __get$(checkSet, i) != null; i++) {
                                if (__get$(checkSet, i) && __get$(checkSet, i).nodeType === 1) {
                                    results.push(__get$(set, i));
                                }
                            }
                        }
                    } else {
                        makeArray(checkSet, results);
                    }
                    if (extra) {
                        Sizzle(extra, origContext, results, seed);
                        Sizzle.uniqueSort(results);
                    }
                    return results;
                };
                Sizzle.uniqueSort = function (results) {
                    if (sortOrder) {
                        hasDuplicate = baseHasDuplicate;
                        results.sort(sortOrder);
                        if (hasDuplicate) {
                            for (var i = 1; i < results.length; i++) {
                                if (__get$(results, i) === __get$(results, i - 1)) {
                                    results.splice(i--, 1);
                                }
                            }
                        }
                    }
                    return results;
                };
                Sizzle.matches = function (expr, set) {
                    return Sizzle(expr, null, null, set);
                };
                Sizzle.matchesSelector = function (node, expr) {
                    return Sizzle(expr, null, null, [node]).length > 0;
                };
                Sizzle.find = function (expr, context, isXML) {
                    var set, i, len, match, type, left;
                    if (!expr) {
                        return [];
                    }
                    for (i = 0, len = Expr.order.length; i < len; i++) {
                        type = __get$(Expr.order, i);
                        if (match = __get$(Expr.leftMatch, type).exec(expr)) {
                            left = match[1];
                            match.splice(1, 1);
                            if (left.substr(left.length - 1) !== "\\") {
                                match[1] = (match[1] || "").replace(rBackslash, "");
                                set = __call$(Expr.find, type, [
                                    match,
                                    context,
                                    isXML
                                ]);
                                if (set != null) {
                                    expr = expr.replace(__get$(Expr.match, type), "");
                                    break;
                                }
                            }
                        }
                    }
                    if (!set) {
                        set = typeof context.getElementsByTagName !== "undefined" ? context.getElementsByTagName("*") : [];
                    }
                    return {
                        set: set,
                        expr: expr
                    };
                };
                Sizzle.filter = function (expr, set, inplace, not) {
                    var match, anyFound, type, found, item, filter, left, i, pass, old = expr, result = [], curLoop = set, isXMLFilter = set && set[0] && Sizzle.isXML(set[0]);
                    while (expr && set.length) {
                        for (type in Expr.filter) {
                            if ((match = __get$(Expr.leftMatch, type).exec(expr)) != null && match[2]) {
                                filter = __get$(Expr.filter, type);
                                left = match[1];
                                anyFound = false;
                                match.splice(1, 1);
                                if (left.substr(left.length - 1) === "\\") {
                                    continue;
                                }
                                if (curLoop === result) {
                                    result = [];
                                }
                                if (__get$(Expr.preFilter, type)) {
                                    match = __call$(Expr.preFilter, type, [
                                        match,
                                        curLoop,
                                        inplace,
                                        result,
                                        not,
                                        isXMLFilter
                                    ]);
                                    if (!match) {
                                        anyFound = found = true;
                                    } else if (match === true) {
                                        continue;
                                    }
                                }
                                if (match) {
                                    for (i = 0; (item = __get$(curLoop, i)) != null; i++) {
                                        if (item) {
                                            found = filter(item, match, i, curLoop);
                                            pass = not ^ found;
                                            if (inplace && found != null) {
                                                if (pass) {
                                                    anyFound = true;
                                                } else {
                                                    __set$(curLoop, i, false);
                                                }
                                            } else if (pass) {
                                                result.push(item);
                                                anyFound = true;
                                            }
                                        }
                                    }
                                }
                                if (found !== undefined) {
                                    if (!inplace) {
                                        curLoop = result;
                                    }
                                    expr = expr.replace(__get$(Expr.match, type), "");
                                    if (!anyFound) {
                                        return [];
                                    }
                                    break;
                                }
                            }
                        }
                        // Improper expression
                        if (expr === old) {
                            if (anyFound == null) {
                                Sizzle.error(expr);
                            } else {
                                break;
                            }
                        }
                        old = expr;
                    }
                    return curLoop;
                };
                Sizzle.error = function (msg) {
                    throw new Error("Syntax error, unrecognized expression: " + msg);
                };
                /**
                 * Utility function for retreiving the text value of an array of DOM nodes
                 * @param {Array|Element} elem
                 */
                var getText = Sizzle.getText = function (elem) {
                    var i, node, nodeType = elem.nodeType, ret = "";
                    if (nodeType) {
                        if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                            // Use textContent || innerText for elements
                            if (typeof elem.textContent === "string") {
                                return elem.textContent;
                            } else if (typeof elem.innerText === "string") {
                                // Replace IE's carriage returns
                                return elem.innerText.replace(rReturn, "");
                            } else {
                                // Traverse it's children
                                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                                    ret = ret + getText(elem);
                                }
                            }
                        } else if (nodeType === 3 || nodeType === 4) {
                            return elem.nodeValue;
                        }
                    } else {
                        // If no nodeType, this is expected to be an array
                        for (i = 0; node = __get$(elem, i); i++) {
                            // Do not traverse comment nodes
                            if (node.nodeType !== 8) {
                                ret = ret + getText(node);
                            }
                        }
                    }
                    return ret;
                };
                var Expr = Sizzle.selectors = {
                    order: [
                        "ID",
                        "NAME",
                        "TAG"
                    ],
                    match: {
                        ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                        CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
                        NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
                        ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
                        TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
                        CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
                        POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
                        PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
                    },
                    leftMatch: {},
                    attrMap: {
                        "class": "className",
                        "for": "htmlFor"
                    },
                    attrHandle: {
                        href: function (elem) {
                            return elem.getAttribute("href");
                        },
                        type: function (elem) {
                            return elem.getAttribute("type");
                        }
                    },
                    relative: {
                        "+": function (checkSet, part) {
                            var isPartStr = typeof part === "string", isTag = isPartStr && !rNonWord.test(part), isPartStrNotTag = isPartStr && !isTag;
                            if (isTag) {
                                part = part.toLowerCase();
                            }
                            for (var i = 0, l = checkSet.length, elem; i < l; i++) {
                                if (elem = __get$(checkSet, i)) {
                                    while ((elem = elem.previousSibling) && elem.nodeType !== 1) {
                                    }
                                    __set$(checkSet, i, isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ? elem || false : elem === part);
                                }
                            }
                            if (isPartStrNotTag) {
                                Sizzle.filter(part, checkSet, true);
                            }
                        },
                        ">": function (checkSet, part) {
                            var elem, isPartStr = typeof part === "string", i = 0, l = checkSet.length;
                            if (isPartStr && !rNonWord.test(part)) {
                                part = part.toLowerCase();
                                for (; i < l; i++) {
                                    elem = __get$(checkSet, i);
                                    if (elem) {
                                        var parent = elem.parentNode;
                                        __set$(checkSet, i, parent.nodeName.toLowerCase() === part ? parent : false);
                                    }
                                }
                            } else {
                                for (; i < l; i++) {
                                    elem = __get$(checkSet, i);
                                    if (elem) {
                                        __set$(checkSet, i, isPartStr ? elem.parentNode : elem.parentNode === part);
                                    }
                                }
                                if (isPartStr) {
                                    Sizzle.filter(part, checkSet, true);
                                }
                            }
                        },
                        "": function (checkSet, part, isXML) {
                            var nodeCheck, doneName = done++, checkFn = dirCheck;
                            if (typeof part === "string" && !rNonWord.test(part)) {
                                part = part.toLowerCase();
                                nodeCheck = part;
                                checkFn = dirNodeCheck;
                            }
                            checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
                        },
                        "~": function (checkSet, part, isXML) {
                            var nodeCheck, doneName = done++, checkFn = dirCheck;
                            if (typeof part === "string" && !rNonWord.test(part)) {
                                part = part.toLowerCase();
                                nodeCheck = part;
                                checkFn = dirNodeCheck;
                            }
                            checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
                        }
                    },
                    find: {
                        ID: function (match, context, isXML) {
                            if (typeof context.getElementById !== "undefined" && !isXML) {
                                var m = context.getElementById(match[1]);
                                // Check parentNode to catch when Blackberry 4.6 returns
                                // nodes that are no longer in the document #6963
                                return m && m.parentNode ? [m] : [];
                            }
                        },
                        NAME: function (match, context) {
                            if (typeof context.getElementsByName !== "undefined") {
                                var ret = [], results = context.getElementsByName(match[1]);
                                for (var i = 0, l = results.length; i < l; i++) {
                                    if (__get$(results, i).getAttribute("name") === match[1]) {
                                        ret.push(__get$(results, i));
                                    }
                                }
                                return ret.length === 0 ? null : ret;
                            }
                        },
                        TAG: function (match, context) {
                            if (typeof context.getElementsByTagName !== "undefined") {
                                return context.getElementsByTagName(match[1]);
                            }
                        }
                    },
                    preFilter: {
                        CLASS: function (match, curLoop, inplace, result, not, isXML) {
                            match = " " + match[1].replace(rBackslash, "") + " ";
                            if (isXML) {
                                return match;
                            }
                            for (var i = 0, elem; (elem = __get$(curLoop, i)) != null; i++) {
                                if (elem) {
                                    if (not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0)) {
                                        if (!inplace) {
                                            result.push(elem);
                                        }
                                    } else if (inplace) {
                                        __set$(curLoop, i, false);
                                    }
                                }
                            }
                            return false;
                        },
                        ID: function (match) {
                            return match[1].replace(rBackslash, "");
                        },
                        TAG: function (match, curLoop) {
                            return match[1].replace(rBackslash, "").toLowerCase();
                        },
                        CHILD: function (match) {
                            if (match[1] === "nth") {
                                if (!match[2]) {
                                    Sizzle.error(match[0]);
                                }
                                match[2] = match[2].replace(/^\+|\s*/g, "");
                                // parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
                                var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" || !/\D/.test(match[2]) && "0n+" + match[2] || match[2]);
                                // calculate the numbers (first)n+(last) including if they are negative
                                match[2] = test[1] + (test[2] || 1) - 0;
                                match[3] = test[3] - 0;
                            } else if (match[2]) {
                                Sizzle.error(match[0]);
                            }
                            // TODO: Move to normal caching system
                            match[0] = done++;
                            return match;
                        },
                        ATTR: function (match, curLoop, inplace, result, not, isXML) {
                            var name = match[1] = match[1].replace(rBackslash, "");
                            if (!isXML && __get$(Expr.attrMap, name)) {
                                match[1] = __get$(Expr.attrMap, name);
                            }
                            // Handle if an un-quoted value was used
                            match[4] = (match[4] || match[5] || "").replace(rBackslash, "");
                            if (match[2] === "~=") {
                                match[4] = " " + match[4] + " ";
                            }
                            return match;
                        },
                        PSEUDO: function (match, curLoop, inplace, result, not) {
                            if (match[1] === "not") {
                                // If we're dealing with a complex expression, or a simple one
                                if ((chunker.exec(match[3]) || "").length > 1 || /^\w/.test(match[3])) {
                                    match[3] = Sizzle(match[3], null, null, curLoop);
                                } else {
                                    var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
                                    if (!inplace) {
                                        result.push.apply(result, ret);
                                    }
                                    return false;
                                }
                            } else if (Expr.match.POS.test(match[0]) || Expr.match.CHILD.test(match[0])) {
                                return true;
                            }
                            return match;
                        },
                        POS: function (match) {
                            match.unshift(true);
                            return match;
                        }
                    },
                    filters: {
                        enabled: function (elem) {
                            return elem.disabled === false && elem.type !== "hidden";
                        },
                        disabled: function (elem) {
                            return elem.disabled === true;
                        },
                        checked: function (elem) {
                            return elem.checked === true;
                        },
                        selected: function (elem) {
                            // Accessing this property makes selected-by-default
                            // options in Safari work properly
                            if (elem.parentNode) {
                                elem.parentNode.selectedIndex;
                            }
                            return elem.selected === true;
                        },
                        parent: function (elem) {
                            return !!elem.firstChild;
                        },
                        empty: function (elem) {
                            return !elem.firstChild;
                        },
                        has: function (elem, i, match) {
                            return !!Sizzle(match[3], elem).length;
                        },
                        header: function (elem) {
                            return /h\d/i.test(elem.nodeName);
                        },
                        text: function (elem) {
                            var attr = elem.getAttribute("type"), type = elem.type;
                            // IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
                            // use getAttribute instead to test this case
                            return elem.nodeName.toLowerCase() === "input" && "text" === type && (attr === type || attr === null);
                        },
                        radio: function (elem) {
                            return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
                        },
                        checkbox: function (elem) {
                            return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
                        },
                        file: function (elem) {
                            return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
                        },
                        password: function (elem) {
                            return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
                        },
                        submit: function (elem) {
                            var name = elem.nodeName.toLowerCase();
                            return (name === "input" || name === "button") && "submit" === elem.type;
                        },
                        image: function (elem) {
                            return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
                        },
                        reset: function (elem) {
                            var name = elem.nodeName.toLowerCase();
                            return (name === "input" || name === "button") && "reset" === elem.type;
                        },
                        button: function (elem) {
                            var name = elem.nodeName.toLowerCase();
                            return name === "input" && "button" === elem.type || name === "button";
                        },
                        input: function (elem) {
                            return /input|select|textarea|button/i.test(elem.nodeName);
                        },
                        focus: function (elem) {
                            return elem === __get$(elem.ownerDocument, "activeElement");
                        }
                    },
                    setFilters: {
                        first: function (elem, i) {
                            return i === 0;
                        },
                        last: function (elem, i, match, array) {
                            return i === array.length - 1;
                        },
                        even: function (elem, i) {
                            return i % 2 === 0;
                        },
                        odd: function (elem, i) {
                            return i % 2 === 1;
                        },
                        lt: function (elem, i, match) {
                            return i < match[3] - 0;
                        },
                        gt: function (elem, i, match) {
                            return i > match[3] - 0;
                        },
                        nth: function (elem, i, match) {
                            return match[3] - 0 === i;
                        },
                        eq: function (elem, i, match) {
                            return match[3] - 0 === i;
                        }
                    },
                    filter: {
                        PSEUDO: function (elem, match, i, array) {
                            var name = match[1], filter = __get$(Expr.filters, name);
                            if (filter) {
                                return filter(elem, i, match, array);
                            } else if (name === "contains") {
                                return (elem.textContent || elem.innerText || getText([elem]) || "").indexOf(match[3]) >= 0;
                            } else if (name === "not") {
                                var not = match[3];
                                for (var j = 0, l = not.length; j < l; j++) {
                                    if (__get$(not, j) === elem) {
                                        return false;
                                    }
                                }
                                return true;
                            } else {
                                Sizzle.error(name);
                            }
                        },
                        CHILD: function (elem, match) {
                            var first, last, doneName, parent, cache, count, diff, type = match[1], node = elem;
                            switch (type) {
                                case "only":
                                case "first":
                                    while (node = node.previousSibling) {
                                        if (node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    if (type === "first") {
                                        return true;
                                    }
                                    node = elem;
                                /* falls through */
                                case "last":
                                    while (node = node.nextSibling) {
                                        if (node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    return true;
                                case "nth":
                                    first = match[2];
                                    last = match[3];
                                    if (first === 1 && last === 0) {
                                        return true;
                                    }
                                    doneName = match[0];
                                    parent = elem.parentNode;
                                    if (parent && (__get$(parent, expando) !== doneName || !elem.nodeIndex)) {
                                        count = 0;
                                        for (node = parent.firstChild; node; node = node.nextSibling) {
                                            if (node.nodeType === 1) {
                                                node.nodeIndex = ++count;
                                            }
                                        }
                                        __set$(parent, expando, doneName);
                                    }
                                    diff = elem.nodeIndex - last;
                                    if (first === 0) {
                                        return diff === 0;
                                    } else {
                                        return diff % first === 0 && diff / first >= 0;
                                    }
                            }
                        },
                        ID: function (elem, match) {
                            return elem.nodeType === 1 && elem.getAttribute("id") === match;
                        },
                        TAG: function (elem, match) {
                            return match === "*" && elem.nodeType === 1 || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
                        },
                        CLASS: function (elem, match) {
                            return (" " + (elem.className || elem.getAttribute("class")) + " ").indexOf(match) > -1;
                        },
                        ATTR: function (elem, match) {
                            var name = match[1], result = Sizzle.attr ? Sizzle.attr(elem, name) : __get$(Expr.attrHandle, name) ? __call$(Expr.attrHandle, name, [elem]) : __get$(elem, name) != null ? __get$(elem, name) : elem.getAttribute(name), value = result + "", type = match[2], check = match[4];
                            return result == null ? type === "!=" : !type && Sizzle.attr ? result != null : type === "=" ? value === check : type === "*=" ? value.indexOf(check) >= 0 : type === "~=" ? (" " + value + " ").indexOf(check) >= 0 : !check ? value && result !== false : type === "!=" ? value !== check : type === "^=" ? value.indexOf(check) === 0 : type === "$=" ? value.substr(value.length - check.length) === check : type === "|=" ? value === check || value.substr(0, check.length + 1) === check + "-" : false;
                        },
                        POS: function (elem, match, i, array) {
                            var name = match[2], filter = __get$(Expr.setFilters, name);
                            if (filter) {
                                return filter(elem, i, match, array);
                            }
                        }
                    }
                };
                var origPOS = Expr.match.POS, fescape = function (all, num) {
                    return "\\" + (num - 0 + 1);
                };
                for (var type in Expr.match) {
                    __set$(Expr.match, type, new RegExp(__get$(Expr.match, type).source + /(?![^\[]*\])(?![^\(]*\))/.source));
                    __set$(Expr.leftMatch, type, new RegExp(/(^(?:.|\r|\n)*?)/.source + __get$(Expr.match, type).source.replace(/\\(\d+)/g, fescape)));
                }
                // Expose origPOS
                // "global" as in regardless of relation to brackets/parens
                Expr.match.globalPOS = origPOS;
                var makeArray = function (array, results) {
                    array = Array.prototype.slice.call(array, 0);
                    if (results) {
                        results.push.apply(results, array);
                        return results;
                    }
                    return array;
                };
                // Perform a simple check to determine if the browser is capable of
                // converting a NodeList to an array using builtin methods.
                // Also verifies that the returned array holds DOM nodes
                // (which is not the case in the Blackberry browser)
                try {
                    Array.prototype.slice.call(document.documentElement.childNodes, 0)[0].nodeType;    // Provide a fallback method if it does not work
                } catch (e) {
                    makeArray = function (array, results) {
                        var i = 0, ret = results || [];
                        if (toString.call(array) === "[object Array]") {
                            Array.prototype.push.apply(ret, array);
                        } else {
                            if (typeof array.length === "number") {
                                for (var l = array.length; i < l; i++) {
                                    ret.push(__get$(array, i));
                                }
                            } else {
                                for (; __get$(array, i); i++) {
                                    ret.push(__get$(array, i));
                                }
                            }
                        }
                        return ret;
                    };
                }
                var sortOrder, siblingCheck;
                if (document.documentElement.compareDocumentPosition) {
                    sortOrder = function (a, b) {
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;
                        }
                        if (!a.compareDocumentPosition || !b.compareDocumentPosition) {
                            return a.compareDocumentPosition ? -1 : 1;
                        }
                        return a.compareDocumentPosition(b) & 4 ? -1 : 1;
                    };
                } else {
                    sortOrder = function (a, b) {
                        // The nodes are identical, we can exit early
                        if (a === b) {
                            hasDuplicate = true;
                            return 0;    // Fallback to using sourceIndex (in IE) if it's available on both nodes
                        } else if (a.sourceIndex && b.sourceIndex) {
                            return a.sourceIndex - b.sourceIndex;
                        }
                        var al, bl, ap = [], bp = [], aup = a.parentNode, bup = b.parentNode, cur = aup;
                        // If the nodes are siblings (or identical) we can do a quick check
                        if (aup === bup) {
                            return siblingCheck(a, b);    // If no parents were found then the nodes are disconnected
                        } else if (!aup) {
                            return -1;
                        } else if (!bup) {
                            return 1;
                        }
                        // Otherwise they're somewhere else in the tree so we need
                        // to build up a full list of the parentNodes for comparison
                        while (cur) {
                            ap.unshift(cur);
                            cur = cur.parentNode;
                        }
                        cur = bup;
                        while (cur) {
                            bp.unshift(cur);
                            cur = cur.parentNode;
                        }
                        al = ap.length;
                        bl = bp.length;
                        // Start walking down the tree looking for a discrepancy
                        for (var i = 0; i < al && i < bl; i++) {
                            if (__get$(ap, i) !== __get$(bp, i)) {
                                return siblingCheck(__get$(ap, i), __get$(bp, i));
                            }
                        }
                        // We ended someplace up the tree so do a sibling check
                        return i === al ? siblingCheck(a, __get$(bp, i), -1) : siblingCheck(__get$(ap, i), b, 1);
                    };
                    siblingCheck = function (a, b, ret) {
                        if (a === b) {
                            return ret;
                        }
                        var cur = a.nextSibling;
                        while (cur) {
                            if (cur === b) {
                                return -1;
                            }
                            cur = cur.nextSibling;
                        }
                        return 1;
                    };
                }
                // Check to see if the browser returns elements by name when
                // querying by getElementById (and provide a workaround)
                (function () {
                    // We're going to inject a fake input element with a specified name
                    var form = document.createElement("div"), id = "script" + new Date().getTime(), root = document.documentElement;
                    __set$(form, "innerHTML", "<a name='" + id + "'/>");
                    // Inject it into the root element, check its status, and remove it quickly
                    root.insertBefore(form, root.firstChild);
                    // The workaround has to do additional checks after a getElementById
                    // Which slows things down for other browsers (hence the branching)
                    if (document.getElementById(id)) {
                        Expr.find.ID = function (match, context, isXML) {
                            if (typeof context.getElementById !== "undefined" && !isXML) {
                                var m = context.getElementById(match[1]);
                                return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
                            }
                        };
                        Expr.filter.ID = function (elem, match) {
                            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
                            return elem.nodeType === 1 && node && node.nodeValue === match;
                        };
                    }
                    root.removeChild(form);
                    // release memory in IE
                    root = form = null;
                }());
                (function () {
                    // Check to see if the browser returns only elements
                    // when doing getElementsByTagName("*")
                    // Create a fake element
                    var div = document.createElement("div");
                    div.appendChild(document.createComment(""));
                    // Make sure no comments are found
                    if (div.getElementsByTagName("*").length > 0) {
                        Expr.find.TAG = function (match, context) {
                            var results = context.getElementsByTagName(match[1]);
                            // Filter out possible comments
                            if (match[1] === "*") {
                                var tmp = [];
                                for (var i = 0; __get$(results, i); i++) {
                                    if (__get$(results, i).nodeType === 1) {
                                        tmp.push(__get$(results, i));
                                    }
                                }
                                results = tmp;
                            }
                            return results;
                        };
                    }
                    // Check to see if an attribute returns normalized href attributes
                    __set$(div, "innerHTML", "<a href='#'></a>");
                    if (div.firstChild && typeof div.firstChild.getAttribute !== "undefined" && div.firstChild.getAttribute("href") !== "#") {
                        __set$(Expr.attrHandle, "href", function (elem) {
                            return elem.getAttribute("href", 2);
                        });
                    }
                    // release memory in IE
                    div = null;
                }());
                if (document.querySelectorAll) {
                    (function () {
                        var oldSizzle = Sizzle, div = document.createElement("div"), id = "__sizzle__";
                        __set$(div, "innerHTML", "<p class='TEST'></p>");
                        // Safari can't handle uppercase or unicode characters when
                        // in quirks mode.
                        if (div.querySelectorAll && div.querySelectorAll(".TEST").length === 0) {
                            return;
                        }
                        Sizzle = function (query, context, extra, seed) {
                            context = context || document;
                            // Only use querySelectorAll on non-XML documents
                            // (ID selectors don't work in non-HTML documents)
                            if (!seed && !Sizzle.isXML(context)) {
                                // See if we find a selector to speed up
                                var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(query);
                                if (match && (context.nodeType === 1 || context.nodeType === 9)) {
                                    // Speed-up: Sizzle("TAG")
                                    if (match[1]) {
                                        return makeArray(context.getElementsByTagName(query), extra);    // Speed-up: Sizzle(".CLASS")
                                    } else if (match[2] && Expr.find.CLASS && context.getElementsByClassName) {
                                        return makeArray(context.getElementsByClassName(match[2]), extra);
                                    }
                                }
                                if (context.nodeType === 9) {
                                    // Speed-up: Sizzle("body")
                                    // The body element only exists once, optimize finding it
                                    if (query === "body" && context.body) {
                                        return makeArray([context.body], extra);    // Speed-up: Sizzle("#ID")
                                    } else if (match && match[3]) {
                                        var elem = context.getElementById(match[3]);
                                        // Check parentNode to catch when Blackberry 4.6 returns
                                        // nodes that are no longer in the document #6963
                                        if (elem && elem.parentNode) {
                                            // Handle the case where IE and Opera return items
                                            // by name instead of ID
                                            if (elem.id === match[3]) {
                                                return makeArray([elem], extra);
                                            }
                                        } else {
                                            return makeArray([], extra);
                                        }
                                    }
                                    try {
                                        return makeArray(context.querySelectorAll(query), extra);
                                    } catch (qsaError) {
                                    }    // qSA works strangely on Element-rooted queries
                                    // We can work around this by specifying an extra ID on the root
                                    // and working up from there (Thanks to Andrew Dupont for the technique)
                                    // IE 8 doesn't work on object elements
                                } else if (context.nodeType === 1 && context.nodeName.toLowerCase() !== "object") {
                                    var oldContext = context, old = context.getAttribute("id"), nid = old || id, hasParent = context.parentNode, relativeHierarchySelector = /^\s*[+~]/.test(query);
                                    if (!old) {
                                        context.setAttribute("id", nid);
                                    } else {
                                        nid = nid.replace(/'/g, "\\$&");
                                    }
                                    if (relativeHierarchySelector && hasParent) {
                                        context = context.parentNode;
                                    }
                                    try {
                                        if (!relativeHierarchySelector || hasParent) {
                                            return makeArray(context.querySelectorAll("[id='" + nid + "'] " + query), extra);
                                        }
                                    } catch (pseudoError) {
                                    } finally {
                                        if (!old) {
                                            oldContext.removeAttribute("id");
                                        }
                                    }
                                }
                            }
                            return oldSizzle(query, context, extra, seed);
                        };
                        for (var prop in oldSizzle) {
                            __set$(Sizzle, prop, __get$(oldSizzle, prop));
                        }
                        // release memory in IE
                        div = null;
                    }());
                }
                (function () {
                    var html = document.documentElement, matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;
                    if (matches) {
                        // Check to see if it's possible to do matchesSelector
                        // on a disconnected node (IE 9 fails this)
                        var disconnectedMatch = !matches.call(document.createElement("div"), "div"), pseudoWorks = false;
                        try {
                            // This should fail with an exception
                            // Gecko does not error, returns false instead
                            matches.call(document.documentElement, "[test!='']:sizzle");
                        } catch (pseudoError) {
                            pseudoWorks = true;
                        }
                        Sizzle.matchesSelector = function (node, expr) {
                            // Make sure that attribute selectors are quoted
                            expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");
                            if (!Sizzle.isXML(node)) {
                                try {
                                    if (pseudoWorks || !Expr.match.PSEUDO.test(expr) && !/!=/.test(expr)) {
                                        var ret = matches.call(node, expr);
                                        // IE 9's matchesSelector returns false on disconnected nodes
                                        if (ret || !disconnectedMatch || node.document && node.document.nodeType !== 11) {
                                            return ret;
                                        }
                                    }
                                } catch (e) {
                                }
                            }
                            return Sizzle(expr, null, null, [node]).length > 0;
                        };
                    }
                }());
                (function () {
                    var div = document.createElement("div");
                    __set$(div, "innerHTML", "<div class='test e'></div><div class='test'></div>");
                    // Opera can't find a second classname (in 9.6)
                    // Also, make sure that getElementsByClassName actually exists
                    if (!div.getElementsByClassName || div.getElementsByClassName("e").length === 0) {
                        return;
                    }
                    // Safari caches class attributes, doesn't catch changes (in 3.2)
                    div.lastChild.className = "e";
                    if (div.getElementsByClassName("e").length === 1) {
                        return;
                    }
                    Expr.order.splice(1, 0, "CLASS");
                    Expr.find.CLASS = function (match, context, isXML) {
                        if (typeof context.getElementsByClassName !== "undefined" && !isXML) {
                            return context.getElementsByClassName(match[1]);
                        }
                    };
                    // release memory in IE
                    div = null;
                }());
                function dirNodeCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
                    for (var i = 0, l = checkSet.length; i < l; i++) {
                        var elem = __get$(checkSet, i);
                        if (elem) {
                            var match = false;
                            elem = __get$(elem, dir);
                            while (elem) {
                                if (__get$(elem, expando) === doneName) {
                                    match = __get$(checkSet, elem.sizset);
                                    break;
                                }
                                if (elem.nodeType === 1 && !isXML) {
                                    __set$(elem, expando, doneName);
                                    elem.sizset = i;
                                }
                                if (elem.nodeName.toLowerCase() === cur) {
                                    match = elem;
                                    break;
                                }
                                elem = __get$(elem, dir);
                            }
                            __set$(checkSet, i, match);
                        }
                    }
                }
                function dirCheck(dir, cur, doneName, checkSet, nodeCheck, isXML) {
                    for (var i = 0, l = checkSet.length; i < l; i++) {
                        var elem = __get$(checkSet, i);
                        if (elem) {
                            var match = false;
                            elem = __get$(elem, dir);
                            while (elem) {
                                if (__get$(elem, expando) === doneName) {
                                    match = __get$(checkSet, elem.sizset);
                                    break;
                                }
                                if (elem.nodeType === 1) {
                                    if (!isXML) {
                                        __set$(elem, expando, doneName);
                                        elem.sizset = i;
                                    }
                                    if (typeof cur !== "string") {
                                        if (elem === cur) {
                                            match = true;
                                            break;
                                        }
                                    } else if (Sizzle.filter(cur, [elem]).length > 0) {
                                        match = elem;
                                        break;
                                    }
                                }
                                elem = __get$(elem, dir);
                            }
                            __set$(checkSet, i, match);
                        }
                    }
                }
                if (document.documentElement.contains) {
                    Sizzle.contains = function (a, b) {
                        return a !== b && (a.contains ? a.contains(b) : true);
                    };
                } else if (document.documentElement.compareDocumentPosition) {
                    Sizzle.contains = function (a, b) {
                        return !!(a.compareDocumentPosition(b) & 16);
                    };
                } else {
                    Sizzle.contains = function () {
                        return false;
                    };
                }
                Sizzle.isXML = function (elem) {
                    // documentElement is verified for cases where it doesn't yet exist
                    // (such as loading iframes in IE - #4833)
                    var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
                    return documentElement ? documentElement.nodeName !== "HTML" : false;
                };
                var posProcess = function (selector, context, seed) {
                    var match, tmpSet = [], later = "", root = context.nodeType ? [context] : context;
                    // Position selectors must be done after the filter
                    // And so must :not(positional) so we move all PSEUDOs to the end
                    while (match = Expr.match.PSEUDO.exec(selector)) {
                        later = later + match[0];
                        selector = selector.replace(Expr.match.PSEUDO, "");
                    }
                    selector = __get$(Expr.relative, selector) ? selector + "*" : selector;
                    for (var i = 0, l = root.length; i < l; i++) {
                        Sizzle(selector, __get$(root, i), tmpSet, seed);
                    }
                    return Sizzle.filter(later, tmpSet);
                };
                // EXPOSE
                // Override sizzle attribute retrieval
                Sizzle.attr = jQuery.attr;
                Sizzle.selectors.attrMap = {};
                jQuery.find = Sizzle;
                jQuery.expr = Sizzle.selectors;
                jQuery.expr[":"] = jQuery.expr.filters;
                jQuery.unique = Sizzle.uniqueSort;
                __set$(jQuery, "text", Sizzle.getText);
                jQuery.isXMLDoc = Sizzle.isXML;
                jQuery.contains = Sizzle.contains;
            }());
            var runtil = /Until$/, rparentsprev = /^(?:parents|prevUntil|prevAll)/,
            // Note: This RegExp should be improved, or likely pulled from Sizzle
                rmultiselector = /,/, isSimple = /^.[^:#\[\.,]*$/, slice = Array.prototype.slice, POS = jQuery.expr.match.globalPOS,
            // methods guaranteed to produce a unique set when starting from a unique set
                guaranteedUnique = {
                    children: true,
                    contents: true,
                    next: true,
                    prev: true
                };
            jQuery.fn.extend({
                find: function (selector) {
                    var self = this, i, l;
                    if (typeof selector !== "string") {
                        return jQuery(selector).filter(function () {
                            for (i = 0, l = self.length; i < l; i++) {
                                if (jQuery.contains(__get$(self, i), this)) {
                                    return true;
                                }
                            }
                        });
                    }
                    var ret = this.pushStack("", "find", selector), length, n, r;
                    for (i = 0, l = this.length; i < l; i++) {
                        length = ret.length;
                        jQuery.find(selector, __get$(this, i), ret);
                        if (i > 0) {
                            // Make sure that the results are unique
                            for (n = length; n < ret.length; n++) {
                                for (r = 0; r < length; r++) {
                                    if (__get$(ret, r) === __get$(ret, n)) {
                                        ret.splice(n--, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    return ret;
                },
                has: function (target) {
                    var targets = jQuery(target);
                    return this.filter(function () {
                        for (var i = 0, l = targets.length; i < l; i++) {
                            if (jQuery.contains(this, __get$(targets, i))) {
                                return true;
                            }
                        }
                    });
                },
                not: function (selector) {
                    return this.pushStack(winnow(this, selector, false), "not", selector);
                },
                filter: function (selector) {
                    return this.pushStack(winnow(this, selector, true), "filter", selector);
                },
                is: function (selector) {
                    return !!selector && (typeof selector === "string" ? POS.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0);
                },
                closest: function (selectors, context) {
                    var ret = [], i, l, cur = this[0];
                    // Array (deprecated as of jQuery 1.7)
                    if (jQuery.isArray(selectors)) {
                        var level = 1;
                        while (cur && cur.ownerDocument && cur !== context) {
                            for (i = 0; i < selectors.length; i++) {
                                if (jQuery(cur).is(__get$(selectors, i))) {
                                    ret.push({
                                        selector: __get$(selectors, i),
                                        elem: cur,
                                        level: level
                                    });
                                }
                            }
                            cur = cur.parentNode;
                            level++;
                        }
                        return ret;
                    }
                    // String
                    var pos = POS.test(selectors) || typeof selectors !== "string" ? jQuery(selectors, context || this.context) : 0;
                    for (i = 0, l = this.length; i < l; i++) {
                        cur = __get$(this, i);
                        while (cur) {
                            if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                                ret.push(cur);
                                break;
                            } else {
                                cur = cur.parentNode;
                                if (!cur || !cur.ownerDocument || cur === context || cur.nodeType === 11) {
                                    break;
                                }
                            }
                        }
                    }
                    ret = ret.length > 1 ? jQuery.unique(ret) : ret;
                    return this.pushStack(ret, "closest", selectors);
                },
                index: function (elem) {
                    // No argument, return index in parent
                    if (!elem) {
                        return this[0] && this[0].parentNode ? this.prevAll().length : -1;
                    }
                    // index in selector
                    if (typeof elem === "string") {
                        return jQuery.inArray(this[0], jQuery(elem));
                    }
                    // Locate the position of the desired element
                    return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
                },
                add: function (selector, context) {
                    var set = typeof selector === "string" ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector), all = jQuery.merge(this.get(), set);
                    return this.pushStack(isDisconnected(set[0]) || isDisconnected(all[0]) ? all : jQuery.unique(all));
                },
                andSelf: function () {
                    return this.add(this.prevObject);
                }
            });
            // A painfully simple check to see if an element is disconnected
            // from a document (should be improved, where feasible).
            function isDisconnected(node) {
                return !node || !node.parentNode || node.parentNode.nodeType === 11;
            }
            jQuery.each({
                parent: function (elem) {
                    var parent = elem.parentNode;
                    return parent && parent.nodeType !== 11 ? parent : null;
                },
                parents: function (elem) {
                    return jQuery.dir(elem, "parentNode");
                },
                parentsUntil: function (elem, i, until) {
                    return jQuery.dir(elem, "parentNode", until);
                },
                next: function (elem) {
                    return jQuery.nth(elem, 2, "nextSibling");
                },
                prev: function (elem) {
                    return jQuery.nth(elem, 2, "previousSibling");
                },
                nextAll: function (elem) {
                    return jQuery.dir(elem, "nextSibling");
                },
                prevAll: function (elem) {
                    return jQuery.dir(elem, "previousSibling");
                },
                nextUntil: function (elem, i, until) {
                    return jQuery.dir(elem, "nextSibling", until);
                },
                prevUntil: function (elem, i, until) {
                    return jQuery.dir(elem, "previousSibling", until);
                },
                siblings: function (elem) {
                    return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
                },
                children: function (elem) {
                    return jQuery.sibling(elem.firstChild);
                },
                contents: function (elem) {
                    return jQuery.nodeName(elem, "iframe") ? elem.contentDocument || elem.contentWindow.document : jQuery.makeArray(elem.childNodes);
                }
            }, function (name, fn) {
                __set$(jQuery.fn, name, function (until, selector) {
                    var ret = jQuery.map(this, fn, until);
                    if (!runtil.test(name)) {
                        selector = until;
                    }
                    if (selector && typeof selector === "string") {
                        ret = jQuery.filter(selector, ret);
                    }
                    ret = this.length > 1 && !__get$(guaranteedUnique, name) ? jQuery.unique(ret) : ret;
                    if ((this.length > 1 || rmultiselector.test(selector)) && rparentsprev.test(name)) {
                        ret = ret.reverse();
                    }
                    return this.pushStack(ret, name, slice.call(arguments).join(","));
                });
            });
            jQuery.extend({
                filter: function (expr, elems, not) {
                    if (not) {
                        expr = ":not(" + expr + ")";
                    }
                    return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems);
                },
                dir: function (elem, dir, until) {
                    var matched = [], cur = __get$(elem, dir);
                    while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                        if (cur.nodeType === 1) {
                            matched.push(cur);
                        }
                        cur = __get$(cur, dir);
                    }
                    return matched;
                },
                nth: function (cur, result, dir, elem) {
                    result = result || 1;
                    var num = 0;
                    for (; cur; cur = __get$(cur, dir)) {
                        if (cur.nodeType === 1 && ++num === result) {
                            break;
                        }
                    }
                    return cur;
                },
                sibling: function (n, elem) {
                    var r = [];
                    for (; n; n = n.nextSibling) {
                        if (n.nodeType === 1 && n !== elem) {
                            r.push(n);
                        }
                    }
                    return r;
                }
            });
            // Implement the identical functionality for filter and not
            function winnow(elements, qualifier, keep) {
                // Can't pass null or undefined to indexOf in Firefox 4
                // Set to 0 to skip string check
                qualifier = qualifier || 0;
                if (jQuery.isFunction(qualifier)) {
                    return jQuery.grep(elements, function (elem, i) {
                        var retVal = !!qualifier.call(elem, i, elem);
                        return retVal === keep;
                    });
                } else if (qualifier.nodeType) {
                    return jQuery.grep(elements, function (elem, i) {
                        return elem === qualifier === keep;
                    });
                } else if (typeof qualifier === "string") {
                    var filtered = jQuery.grep(elements, function (elem) {
                        return elem.nodeType === 1;
                    });
                    if (isSimple.test(qualifier)) {
                        return jQuery.filter(qualifier, filtered, !keep);
                    } else {
                        qualifier = jQuery.filter(qualifier, filtered);
                    }
                }
                return jQuery.grep(elements, function (elem, i) {
                    return jQuery.inArray(elem, qualifier) >= 0 === keep;
                });
            }
            function createSafeFragment(document) {
                var list = nodeNames.split("|"), safeFrag = document.createDocumentFragment();
                if (safeFrag.createElement) {
                    while (list.length) {
                        safeFrag.createElement(list.pop());
                    }
                }
                return safeFrag;
            }
            var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video", rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g, rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style)/i, rnocache = /<(?:script|object|embed|option|style)/i, rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
            // checked="checked" or checked
                rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /\/(java|ecma)script/i, rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/, wrapMap = {
                    option: [
                        1,
                        "<select multiple='multiple'>",
                        "</select>"
                    ],
                    legend: [
                        1,
                        "<fieldset>",
                        "</fieldset>"
                    ],
                    thead: [
                        1,
                        "<table>",
                        "</table>"
                    ],
                    tr: [
                        2,
                        "<table><tbody>",
                        "</tbody></table>"
                    ],
                    td: [
                        3,
                        "<table><tbody><tr>",
                        "</tr></tbody></table>"
                    ],
                    col: [
                        2,
                        "<table><tbody></tbody><colgroup>",
                        "</colgroup></table>"
                    ],
                    area: [
                        1,
                        "<map>",
                        "</map>"
                    ],
                    _default: [
                        0,
                        "",
                        ""
                    ]
                }, safeFragment = createSafeFragment(document);
            wrapMap.optgroup = wrapMap.option;
            wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
            wrapMap.th = wrapMap.td;
            // IE can't serialize <link> and <script> tags normally
            if (!jQuery.support.htmlSerialize) {
                wrapMap._default = [
                    1,
                    "div<div>",
                    "</div>"
                ];
            }
            jQuery.fn.extend({
                text: function (value) {
                    return jQuery.access(this, function (value) {
                        return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
                    }, null, value, arguments.length);
                },
                wrapAll: function (html) {
                    if (jQuery.isFunction(html)) {
                        return this.each(function (i) {
                            jQuery(this).wrapAll(html.call(this, i));
                        });
                    }
                    if (this[0]) {
                        // The elements to wrap the target around
                        var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                        if (this[0].parentNode) {
                            wrap.insertBefore(this[0]);
                        }
                        wrap.map(function () {
                            var elem = this;
                            while (elem.firstChild && elem.firstChild.nodeType === 1) {
                                elem = elem.firstChild;
                            }
                            return elem;
                        }).append(this);
                    }
                    return this;
                },
                wrapInner: function (html) {
                    if (jQuery.isFunction(html)) {
                        return this.each(function (i) {
                            jQuery(this).wrapInner(html.call(this, i));
                        });
                    }
                    return this.each(function () {
                        var self = jQuery(this), contents = self.contents();
                        if (contents.length) {
                            contents.wrapAll(html);
                        } else {
                            self.append(html);
                        }
                    });
                },
                wrap: function (html) {
                    var isFunction = jQuery.isFunction(html);
                    return this.each(function (i) {
                        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
                    });
                },
                unwrap: function () {
                    return this.parent().each(function () {
                        if (!jQuery.nodeName(this, "body")) {
                            jQuery(this).replaceWith(this.childNodes);
                        }
                    }).end();
                },
                append: function () {
                    return this.domManip(arguments, true, function (elem) {
                        if (this.nodeType === 1) {
                            this.appendChild(elem);
                        }
                    });
                },
                prepend: function () {
                    return this.domManip(arguments, true, function (elem) {
                        if (this.nodeType === 1) {
                            this.insertBefore(elem, this.firstChild);
                        }
                    });
                },
                before: function () {
                    if (this[0] && this[0].parentNode) {
                        return this.domManip(arguments, false, function (elem) {
                            this.parentNode.insertBefore(elem, this);
                        });
                    } else if (arguments.length) {
                        var set = jQuery.clean(arguments);
                        set.push.apply(set, this.toArray());
                        return this.pushStack(set, "before", arguments);
                    }
                },
                after: function () {
                    if (this[0] && this[0].parentNode) {
                        return this.domManip(arguments, false, function (elem) {
                            this.parentNode.insertBefore(elem, this.nextSibling);
                        });
                    } else if (arguments.length) {
                        var set = this.pushStack(this, "after", arguments);
                        set.push.apply(set, jQuery.clean(arguments));
                        return set;
                    }
                },
                remove: function (selector, keepData) {
                    for (var i = 0, elem; (elem = __get$(this, i)) != null; i++) {
                        if (!selector || jQuery.filter(selector, [elem]).length) {
                            if (!keepData && elem.nodeType === 1) {
                                jQuery.cleanData(elem.getElementsByTagName("*"));
                                jQuery.cleanData([elem]);
                            }
                            if (elem.parentNode) {
                                elem.parentNode.removeChild(elem);
                            }
                        }
                    }
                    return this;
                },
                empty: function () {
                    for (var i = 0, elem; (elem = __get$(this, i)) != null; i++) {
                        // Remove element nodes and prevent memory leaks
                        if (elem.nodeType === 1) {
                            jQuery.cleanData(elem.getElementsByTagName("*"));
                        }
                        // Remove any remaining nodes
                        while (elem.firstChild) {
                            elem.removeChild(elem.firstChild);
                        }
                    }
                    return this;
                },
                clone: function (dataAndEvents, deepDataAndEvents) {
                    dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
                    deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
                    return this.map(function () {
                        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
                    });
                },
                html: function (value) {
                    return jQuery.access(this, function (value) {
                        var elem = this[0] || {}, i = 0, l = this.length;
                        if (value === undefined) {
                            return elem.nodeType === 1 ? __get$(elem, "innerHTML").replace(rinlinejQuery, "") : null;
                        }
                        if (typeof value === "string" && !rnoInnerhtml.test(value) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !__get$(wrapMap, (rtagName.exec(value) || [
                            "",
                            ""
                        ])[1].toLowerCase())) {
                            value = value.replace(rxhtmlTag, "<$1></$2>");
                            try {
                                for (; i < l; i++) {
                                    // Remove element nodes and prevent memory leaks
                                    elem = __get$(this, i) || {};
                                    if (elem.nodeType === 1) {
                                        jQuery.cleanData(elem.getElementsByTagName("*"));
                                        __set$(elem, "innerHTML", value);
                                    }
                                }
                                elem = 0;    // If using innerHTML throws an exception, use the fallback method
                            } catch (e) {
                            }
                        }
                        if (elem) {
                            this.empty().append(value);
                        }
                    }, null, value, arguments.length);
                },
                replaceWith: function (value) {
                    if (this[0] && this[0].parentNode) {
                        // Make sure that the elements are removed from the DOM before they are inserted
                        // this can help fix replacing a parent with child elements
                        if (jQuery.isFunction(value)) {
                            return this.each(function (i) {
                                var self = jQuery(this), old = self.html();
                                self.replaceWith(value.call(this, i, old));
                            });
                        }
                        if (typeof value !== "string") {
                            value = jQuery(value).detach();
                        }
                        return this.each(function () {
                            var next = this.nextSibling, parent = this.parentNode;
                            jQuery(this).remove();
                            if (next) {
                                jQuery(next).before(value);
                            } else {
                                jQuery(parent).append(value);
                            }
                        });
                    } else {
                        return this.length ? this.pushStack(jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value) : this;
                    }
                },
                detach: function (selector) {
                    return this.remove(selector, true);
                },
                domManip: function (args, table, callback) {
                    var results, first, fragment, parent, value = args[0], scripts = [];
                    // We can't cloneNode fragments that contain checked, in WebKit
                    if (!jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test(value)) {
                        return this.each(function () {
                            jQuery(this).domManip(args, table, callback, true);
                        });
                    }
                    if (jQuery.isFunction(value)) {
                        return this.each(function (i) {
                            var self = jQuery(this);
                            args[0] = value.call(this, i, table ? self.html() : undefined);
                            self.domManip(args, table, callback);
                        });
                    }
                    if (this[0]) {
                        parent = value && value.parentNode;
                        // If we're in a fragment, just use that instead of building a new one
                        if (jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length) {
                            results = { fragment: parent };
                        } else {
                            results = jQuery.buildFragment(args, this, scripts);
                        }
                        fragment = results.fragment;
                        if (fragment.childNodes.length === 1) {
                            first = fragment = fragment.firstChild;
                        } else {
                            first = fragment.firstChild;
                        }
                        if (first) {
                            table = table && jQuery.nodeName(first, "tr");
                            for (var i = 0, l = this.length, lastIndex = l - 1; i < l; i++) {
                                callback.call(table ? root(__get$(this, i), first) : __get$(this, i), results.cacheable || l > 1 && i < lastIndex ? jQuery.clone(fragment, true, true) : fragment);
                            }
                        }
                        if (scripts.length) {
                            jQuery.each(scripts, function (i, elem) {
                                if (__get$(elem, "src")) {
                                    jQuery.ajax({
                                        type: "GET",
                                        global: false,
                                        url: __get$(elem, "src"),
                                        async: false,
                                        dataType: "script"
                                    });
                                } else {
                                    jQuery.globalEval((__get$(elem, "text") || elem.textContent || __get$(elem, "innerHTML") || "").replace(rcleanScript, "/*$0*/"));
                                }
                                if (elem.parentNode) {
                                    elem.parentNode.removeChild(elem);
                                }
                            });
                        }
                    }
                    return this;
                }
            });
            function root(elem, cur) {
                return jQuery.nodeName(elem, "table") ? elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")) : elem;
            }
            function cloneCopyEvent(src, dest) {
                if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
                    return;
                }
                var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
                if (events) {
                    delete curData.handle;
                    curData.events = {};
                    for (type in events) {
                        for (i = 0, l = __get$(events, type).length; i < l; i++) {
                            jQuery.event.add(dest, type, __get$(__get$(events, type), i));
                        }
                    }
                }
                // make the cloned public data object a copy from the original
                if (__get$(curData, "data")) {
                    __set$(curData, "data", jQuery.extend({}, __get$(curData, "data")));
                }
            }
            function cloneFixAttributes(src, dest) {
                var nodeName;
                // We do not need to do anything for non-Elements
                if (dest.nodeType !== 1) {
                    return;
                }
                // clearAttributes removes the attributes, which we don't want,
                // but also removes the attachEvent events, which we *do* want
                if (dest.clearAttributes) {
                    dest.clearAttributes();
                }
                // mergeAttributes, in contrast, only merges back on the
                // original attributes, not the events
                if (dest.mergeAttributes) {
                    dest.mergeAttributes(src);
                }
                nodeName = dest.nodeName.toLowerCase();
                // IE6-8 fail to clone children inside object elements that use
                // the proprietary classid attribute value (rather than the type
                // attribute) to identify the type of content to display
                if (nodeName === "object") {
                    dest.outerHTML = src.outerHTML;
                } else if (nodeName === "input" && (src.type === "checkbox" || src.type === "radio")) {
                    // IE6-8 fails to persist the checked state of a cloned checkbox
                    // or radio button. Worse, IE6-7 fail to give the cloned element
                    // a checked appearance if the defaultChecked value isn't also set
                    if (src.checked) {
                        dest.defaultChecked = dest.checked = src.checked;
                    }
                    // IE6-7 get confused and end up setting the value of a cloned
                    // checkbox/radio button to an empty string instead of "on"
                    if (__get$(dest, "value") !== __get$(src, "value")) {
                        __set$(dest, "value", __get$(src, "value"));
                    }
                    // IE6-8 fails to return the selected option to the default selected
                    // state when cloning options
                } else if (nodeName === "option") {
                    dest.selected = src.defaultSelected;    // IE6-8 fails to set the defaultValue to the correct value when
                    // cloning other types of input fields
                } else if (nodeName === "input" || nodeName === "textarea") {
                    dest.defaultValue = src.defaultValue;    // IE blanks contents when cloning scripts
                } else if (nodeName === "script" && __get$(dest, "text") !== __get$(src, "text")) {
                    __set$(dest, "text", __get$(src, "text"));
                }
                // Event data gets referenced instead of copied if the expando
                // gets copied too
                dest.removeAttribute(jQuery.expando);
                // Clear flags for bubbling special change/submit events, they must
                // be reattached when the newly cloned events are first activated
                dest.removeAttribute("_submit_attached");
                dest.removeAttribute("_change_attached");
            }
            jQuery.buildFragment = function (args, nodes, scripts) {
                var fragment, cacheable, cacheresults, doc, first = args[0];
                // nodes may contain either an explicit document object,
                // a jQuery collection or context object.
                // If nodes[0] contains a valid object to assign to doc
                if (nodes && nodes[0]) {
                    doc = nodes[0].ownerDocument || nodes[0];
                }
                // Ensure that an attr object doesn't incorrectly stand in as a document object
                // Chrome and Firefox seem to allow this to occur and will throw exception
                // Fixes #8950
                if (!doc.createDocumentFragment) {
                    doc = document;
                }
                // Only cache "small" (1/2 KB) HTML strings that are associated with the main document
                // Cloning options loses the selected state, so don't cache them
                // IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
                // Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
                // Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
                if (args.length === 1 && typeof first === "string" && first.length < 512 && doc === document && first.charAt(0) === "<" && !rnocache.test(first) && (jQuery.support.checkClone || !rchecked.test(first)) && (jQuery.support.html5Clone || !rnoshimcache.test(first))) {
                    cacheable = true;
                    cacheresults = __get$(jQuery.fragments, first);
                    if (cacheresults && cacheresults !== 1) {
                        fragment = cacheresults;
                    }
                }
                if (!fragment) {
                    fragment = doc.createDocumentFragment();
                    jQuery.clean(args, doc, fragment, scripts);
                }
                if (cacheable) {
                    __set$(jQuery.fragments, first, cacheresults ? fragment : 1);
                }
                return {
                    fragment: fragment,
                    cacheable: cacheable
                };
            };
            jQuery.fragments = {};
            jQuery.each({
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith"
            }, function (name, original) {
                __set$(jQuery.fn, name, function (selector) {
                    var ret = [], insert = jQuery(selector), parent = this.length === 1 && this[0].parentNode;
                    if (parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1) {
                        __call$(insert, original, [this[0]]);
                        return this;
                    } else {
                        for (var i = 0, l = insert.length; i < l; i++) {
                            var elems = (i > 0 ? this.clone(true) : this).get();
                            __call$(jQuery(__get$(insert, i)), original, [elems]);
                            ret = ret.concat(elems);
                        }
                        return this.pushStack(ret, name, insert.selector);
                    }
                });
            });
            function getAll(elem) {
                if (typeof elem.getElementsByTagName !== "undefined") {
                    return elem.getElementsByTagName("*");
                } else if (typeof elem.querySelectorAll !== "undefined") {
                    return elem.querySelectorAll("*");
                } else {
                    return [];
                }
            }
            // Used in clean, fixes the defaultChecked property
            function fixDefaultChecked(elem) {
                if (elem.type === "checkbox" || elem.type === "radio") {
                    elem.defaultChecked = elem.checked;
                }
            }
            // Finds all inputs and passes them to fixDefaultChecked
            function findInputs(elem) {
                var nodeName = (elem.nodeName || "").toLowerCase();
                if (nodeName === "input") {
                    fixDefaultChecked(elem);    // Skip scripts, get other children
                } else if (nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined") {
                    jQuery.grep(elem.getElementsByTagName("input"), fixDefaultChecked);
                }
            }
            // Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
            function shimCloneNode(elem) {
                var div = document.createElement("div");
                safeFragment.appendChild(div);
                __set$(div, "innerHTML", elem.outerHTML);
                return div.firstChild;
            }
            jQuery.extend({
                clone: function (elem, dataAndEvents, deepDataAndEvents) {
                    var srcElements, destElements, i,
                    // IE<=8 does not properly clone detached, unknown element nodes
                        clone = jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">") ? elem.cloneNode(true) : shimCloneNode(elem);
                    if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                        // IE copies events bound via attachEvent when using cloneNode.
                        // Calling detachEvent on the clone will also remove the events
                        // from the original. In order to get around this, we use some
                        // proprietary methods to clear the events. Thanks to MooTools
                        // guys for this hotness.
                        cloneFixAttributes(elem, clone);
                        // Using Sizzle here is crazy slow, so we use getElementsByTagName instead
                        srcElements = getAll(elem);
                        destElements = getAll(clone);
                        // Weird iteration because IE will replace the length property
                        // with an element if you are cloning the body and one of the
                        // elements on the page has a name or id of "length"
                        for (i = 0; __get$(srcElements, i); ++i) {
                            // Ensure that the destination node is not null; Fixes #9587
                            if (__get$(destElements, i)) {
                                cloneFixAttributes(__get$(srcElements, i), __get$(destElements, i));
                            }
                        }
                    }
                    // Copy the events from the original to the clone
                    if (dataAndEvents) {
                        cloneCopyEvent(elem, clone);
                        if (deepDataAndEvents) {
                            srcElements = getAll(elem);
                            destElements = getAll(clone);
                            for (i = 0; __get$(srcElements, i); ++i) {
                                cloneCopyEvent(__get$(srcElements, i), __get$(destElements, i));
                            }
                        }
                    }
                    srcElements = destElements = null;
                    // Return the cloned set
                    return clone;
                },
                clean: function (elems, context, fragment, scripts) {
                    var checkScriptType, script, j, ret = [];
                    context = context || document;
                    // !context.createElement fails in IE with an error but returns typeof 'object'
                    if (typeof context.createElement === "undefined") {
                        context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
                    }
                    for (var i = 0, elem; (elem = __get$(elems, i)) != null; i++) {
                        if (typeof elem === "number") {
                            elem = elem + "";
                        }
                        if (!elem) {
                            continue;
                        }
                        // Convert html string into DOM nodes
                        if (typeof elem === "string") {
                            if (!rhtml.test(elem)) {
                                elem = context.createTextNode(elem);
                            } else {
                                // Fix "XHTML"-style tags in all browsers
                                elem = elem.replace(rxhtmlTag, "<$1></$2>");
                                // Trim whitespace, otherwise indexOf won't work as expected
                                var tag = (rtagName.exec(elem) || [
                                    "",
                                    ""
                                ])[1].toLowerCase(), wrap = __get$(wrapMap, tag) || wrapMap._default, depth = wrap[0], div = context.createElement("div"), safeChildNodes = safeFragment.childNodes, remove;
                                // Append wrapper element to unknown element safe doc fragment
                                if (context === document) {
                                    // Use the fragment we've already created for this document
                                    safeFragment.appendChild(div);
                                } else {
                                    // Use a fragment created with the owner document
                                    createSafeFragment(context).appendChild(div);
                                }
                                // Go to html and back, then peel off extra wrappers
                                __set$(div, "innerHTML", wrap[1] + elem + wrap[2]);
                                // Move to the right depth
                                while (depth--) {
                                    div = div.lastChild;
                                }
                                // Remove IE's autoinserted <tbody> from table fragments
                                if (!jQuery.support.tbody) {
                                    // String was a <table>, *may* have spurious <tbody>
                                    var hasBody = rtbody.test(elem), tbody = tag === "table" && !hasBody ? div.firstChild && div.firstChild.childNodes : wrap[1] === "<table>" && !hasBody ? div.childNodes : [];
                                    for (j = tbody.length - 1; j >= 0; --j) {
                                        if (jQuery.nodeName(__get$(tbody, j), "tbody") && !__get$(tbody, j).childNodes.length) {
                                            __get$(tbody, j).parentNode.removeChild(__get$(tbody, j));
                                        }
                                    }
                                }
                                // IE completely kills leading whitespace when innerHTML is used
                                if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                                    div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]), div.firstChild);
                                }
                                elem = div.childNodes;
                                // Clear elements from DocumentFragment (safeFragment or otherwise)
                                // to avoid hoarding elements. Fixes #11356
                                if (div) {
                                    div.parentNode.removeChild(div);
                                    // Guard against -1 index exceptions in FF3.6
                                    if (safeChildNodes.length > 0) {
                                        remove = __get$(safeChildNodes, safeChildNodes.length - 1);
                                        if (remove && remove.parentNode) {
                                            remove.parentNode.removeChild(remove);
                                        }
                                    }
                                }
                            }
                        }
                        // Resets defaultChecked for any radios and checkboxes
                        // about to be appended to the DOM in IE 6/7 (#8060)
                        var len;
                        if (!jQuery.support.appendChecked) {
                            if (elem[0] && typeof (len = elem.length) === "number") {
                                for (j = 0; j < len; j++) {
                                    findInputs(__get$(elem, j));
                                }
                            } else {
                                findInputs(elem);
                            }
                        }
                        if (elem.nodeType) {
                            ret.push(elem);
                        } else {
                            ret = jQuery.merge(ret, elem);
                        }
                    }
                    if (fragment) {
                        checkScriptType = function (elem) {
                            return !elem.type || rscriptType.test(elem.type);
                        };
                        for (i = 0; __get$(ret, i); i++) {
                            script = __get$(ret, i);
                            if (scripts && jQuery.nodeName(script, "script") && (!script.type || rscriptType.test(script.type))) {
                                scripts.push(script.parentNode ? script.parentNode.removeChild(script) : script);
                            } else {
                                if (script.nodeType === 1) {
                                    var jsTags = jQuery.grep(script.getElementsByTagName("script"), checkScriptType);
                                    ret.splice.apply(ret, [
                                        i + 1,
                                        0
                                    ].concat(jsTags));
                                }
                                fragment.appendChild(script);
                            }
                        }
                    }
                    return ret;
                },
                cleanData: function (elems) {
                    var data, id, cache = jQuery.cache, special = jQuery.event.special, deleteExpando = jQuery.support.deleteExpando;
                    for (var i = 0, elem; (elem = __get$(elems, i)) != null; i++) {
                        if (elem.nodeName && __get$(jQuery.noData, elem.nodeName.toLowerCase())) {
                            continue;
                        }
                        id = __get$(elem, jQuery.expando);
                        if (id) {
                            data = __get$(cache, id);
                            if (data && data.events) {
                                for (var type in data.events) {
                                    if (__get$(special, type)) {
                                        jQuery.event.remove(elem, type);    // This is a shortcut to avoid jQuery.event.remove's overhead
                                    } else {
                                        jQuery.removeEvent(elem, type, data.handle);
                                    }
                                }
                                // Null the DOM reference to avoid IE6/7/8 leak (#7054)
                                if (data.handle) {
                                    data.handle.elem = null;
                                }
                            }
                            if (deleteExpando) {
                                delete elem[jQuery.expando];
                            } else if (elem.removeAttribute) {
                                elem.removeAttribute(jQuery.expando);
                            }
                            delete cache[id];
                        }
                    }
                }
            });
            var ralpha = /alpha\([^)]*\)/i, ropacity = /opacity=([^)]*)/,
            // fixed for IE9, see #8346
                rupper = /([A-Z]|^ms)/g, rnum = /^[\-+]?(?:\d*\.)?\d+$/i, rnumnonpx = /^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i, rrelNum = /^([\-+])=([\-+.\de]+)/, rmargin = /^margin/, cssShow = {
                    position: "absolute",
                    visibility: "hidden",
                    display: "block"
                },
            // order is important!
                cssExpand = [
                    "Top",
                    "Right",
                    "Bottom",
                    "Left"
                ], curCSS, getComputedStyle, currentStyle;
            jQuery.fn.css = function (name, value) {
                return jQuery.access(this, function (elem, name, value) {
                    return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
                }, name, value, arguments.length > 1);
            };
            jQuery.extend({
                cssHooks: {
                    opacity: {
                        get: function (elem, computed) {
                            if (computed) {
                                // We should always get a number back from opacity
                                var ret = curCSS(elem, "opacity");
                                return ret === "" ? "1" : ret;
                            } else {
                                return elem.style.opacity;
                            }
                        }
                    }
                },
                cssNumber: {
                    "fillOpacity": true,
                    "fontWeight": true,
                    "lineHeight": true,
                    "opacity": true,
                    "orphans": true,
                    "widows": true,
                    "zIndex": true,
                    "zoom": true
                },
                cssProps: { "float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat" },
                style: function (elem, name, value, extra) {
                    // Don't set styles on text and comment nodes
                    if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                        return;
                    }
                    // Make sure that we're working with the right name
                    var ret, type, origName = jQuery.camelCase(name), style = elem.style, hooks = __get$(jQuery.cssHooks, origName);
                    name = __get$(jQuery.cssProps, origName) || origName;
                    // Check if we're setting a value
                    if (value !== undefined) {
                        type = typeof value;
                        // convert relative number strings (+= or -=) to relative numbers. #7345
                        if (type === "string" && (ret = rrelNum.exec(value))) {
                            value = +(ret[1] + 1) * +ret[2] + parseFloat(jQuery.css(elem, name));
                            // Fixes bug #9237
                            type = "number";
                        }
                        // Make sure that NaN and null values aren't set. See: #7116
                        if (value == null || type === "number" && isNaN(value)) {
                            return;
                        }
                        // If a number was passed in, add 'px' to the (except for certain CSS properties)
                        if (type === "number" && !__get$(jQuery.cssNumber, origName)) {
                            value = value + "px";
                        }
                        // If a hook was provided, use that value, otherwise just set the specified value
                        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value)) !== undefined) {
                            // Wrapped to prevent IE from throwing errors when 'invalid' values are provided
                            // Fixes bug #5509
                            try {
                                __set$(style, name, value);
                            } catch (e) {
                            }
                        }
                    } else {
                        // If a hook was provided get the non-computed value from there
                        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                            return ret;
                        }
                        // Otherwise just get the value from the style object
                        return __get$(style, name);
                    }
                },
                css: function (elem, name, extra) {
                    var ret, hooks;
                    // Make sure that we're working with the right name
                    name = jQuery.camelCase(name);
                    hooks = __get$(jQuery.cssHooks, name);
                    name = __get$(jQuery.cssProps, name) || name;
                    // cssFloat needs a special treatment
                    if (name === "cssFloat") {
                        name = "float";
                    }
                    // If a hook was provided get the computed value from there
                    if (hooks && "get" in hooks && (ret = hooks.get(elem, true, extra)) !== undefined) {
                        return ret;    // Otherwise, if a way to get the computed value exists, use that
                    } else if (curCSS) {
                        return curCSS(elem, name);
                    }
                },
                swap: function (elem, options, callback) {
                    var old = {}, ret, name;
                    // Remember the old values, and insert the new ones
                    for (name in options) {
                        __set$(old, name, __get$(elem.style, name));
                        __set$(elem.style, name, __get$(options, name));
                    }
                    ret = callback.call(elem);
                    // Revert the old values
                    for (name in options) {
                        __set$(elem.style, name, __get$(old, name));
                    }
                    return ret;
                }
            });
            // DEPRECATED in 1.3, Use jQuery.css() instead
            jQuery.curCSS = jQuery.css;
            if (document.defaultView && document.defaultView.getComputedStyle) {
                getComputedStyle = function (elem, name) {
                    var ret, defaultView, computedStyle, width, style = elem.style;
                    name = name.replace(rupper, "-$1").toLowerCase();
                    if ((defaultView = elem.ownerDocument.defaultView) && (computedStyle = defaultView.getComputedStyle(elem, null))) {
                        ret = computedStyle.getPropertyValue(name);
                        if (ret === "" && !jQuery.contains(elem.ownerDocument.documentElement, elem)) {
                            ret = jQuery.style(elem, name);
                        }
                    }
                    // A tribute to the "awesome hack by Dean Edwards"
                    // WebKit uses "computed value (percentage if specified)" instead of "used value" for margins
                    // which is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
                    if (!jQuery.support.pixelMargin && computedStyle && rmargin.test(name) && rnumnonpx.test(ret)) {
                        width = style.width;
                        style.width = ret;
                        ret = computedStyle.width;
                        style.width = width;
                    }
                    return ret;
                };
            }
            if (document.documentElement.currentStyle) {
                currentStyle = function (elem, name) {
                    var left, rsLeft, uncomputed, ret = elem.currentStyle && __get$(elem.currentStyle, name), style = elem.style;
                    // Avoid setting ret to empty string here
                    // so we don't default to auto
                    if (ret == null && style && (uncomputed = __get$(style, name))) {
                        ret = uncomputed;
                    }
                    // From the awesome hack by Dean Edwards
                    // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
                    // If we're not dealing with a regular pixel number
                    // but a number that has a weird ending, we need to convert it to pixels
                    if (rnumnonpx.test(ret)) {
                        // Remember the original values
                        left = style.left;
                        rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;
                        // Put in the new values to get a computed value out
                        if (rsLeft) {
                            elem.runtimeStyle.left = elem.currentStyle.left;
                        }
                        style.left = name === "fontSize" ? "1em" : ret;
                        ret = style.pixelLeft + "px";
                        // Revert the changed values
                        style.left = left;
                        if (rsLeft) {
                            elem.runtimeStyle.left = rsLeft;
                        }
                    }
                    return ret === "" ? "auto" : ret;
                };
            }
            curCSS = getComputedStyle || currentStyle;
            function getWidthOrHeight(elem, name, extra) {
                // Start with offset property
                var val = name === "width" ? elem.offsetWidth : elem.offsetHeight, i = name === "width" ? 1 : 0, len = 4;
                if (val > 0) {
                    if (extra !== "border") {
                        for (; i < len; i = i + 2) {
                            if (!extra) {
                                val -= parseFloat(jQuery.css(elem, "padding" + __get$(cssExpand, i))) || 0;
                            }
                            if (extra === "margin") {
                                val = val + (parseFloat(jQuery.css(elem, extra + __get$(cssExpand, i))) || 0);
                            } else {
                                val -= parseFloat(jQuery.css(elem, "border" + __get$(cssExpand, i) + "Width")) || 0;
                            }
                        }
                    }
                    return val + "px";
                }
                // Fall back to computed then uncomputed css if necessary
                val = curCSS(elem, name);
                if (val < 0 || val == null) {
                    val = __get$(elem.style, name);
                }
                // Computed unit is not pixels. Stop here and return.
                if (rnumnonpx.test(val)) {
                    return val;
                }
                // Normalize "", auto, and prepare for extra
                val = parseFloat(val) || 0;
                // Add padding, border, margin
                if (extra) {
                    for (; i < len; i = i + 2) {
                        val = val + (parseFloat(jQuery.css(elem, "padding" + __get$(cssExpand, i))) || 0);
                        if (extra !== "padding") {
                            val = val + (parseFloat(jQuery.css(elem, "border" + __get$(cssExpand, i) + "Width")) || 0);
                        }
                        if (extra === "margin") {
                            val = val + (parseFloat(jQuery.css(elem, extra + __get$(cssExpand, i))) || 0);
                        }
                    }
                }
                return val + "px";
            }
            jQuery.each([
                "height",
                "width"
            ], function (i, name) {
                __set$(jQuery.cssHooks, name, {
                    get: function (elem, computed, extra) {
                        if (computed) {
                            if (elem.offsetWidth !== 0) {
                                return getWidthOrHeight(elem, name, extra);
                            } else {
                                return jQuery.swap(elem, cssShow, function () {
                                    return getWidthOrHeight(elem, name, extra);
                                });
                            }
                        }
                    },
                    set: function (elem, value) {
                        return rnum.test(value) ? value + "px" : value;
                    }
                });
            });
            if (!jQuery.support.opacity) {
                jQuery.cssHooks.opacity = {
                    get: function (elem, computed) {
                        // IE uses filters for opacity
                        return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ? parseFloat(RegExp.$1) / 100 + "" : computed ? "1" : "";
                    },
                    set: function (elem, value) {
                        var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? "alpha(opacity=" + value * 100 + ")" : "", filter = currentStyle && currentStyle.filter || style.filter || "";
                        // IE has trouble with opacity if it does not have layout
                        // Force it by setting the zoom level
                        style.zoom = 1;
                        // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
                        if (value >= 1 && jQuery.trim(filter.replace(ralpha, "")) === "") {
                            // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
                            // if "filter:" is present at all, clearType is disabled, we want to avoid this
                            // style.removeAttribute is IE Only, but so apparently is this code path...
                            style.removeAttribute("filter");
                            // if there there is no filter style applied in a css rule, we are done
                            if (currentStyle && !currentStyle.filter) {
                                return;
                            }
                        }
                        // otherwise, set new filter values
                        style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + " " + opacity;
                    }
                };
            }
            jQuery(function () {
                // This hook cannot be added until DOM ready because the support test
                // for it is not run until after DOM ready
                if (!jQuery.support.reliableMarginRight) {
                    jQuery.cssHooks.marginRight = {
                        get: function (elem, computed) {
                            // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
                            // Work around by temporarily setting element display to inline-block
                            return jQuery.swap(elem, { "display": "inline-block" }, function () {
                                if (computed) {
                                    return curCSS(elem, "margin-right");
                                } else {
                                    return elem.style.marginRight;
                                }
                            });
                        }
                    };
                }
            });
            if (jQuery.expr && jQuery.expr.filters) {
                jQuery.expr.filters.hidden = function (elem) {
                    var width = elem.offsetWidth, height = elem.offsetHeight;
                    return width === 0 && height === 0 || !jQuery.support.reliableHiddenOffsets && (elem.style && elem.style.display || jQuery.css(elem, "display")) === "none";
                };
                jQuery.expr.filters.visible = function (elem) {
                    return !jQuery.expr.filters.hidden(elem);
                };
            }
            // These hooks are used by animate to expand properties
            jQuery.each({
                margin: "",
                padding: "",
                border: "Width"
            }, function (prefix, suffix) {
                __set$(jQuery.cssHooks, prefix + suffix, {
                    expand: function (value) {
                        var i,
                        // assumes a single number if not a string
                            parts = typeof value === "string" ? value.split(" ") : [value], expanded = {};
                        for (i = 0; i < 4; i++) {
                            __set$(expanded, prefix + __get$(cssExpand, i) + suffix, __get$(parts, i) || __get$(parts, i - 2) || parts[0]);
                        }
                        return expanded;
                    }
                });
            });
            var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rhash = /#.*$/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm,
            // IE leaves an \r character at EOL
                rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
            // #7653, #8125, #8152: local protocol detection
                rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rquery = /\?/, rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, rselectTextarea = /^(?:select|textarea)/i, rspacesAjax = /\s+/, rts = /([?&])_=[^&]*/, rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,
            // Keep a copy of the old load method
                _load = jQuery.fn.load,
            /* Prefilters
             * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
             * 2) These are called:
             *    - BEFORE asking for a transport
             *    - AFTER param serialization (s.data is a string if s.processData is true)
             * 3) key is the dataType
             * 4) the catchall symbol "*" can be used
             * 5) execution will start with transport dataType and THEN continue down to "*" if needed
             */
                prefilters = {},
            /* Transports bindings
             * 1) key is the dataType
             * 2) the catchall symbol "*" can be used
             * 3) selection will start with transport dataType and THEN go to "*" if needed
             */
                transports = {},
            // Document location
                ajaxLocation,
            // Document location segments
                ajaxLocParts,
            // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
                allTypes = ["*/"] + ["*"];
            // #8138, IE may throw an exception when accessing
            // a field from window.location if document.domain has been set
            try {
                ajaxLocation = __get$(__get$Loc(location), "href");
            } catch (e) {
                // Use the href attribute of an A element
                // since IE will modify it given document.location
                ajaxLocation = document.createElement("a");
                __set$(ajaxLocation, "href", "");
                ajaxLocation = __get$(ajaxLocation, "href");
            }
            // Segment location into parts
            ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
            // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
            function addToPrefiltersOrTransports(structure) {
                // dataTypeExpression is optional and defaults to "*"
                return function (dataTypeExpression, func) {
                    if (typeof dataTypeExpression !== "string") {
                        func = dataTypeExpression;
                        dataTypeExpression = "*";
                    }
                    if (jQuery.isFunction(func)) {
                        var dataTypes = dataTypeExpression.toLowerCase().split(rspacesAjax), i = 0, length = dataTypes.length, dataType, list, placeBefore;
                        // For each dataType in the dataTypeExpression
                        for (; i < length; i++) {
                            dataType = __get$(dataTypes, i);
                            // We control if we're asked to add before
                            // any existing element
                            placeBefore = /^\+/.test(dataType);
                            if (placeBefore) {
                                dataType = dataType.substr(1) || "*";
                            }
                            list = __set$(structure, dataType, __get$(structure, dataType) || []);
                            // then we add to the structure accordingly
                            __call$(list, placeBefore ? "unshift" : "push", [func]);
                        }
                    }
                };
            }
            // Base inspection function for prefilters and transports
            function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, dataType, inspected) {
                dataType = dataType || options.dataTypes[0];
                inspected = inspected || {};
                __set$(inspected, dataType, true);
                var list = __get$(structure, dataType), i = 0, length = list ? list.length : 0, executeOnly = structure === prefilters, selection;
                for (; i < length && (executeOnly || !selection); i++) {
                    selection = __call$(list, i, [
                        options,
                        originalOptions,
                        jqXHR
                    ]);
                    // If we got redirected to another dataType
                    // we try there if executing only and not done already
                    if (typeof selection === "string") {
                        if (!executeOnly || __get$(inspected, selection)) {
                            selection = undefined;
                        } else {
                            options.dataTypes.unshift(selection);
                            selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, selection, inspected);
                        }
                    }
                }
                // If we're only executing or nothing was selected
                // we try the catchall dataType if not done already
                if ((executeOnly || !selection) && !inspected["*"]) {
                    selection = inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR, "*", inspected);
                }
                // unnecessary when only executing (prefilters)
                // but it'll be ignored by the caller in that case
                return selection;
            }
            // A special extend for ajax options
            // that takes "flat" options (not to be deep extended)
            // Fixes #9887
            function ajaxExtend(target, src) {
                var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
                for (key in src) {
                    if (__get$(src, key) !== undefined) {
                        __set$(__get$(flatOptions, key) ? target : deep || (deep = {}), key, __get$(src, key));
                    }
                }
                if (deep) {
                    jQuery.extend(true, target, deep);
                }
            }
            jQuery.fn.extend({
                load: function (url, params, callback) {
                    if (typeof url !== "string" && _load) {
                        return _load.apply(this, arguments);    // Don't do a request if no elements are being requested
                    } else if (!this.length) {
                        return this;
                    }
                    var off = url.indexOf(" ");
                    if (off >= 0) {
                        var selector = url.slice(off, url.length);
                        url = url.slice(0, off);
                    }
                    // Default to a GET request
                    var type = "GET";
                    // If the second parameter was provided
                    if (params) {
                        // If it's a function
                        if (jQuery.isFunction(params)) {
                            // We assume that it's the callback
                            callback = params;
                            params = undefined;    // Otherwise, build a param string
                        } else if (typeof params === "object") {
                            params = jQuery.param(params, jQuery.ajaxSettings.traditional);
                            type = "POST";
                        }
                    }
                    var self = this;
                    // Request the remote document
                    jQuery.ajax({
                        url: url,
                        type: type,
                        dataType: "html",
                        data: params,
                        complete: function (jqXHR, status, responseText) {
                            // Store the response as specified by the jqXHR object
                            responseText = jqXHR.responseText;
                            // If successful, inject the HTML into all the matched elements
                            if (jqXHR.isResolved()) {
                                // #4825: Get the actual response in case
                                // a dataFilter is present in ajaxSettings
                                jqXHR.done(function (r) {
                                    responseText = r;
                                });
                                // See if a selector was specified
                                self.html(selector ? jQuery("<div>").append(responseText.replace(rscript, "")).find(selector) : responseText);
                            }
                            if (callback) {
                                self.each(callback, [
                                    responseText,
                                    status,
                                    jqXHR
                                ]);
                            }
                        }
                    });
                    return this;
                },
                serialize: function () {
                    return jQuery.param(this.serializeArray());
                },
                serializeArray: function () {
                    return this.map(function () {
                        return this.elements ? jQuery.makeArray(this.elements) : this;
                    }).filter(function () {
                            return this.name && !this.disabled && (this.checked || rselectTextarea.test(this.nodeName) || rinput.test(this.type));
                        }).map(function (i, elem) {
                            var val = jQuery(this).val();
                            return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val, i) {
                                return {
                                    name: elem.name,
                                    value: val.replace(rCRLF, "\r\n")
                                };
                            }) : {
                                name: elem.name,
                                value: val.replace(rCRLF, "\r\n")
                            };
                        }).get();
                }
            });
            // Attach a bunch of functions for handling common AJAX events
            jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function (i, o) {
                __set$(jQuery.fn, o, function (f) {
                    return this.on(o, f);
                });
            });
            jQuery.each([
                "get",
                "post"
            ], function (i, method) {
                __set$(jQuery, method, function (url, data, callback, type) {
                    // shift arguments if data argument was omitted
                    if (jQuery.isFunction(data)) {
                        type = type || callback;
                        callback = data;
                        data = undefined;
                    }
                    return jQuery.ajax({
                        type: method,
                        url: url,
                        data: data,
                        success: callback,
                        dataType: type
                    });
                });
            });
            jQuery.extend({
                getScript: function (url, callback) {
                    return jQuery.get(url, undefined, callback, "script");
                },
                getJSON: function (url, data, callback) {
                    return jQuery.get(url, data, callback, "json");
                },
                ajaxSetup: function (target, settings) {
                    if (settings) {
                        // Building a settings object
                        ajaxExtend(target, jQuery.ajaxSettings);
                    } else {
                        // Extending ajaxSettings
                        settings = target;
                        target = jQuery.ajaxSettings;
                    }
                    ajaxExtend(target, settings);
                    return target;
                },
                ajaxSettings: {
                    url: ajaxLocation,
                    isLocal: rlocalProtocol.test(ajaxLocParts[1]),
                    global: true,
                    type: "GET",
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    processData: true,
                    async: true,
                    accepts: {
                        xml: "application/xml, text/xml",
                        html: "text/html",
                        text: "text/plain",
                        json: "application/json, text/javascript",
                        "*": allTypes
                    },
                    contents: {
                        xml: /xml/,
                        html: /html/,
                        json: /json/
                    },
                    responseFields: {
                        xml: "responseXML",
                        text: "responseText"
                    },
                    converters: {
                        "* text": window.String,
                        "text html": true,
                        "text json": jQuery.parseJSON,
                        "text xml": jQuery.parseXML
                    },
                    flatOptions: {
                        context: true,
                        url: true
                    }
                },
                ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
                ajaxTransport: addToPrefiltersOrTransports(transports),
                ajax: function (url, options) {
                    // If url is an object, simulate pre-1.5 signature
                    if (typeof url === "object") {
                        options = url;
                        url = undefined;
                    }
                    // Force options to be an object
                    options = options || {};
                    var
                    // Create the final options object
                        s = jQuery.ajaxSetup({}, options),
                    // Callbacks context
                        callbackContext = s.context || s,
                    // Context for global events
                    // It's the callbackContext if one was provided in the options
                    // and if it's a DOM node or a jQuery collection
                        globalEventContext = callbackContext !== s && (callbackContext.nodeType || callbackContext instanceof jQuery) ? jQuery(callbackContext) : jQuery.event,
                    // Deferreds
                        deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks("once memory"),
                    // Status-dependent callbacks
                        statusCode = s.statusCode || {},
                    // ifModified key
                        ifModifiedKey,
                    // Headers (they are sent all at once)
                        requestHeaders = {}, requestHeadersNames = {},
                    // Response headers
                        responseHeadersString, responseHeaders,
                    // transport
                        transport,
                    // timeout handle
                        timeoutTimer,
                    // Cross-domain detection vars
                        parts,
                    // The jqXHR state
                        state = 0,
                    // To know if global events are to be dispatched
                        fireGlobals,
                    // Loop variable
                        i,
                    // Fake xhr
                        jqXHR = {
                            readyState: 0,
                            setRequestHeader: function (name, value) {
                                if (!state) {
                                    var lname = name.toLowerCase();
                                    name = __set$(requestHeadersNames, lname, __get$(requestHeadersNames, lname) || name);
                                    __set$(requestHeaders, name, value);
                                }
                                return this;
                            },
                            getAllResponseHeaders: function () {
                                return state === 2 ? responseHeadersString : null;
                            },
                            getResponseHeader: function (key) {
                                var match;
                                if (state === 2) {
                                    if (!responseHeaders) {
                                        responseHeaders = {};
                                        while (match = rheaders.exec(responseHeadersString)) {
                                            __set$(responseHeaders, match[1].toLowerCase(), match[2]);
                                        }
                                    }
                                    match = __get$(responseHeaders, key.toLowerCase());
                                }
                                return match === undefined ? null : match;
                            },
                            overrideMimeType: function (type) {
                                if (!state) {
                                    s.mimeType = type;
                                }
                                return this;
                            },
                            abort: function (statusText) {
                                statusText = statusText || "abort";
                                if (transport) {
                                    transport.abort(statusText);
                                }
                                done(0, statusText);
                                return this;
                            }
                        };
                    // Callback for when everything is done
                    // It is defined here because jslint complains if it is declared
                    // at the end of the function (which would be more logical and readable)
                    function done(status, nativeStatusText, responses, headers) {
                        // Called once
                        if (state === 2) {
                            return;
                        }
                        // State is "done" now
                        state = 2;
                        // Clear timeout if it exists
                        if (timeoutTimer) {
                            clearTimeout(timeoutTimer);
                        }
                        // Dereference transport for early garbage collection
                        // (no matter how long the jqXHR object will be used)
                        transport = undefined;
                        // Cache response headers
                        responseHeadersString = headers || "";
                        // Set readyState
                        jqXHR.readyState = status > 0 ? 4 : 0;
                        var isSuccess, success, error, statusText = nativeStatusText, response = responses ? ajaxHandleResponses(s, jqXHR, responses) : undefined, lastModified, etag;
                        // If successful, handle type chaining
                        if (status >= 200 && status < 300 || status === 304) {
                            // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                            if (s.ifModified) {
                                if (lastModified = jqXHR.getResponseHeader("Last-Modified")) {
                                    __set$(jQuery.lastModified, ifModifiedKey, lastModified);
                                }
                                if (etag = jqXHR.getResponseHeader("Etag")) {
                                    __set$(jQuery.etag, ifModifiedKey, etag);
                                }
                            }
                            // If not modified
                            if (status === 304) {
                                statusText = "notmodified";
                                isSuccess = true;    // If we have data
                            } else {
                                try {
                                    success = ajaxConvert(s, response);
                                    statusText = "success";
                                    isSuccess = true;
                                } catch (e) {
                                    // We have a parsererror
                                    statusText = "parsererror";
                                    error = e;
                                }
                            }
                        } else {
                            // We extract error from statusText
                            // then normalize statusText and status for non-aborts
                            error = statusText;
                            if (!statusText || status) {
                                statusText = "error";
                                if (status < 0) {
                                    status = 0;
                                }
                            }
                        }
                        // Set data for the fake xhr object
                        jqXHR.status = status;
                        jqXHR.statusText = "" + (nativeStatusText || statusText);
                        // Success/Error
                        if (isSuccess) {
                            deferred.resolveWith(callbackContext, [
                                success,
                                statusText,
                                jqXHR
                            ]);
                        } else {
                            deferred.rejectWith(callbackContext, [
                                jqXHR,
                                statusText,
                                error
                            ]);
                        }
                        // Status-dependent callbacks
                        jqXHR.statusCode(statusCode);
                        statusCode = undefined;
                        if (fireGlobals) {
                            globalEventContext.trigger("ajax" + (isSuccess ? "Success" : "Error"), [
                                jqXHR,
                                s,
                                isSuccess ? success : error
                            ]);
                        }
                        // Complete
                        completeDeferred.fireWith(callbackContext, [
                            jqXHR,
                            statusText
                        ]);
                        if (fireGlobals) {
                            globalEventContext.trigger("ajaxComplete", [
                                jqXHR,
                                s
                            ]);
                            // Handle the global AJAX counter
                            if (!--jQuery.active) {
                                jQuery.event.trigger("ajaxStop");
                            }
                        }
                    }
                    // Attach deferreds
                    deferred.promise(jqXHR);
                    jqXHR.success = jqXHR.done;
                    jqXHR.error = jqXHR.fail;
                    jqXHR.complete = completeDeferred.add;
                    // Status-dependent callbacks
                    jqXHR.statusCode = function (map) {
                        if (map) {
                            var tmp;
                            if (state < 2) {
                                for (tmp in map) {
                                    __set$(statusCode, tmp, [
                                        __get$(statusCode, tmp),
                                        __get$(map, tmp)
                                    ]);
                                }
                            } else {
                                tmp = __get$(map, jqXHR.status);
                                jqXHR.then(tmp, tmp);
                            }
                        }
                        return this;
                    };
                    // Remove hash character (#7531: and string promotion)
                    // Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
                    // We also use the url parameter if available
                    s.url = ((url || s.url) + "").replace(rhash, "").replace(rprotocol, ajaxLocParts[1] + "//");
                    // Extract dataTypes list
                    s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().split(rspacesAjax);
                    // Determine if a cross-domain request is in order
                    if (s.crossDomain == null) {
                        parts = rurl.exec(s.url.toLowerCase());
                        s.crossDomain = !!(parts && (parts[1] != ajaxLocParts[1] || parts[2] != ajaxLocParts[2] || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))));
                    }
                    // Convert data if not already a string
                    if (__get$(s, "data") && s.processData && typeof __get$(s, "data") !== "string") {
                        __set$(s, "data", jQuery.param(__get$(s, "data"), s.traditional));
                    }
                    // Apply prefilters
                    inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
                    // If request was aborted inside a prefilter, stop there
                    if (state === 2) {
                        return false;
                    }
                    // We can fire global events as of now if asked to
                    fireGlobals = s.global;
                    // Uppercase the type
                    s.type = s.type.toUpperCase();
                    // Determine if request has content
                    s.hasContent = !rnoContent.test(s.type);
                    // Watch for a new set of requests
                    if (fireGlobals && jQuery.active++ === 0) {
                        jQuery.event.trigger("ajaxStart");
                    }
                    // More options handling for requests with no content
                    if (!s.hasContent) {
                        // If data is available, append data to url
                        if (__get$(s, "data")) {
                            s.url = s.url + ((rquery.test(s.url) ? "&" : "?") + __get$(s, "data"));
                            // #9682: remove data so that it's not used in an eventual retry
                            delete s.data;
                        }
                        // Get ifModifiedKey before adding the anti-cache parameter
                        ifModifiedKey = s.url;
                        // Add anti-cache in url if needed
                        if (s.cache === false) {
                            var ts = jQuery.now(),
                            // try replacing _= if it is there
                                ret = s.url.replace(rts, "$1_=" + ts);
                            // if nothing was replaced, add timestamp to the end
                            s.url = ret + (ret === s.url ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");
                        }
                    }
                    // Set the correct header, if data is being sent
                    if (__get$(s, "data") && s.hasContent && s.contentType !== false || options.contentType) {
                        jqXHR.setRequestHeader("Content-Type", s.contentType);
                    }
                    // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
                    if (s.ifModified) {
                        ifModifiedKey = ifModifiedKey || s.url;
                        if (__get$(jQuery.lastModified, ifModifiedKey)) {
                            jqXHR.setRequestHeader("If-Modified-Since", __get$(jQuery.lastModified, ifModifiedKey));
                        }
                        if (__get$(jQuery.etag, ifModifiedKey)) {
                            jqXHR.setRequestHeader("If-None-Match", __get$(jQuery.etag, ifModifiedKey));
                        }
                    }
                    // Set the Accepts header for the server, depending on the dataType
                    jqXHR.setRequestHeader("Accept", s.dataTypes[0] && __get$(s.accepts, s.dataTypes[0]) ? __get$(s.accepts, s.dataTypes[0]) + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);
                    // Check for headers option
                    for (i in s.headers) {
                        jqXHR.setRequestHeader(i, __get$(s.headers, i));
                    }
                    // Allow custom headers/mimetypes and early abort
                    if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                        // Abort if not done already
                        jqXHR.abort();
                        return false;
                    }
                    // Install callbacks on deferreds
                    for (i in {
                        success: 1,
                        error: 1,
                        complete: 1
                    }) {
                        __call$(jqXHR, i, [__get$(s, i)]);
                    }
                    // Get transport
                    transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
                    // If no transport, we auto-abort
                    if (!transport) {
                        done(-1, "No Transport");
                    } else {
                        jqXHR.readyState = 1;
                        // Send global event
                        if (fireGlobals) {
                            globalEventContext.trigger("ajaxSend", [
                                jqXHR,
                                s
                            ]);
                        }
                        // Timeout
                        if (s.async && s.timeout > 0) {
                            timeoutTimer = NativeMethods.setTimeout.call(window, __proc$Script(function () {
                                jqXHR.abort("timeout");
                            }), s.timeout);
                        }
                        try {
                            state = 1;
                            transport.send(requestHeaders, done);
                        } catch (e) {
                            // Propagate exception as error if not done
                            if (state < 2) {
                                done(-1, e);    // Simply rethrow otherwise
                            } else {
                                throw e;
                            }
                        }
                    }
                    return jqXHR;
                },
                param: function (a, traditional) {
                    var s = [], add = function (key, value) {
                        // If value is a function, invoke it and return its value
                        value = jQuery.isFunction(value) ? value() : value;
                        __set$(s, s.length, encodeURIComponent(key) + "=" + encodeURIComponent(value));
                    };
                    // Set traditional to true for jQuery <= 1.3.2 behavior.
                    if (traditional === undefined) {
                        traditional = jQuery.ajaxSettings.traditional;
                    }
                    // If an array was passed in, assume that it is an array of form elements.
                    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
                        // Serialize the form elements
                        jQuery.each(a, function () {
                            add(this.name, __get$(this, "value"));
                        });
                    } else {
                        // If traditional, encode the "old" way (the way 1.3.2 or older
                        // did it), otherwise encode params recursively.
                        for (var prefix in a) {
                            buildParams(prefix, __get$(a, prefix), traditional, add);
                        }
                    }
                    // Return the resulting serialization
                    return s.join("&").replace(r20, "+");
                }
            });
            function buildParams(prefix, obj, traditional, add) {
                if (jQuery.isArray(obj)) {
                    // Serialize array item.
                    jQuery.each(obj, function (i, v) {
                        if (traditional || rbracket.test(prefix)) {
                            // Treat each array item as a scalar.
                            add(prefix, v);
                        } else {
                            // If array item is non-scalar (array or object), encode its
                            // numeric index to resolve deserialization ambiguity issues.
                            // Note that rack (as of 1.0.0) can't currently deserialize
                            // nested arrays properly, and attempting to do so may cause
                            // a server error. Possible fixes are to modify rack's
                            // deserialization algorithm or to provide an option or flag
                            // to force array serialization to be shallow.
                            buildParams(prefix + "[" + (typeof v === "object" ? i : "") + "]", v, traditional, add);
                        }
                    });
                } else if (!traditional && jQuery.type(obj) === "object") {
                    // Serialize object item.
                    for (var name in obj) {
                        buildParams(prefix + "[" + name + "]", __get$(obj, name), traditional, add);
                    }
                } else {
                    // Serialize scalar item.
                    add(prefix, obj);
                }
            }
            // This is still on the jQuery object... for now
            // Want to move this to jQuery.ajax some day
            jQuery.extend({
                active: 0,
                lastModified: {},
                etag: {}
            });
            /* Handles responses to an ajax request:
             * - sets all responseXXX fields accordingly
             * - finds the right dataType (mediates between content-type and expected dataType)
             * - returns the corresponding response
             */
            function ajaxHandleResponses(s, jqXHR, responses) {
                var contents = s.contents, dataTypes = s.dataTypes, responseFields = s.responseFields, ct, type, finalDataType, firstDataType;
                // Fill responseXXX fields
                for (type in responseFields) {
                    if (type in responses) {
                        __set$(jqXHR, __get$(responseFields, type), __get$(responses, type));
                    }
                }
                // Remove auto dataType and get content-type in the process
                while (dataTypes[0] === "*") {
                    dataTypes.shift();
                    if (ct === undefined) {
                        ct = s.mimeType || jqXHR.getResponseHeader("content-type");
                    }
                }
                // Check if we're dealing with a known content-type
                if (ct) {
                    for (type in contents) {
                        if (__get$(contents, type) && __get$(contents, type).test(ct)) {
                            dataTypes.unshift(type);
                            break;
                        }
                    }
                }
                // Check to see if we have a response for the expected dataType
                if (dataTypes[0] in responses) {
                    finalDataType = dataTypes[0];
                } else {
                    // Try convertible dataTypes
                    for (type in responses) {
                        if (!dataTypes[0] || __get$(s.converters, type + " " + dataTypes[0])) {
                            finalDataType = type;
                            break;
                        }
                        if (!firstDataType) {
                            firstDataType = type;
                        }
                    }
                    // Or just use first one
                    finalDataType = finalDataType || firstDataType;
                }
                // If we found a dataType
                // We add the dataType to the list if needed
                // and return the corresponding response
                if (finalDataType) {
                    if (finalDataType !== dataTypes[0]) {
                        dataTypes.unshift(finalDataType);
                    }
                    return __get$(responses, finalDataType);
                }
            }
            // Chain conversions given the request and the original response
            function ajaxConvert(s, response) {
                // Apply the dataFilter if provided
                if (s.dataFilter) {
                    response = s.dataFilter(response, s.dataType);
                }
                var dataTypes = s.dataTypes, converters = {}, i, key, length = dataTypes.length, tmp,
                // Current and previous dataTypes
                    current = dataTypes[0], prev,
                // Conversion expression
                    conversion,
                // Conversion function
                    conv,
                // Conversion functions (transitive conversion)
                    conv1, conv2;
                // For each dataType in the chain
                for (i = 1; i < length; i++) {
                    // Create converters map
                    // with lowercased keys
                    if (i === 1) {
                        for (key in s.converters) {
                            if (typeof key === "string") {
                                __set$(converters, key.toLowerCase(), __get$(s.converters, key));
                            }
                        }
                    }
                    // Get the dataTypes
                    prev = current;
                    current = __get$(dataTypes, i);
                    // If current is auto dataType, update it to prev
                    if (current === "*") {
                        current = prev;    // If no auto and dataTypes are actually different
                    } else if (prev !== "*" && prev !== current) {
                        // Get the converter
                        conversion = prev + " " + current;
                        conv = __get$(converters, conversion) || __get$(converters, "* " + current);
                        // If there is no direct converter, search transitively
                        if (!conv) {
                            conv2 = undefined;
                            for (conv1 in converters) {
                                tmp = conv1.split(" ");
                                if (tmp[0] === prev || tmp[0] === "*") {
                                    conv2 = __get$(converters, tmp[1] + " " + current);
                                    if (conv2) {
                                        conv1 = __get$(converters, conv1);
                                        if (conv1 === true) {
                                            conv = conv2;
                                        } else if (conv2 === true) {
                                            conv = conv1;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        // If we found no converter, dispatch an error
                        if (!(conv || conv2)) {
                            jQuery.error("No conversion from " + conversion.replace(" ", " to "));
                        }
                        // If found converter is not an equivalence
                        if (conv !== true) {
                            // Convert with 1 or 2 converters accordingly
                            response = conv ? conv(response) : conv2(conv1(response));
                        }
                    }
                }
                return response;
            }
            var jsc = jQuery.now(), jsre = /(\=)\?(&|$)|\?\?/i;
            // Default jsonp settings
            jQuery.ajaxSetup({
                jsonp: "callback",
                jsonpCallback: function () {
                    return jQuery.expando + "_" + jsc++;
                }
            });
            // Detect, normalize options and install callbacks for jsonp requests
            jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {
                var inspectData = typeof __get$(s, "data") === "string" && /^application\/x\-www\-form\-urlencoded/.test(s.contentType);
                if (s.dataTypes[0] === "jsonp" || s.jsonp !== false && (jsre.test(s.url) || inspectData && jsre.test(__get$(s, "data")))) {
                    var responseContainer, jsonpCallback = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback, previous = __get$(window, jsonpCallback), url = s.url, data = __get$(s, "data"), replace = "$1" + jsonpCallback + "$2";
                    if (s.jsonp !== false) {
                        url = url.replace(jsre, replace);
                        if (s.url === url) {
                            if (inspectData) {
                                data = data.replace(jsre, replace);
                            }
                            if (__get$(s, "data") === data) {
                                // Add callback manually
                                url = url + ((/\?/.test(url) ? "&" : "?") + s.jsonp + "=" + jsonpCallback);
                            }
                        }
                    }
                    s.url = url;
                    __set$(s, "data", data);
                    // Install callback
                    __set$(window, jsonpCallback, function (response) {
                        responseContainer = [response];
                    });
                    // Clean-up function
                    jqXHR.always(function () {
                        // Set callback back to previous value
                        __set$(window, jsonpCallback, previous);
                        // Call if it was a function and we have a response
                        if (responseContainer && jQuery.isFunction(previous)) {
                            __call$(window, jsonpCallback, [responseContainer[0]]);
                        }
                    });
                    // Use data converter to retrieve json after script execution
                    s.converters["script json"] = function () {
                        if (!responseContainer) {
                            jQuery.error(jsonpCallback + " was not called");
                        }
                        return responseContainer[0];
                    };
                    // force json dataType
                    s.dataTypes[0] = "json";
                    // Delegate to script
                    return "script";
                }
            });
            // Install script dataType
            jQuery.ajaxSetup({
                accepts: { script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript" },
                contents: { script: /javascript|ecmascript/ },
                converters: {
                    "text script": function (text) {
                        jQuery.globalEval(text);
                        return text;
                    }
                }
            });
            // Handle cache's special case and global
            jQuery.ajaxPrefilter("script", function (s) {
                if (s.cache === undefined) {
                    s.cache = false;
                }
                if (s.crossDomain) {
                    s.type = "GET";
                    s.global = false;
                }
            });
            // Bind script tag hack transport
            jQuery.ajaxTransport("script", function (s) {
                // This transport only deals with cross domain requests
                if (s.crossDomain) {
                    var script, head = document.head || document.getElementsByTagName("head")[0] || document.documentElement;
                    return {
                        send: function (_, callback) {
                            script = document.createElement("script");
                            script.async = "async";
                            if (s.scriptCharset) {
                                script.charset = s.scriptCharset;
                            }
                            __set$(script, "src", s.url);
                            // Attach handlers for all browsers
                            script.onload = script.onreadystatechange = function (_, isAbort) {
                                if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                                    // Handle memory leak in IE
                                    script.onload = script.onreadystatechange = null;
                                    // Remove the script
                                    if (head && script.parentNode) {
                                        head.removeChild(script);
                                    }
                                    // Dereference the script
                                    script = undefined;
                                    // Callback if not abort
                                    if (!isAbort) {
                                        callback(200, "success");
                                    }
                                }
                            };
                            // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
                            // This arises when a base node is used (#2709 and #4378).
                            head.insertBefore(script, head.firstChild);
                        },
                        abort: function () {
                            if (script) {
                                script.onload(0, 1);
                            }
                        }
                    };
                }
            });
            var
            // #5280: Internet Explorer will keep connections alive if we don't abort on unload
                xhrOnUnloadAbort = window.ActiveXObject ? function () {
                    // Abort all pending requests
                    for (var key in xhrCallbacks) {
                        __call$(xhrCallbacks, key, [
                            0,
                            1
                        ]);
                    }
                } : false, xhrId = 0, xhrCallbacks;
            // Functions to create xhrs
            function createStandardXHR() {
                try {
                    return new window.XMLHttpRequest();
                } catch (e) {
                }
            }
            function createActiveXHR() {
                try {
                    return new window.ActiveXObject("Microsoft.XMLHTTP");
                } catch (e) {
                }
            }
            // Create the request object
            // (This is still attached to ajaxSettings for backward compatibility)
            jQuery.ajaxSettings.xhr = window.ActiveXObject ? function () {
                return !this.isLocal && createStandardXHR() || createActiveXHR();
            } : createStandardXHR;
            // Determine support properties
            (function (xhr) {
                jQuery.extend(jQuery.support, {
                    ajax: !!xhr,
                    cors: !!xhr && "withCredentials" in xhr
                });
            }(jQuery.ajaxSettings.xhr()));
            // Create transport if the browser can provide an xhr
            if (jQuery.support.ajax) {
                jQuery.ajaxTransport(function (s) {
                    // Cross domain only allowed if supported through XMLHttpRequest
                    if (!s.crossDomain || jQuery.support.cors) {
                        var callback;
                        return {
                            send: function (headers, complete) {
                                // Get a new xhr
                                var xhr = s.xhr(), handle, i;
                                // Open the socket
                                // Passing null username, generates a login popup on Opera (#2865)
                                if (s.username) {
                                    xhr.open(s.type, s.url, s.async, s.username, s.password);
                                } else {
                                    xhr.open(s.type, s.url, s.async);
                                }
                                // Apply custom fields if provided
                                if (s.xhrFields) {
                                    for (i in s.xhrFields) {
                                        __set$(xhr, i, __get$(s.xhrFields, i));
                                    }
                                }
                                // Override mime type if needed
                                if (s.mimeType && xhr.overrideMimeType) {
                                    xhr.overrideMimeType(s.mimeType);
                                }
                                // X-Requested-With header
                                // For cross-domain requests, seeing as conditions for a preflight are
                                // akin to a jigsaw puzzle, we simply never set it to be sure.
                                // (it can always be set on a per-request basis or even using ajaxSetup)
                                // For same-domain requests, won't change header if already provided.
                                if (!s.crossDomain && !headers["X-Requested-With"]) {
                                    headers["X-Requested-With"] = "XMLHttpRequest";
                                }
                                // Need an extra try/catch for cross domain requests in Firefox 3
                                try {
                                    for (i in headers) {
                                        xhr.setRequestHeader(i, __get$(headers, i));
                                    }
                                } catch (_) {
                                }
                                // Do send the request
                                // This may raise an exception which is actually
                                // handled in jQuery.ajax (so no try/catch here)
                                xhr.send(s.hasContent && __get$(s, "data") || null);
                                // Listener
                                callback = function (_, isAbort) {
                                    var status, statusText, responseHeaders, responses, xml;
                                    // Firefox throws exceptions when accessing properties
                                    // of an xhr when a network error occured
                                    // http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
                                    try {
                                        // Was never called and is aborted or complete
                                        if (callback && (isAbort || xhr.readyState === 4)) {
                                            // Only called once
                                            callback = undefined;
                                            // Do not keep as active anymore
                                            if (handle) {
                                                xhr.onreadystatechange = jQuery.noop;
                                                if (xhrOnUnloadAbort) {
                                                    delete xhrCallbacks[handle];
                                                }
                                            }
                                            // If it's an abort
                                            if (isAbort) {
                                                // Abort it manually if needed
                                                if (xhr.readyState !== 4) {
                                                    xhr.abort();
                                                }
                                            } else {
                                                status = xhr.status;
                                                responseHeaders = xhr.getAllResponseHeaders();
                                                responses = {};
                                                xml = xhr.responseXML;
                                                // Construct response list
                                                if (xml && xml.documentElement) {
                                                    responses.xml = xml;
                                                }
                                                // When requesting binary data, IE6-9 will throw an exception
                                                // on any attempt to access responseText (#11426)
                                                try {
                                                    __set$(responses, "text", xhr.responseText);
                                                } catch (_) {
                                                }
                                                // Firefox throws an exception when accessing
                                                // statusText for faulty cross-domain requests
                                                try {
                                                    statusText = xhr.statusText;
                                                } catch (e) {
                                                    // We normalize with Webkit giving an empty statusText
                                                    statusText = "";
                                                }
                                                // Filter status for non standard behaviors
                                                // If the request is local and we have data: assume a success
                                                // (success with no data won't get notified, that's the best we
                                                // can do given current implementations)
                                                if (!status && s.isLocal && !s.crossDomain) {
                                                    status = __get$(responses, "text") ? 200 : 404;    // IE - #1450: sometimes returns 1223 when it should be 204
                                                } else if (status === 1223) {
                                                    status = 204;
                                                }
                                            }
                                        }
                                    } catch (firefoxAccessException) {
                                        if (!isAbort) {
                                            complete(-1, firefoxAccessException);
                                        }
                                    }
                                    // Call complete if needed
                                    if (responses) {
                                        complete(status, statusText, responses, responseHeaders);
                                    }
                                };
                                // if we're in sync mode or it's in cache
                                // and has been retrieved directly (IE6 & IE7)
                                // we need to manually fire the callback
                                if (!s.async || xhr.readyState === 4) {
                                    callback();
                                } else {
                                    handle = ++xhrId;
                                    if (xhrOnUnloadAbort) {
                                        // Create the active xhrs callbacks list if needed
                                        // and attach the unload handler
                                        if (!xhrCallbacks) {
                                            xhrCallbacks = {};
                                            jQuery(window).unload(xhrOnUnloadAbort);
                                        }
                                        // Add to list of active xhrs callbacks
                                        __set$(xhrCallbacks, handle, callback);
                                    }
                                    xhr.onreadystatechange = callback;
                                }
                            },
                            abort: function () {
                                if (callback) {
                                    callback(0, 1);
                                }
                            }
                        };
                    }
                });
            }
            var elemdisplay = {}, iframe, iframeDoc, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i, timerId, fxAttrs = [
                [
                    "height",
                    "marginTop",
                    "marginBottom",
                    "paddingTop",
                    "paddingBottom"
                ],
                [
                    "width",
                    "marginLeft",
                    "marginRight",
                    "paddingLeft",
                    "paddingRight"
                ],
                ["opacity"]
            ], fxNow;
            jQuery.fn.extend({
                show: function (speed, easing, callback) {
                    var elem, display;
                    if (speed || speed === 0) {
                        return this.animate(genFx("show", 3), speed, easing, callback);
                    } else {
                        for (var i = 0, j = this.length; i < j; i++) {
                            elem = __get$(this, i);
                            if (elem.style) {
                                display = elem.style.display;
                                // Reset the inline display of this element to learn if it is
                                // being hidden by cascaded rules or not
                                if (!jQuery._data(elem, "olddisplay") && display === "none") {
                                    display = elem.style.display = "";
                                }
                                // Set elements which have been overridden with display: none
                                // in a stylesheet to whatever the default browser style is
                                // for such an element
                                if (display === "" && jQuery.css(elem, "display") === "none" || !jQuery.contains(elem.ownerDocument.documentElement, elem)) {
                                    jQuery._data(elem, "olddisplay", defaultDisplay(elem.nodeName));
                                }
                            }
                        }
                        // Set the display of most of the elements in a second loop
                        // to avoid the constant reflow
                        for (i = 0; i < j; i++) {
                            elem = __get$(this, i);
                            if (elem.style) {
                                display = elem.style.display;
                                if (display === "" || display === "none") {
                                    elem.style.display = jQuery._data(elem, "olddisplay") || "";
                                }
                            }
                        }
                        return this;
                    }
                },
                hide: function (speed, easing, callback) {
                    if (speed || speed === 0) {
                        return this.animate(genFx("hide", 3), speed, easing, callback);
                    } else {
                        var elem, display, i = 0, j = this.length;
                        for (; i < j; i++) {
                            elem = __get$(this, i);
                            if (elem.style) {
                                display = jQuery.css(elem, "display");
                                if (display !== "none" && !jQuery._data(elem, "olddisplay")) {
                                    jQuery._data(elem, "olddisplay", display);
                                }
                            }
                        }
                        // Set the display of the elements in a second loop
                        // to avoid the constant reflow
                        for (i = 0; i < j; i++) {
                            if (__get$(this, i).style) {
                                __get$(this, i).style.display = "none";
                            }
                        }
                        return this;
                    }
                },
                _toggle: jQuery.fn.toggle,
                toggle: function (fn, fn2, callback) {
                    var bool = typeof fn === "boolean";
                    if (jQuery.isFunction(fn) && jQuery.isFunction(fn2)) {
                        this._toggle.apply(this, arguments);
                    } else if (fn == null || bool) {
                        this.each(function () {
                            var state = bool ? fn : jQuery(this).is(":hidden");
                            __call$(jQuery(this), state ? "show" : "hide", []);
                        });
                    } else {
                        this.animate(genFx("toggle", 3), fn, fn2, callback);
                    }
                    return this;
                },
                fadeTo: function (speed, to, easing, callback) {
                    return this.filter(":hidden").css("opacity", 0).show().end().animate({ opacity: to }, speed, easing, callback);
                },
                animate: function (prop, speed, easing, callback) {
                    var optall = jQuery.speed(speed, easing, callback);
                    if (jQuery.isEmptyObject(prop)) {
                        return this.each(optall.complete, [false]);
                    }
                    // Do not change referenced properties as per-property easing will be lost
                    prop = jQuery.extend({}, prop);
                    function doAnimation() {
                        // XXX 'this' does not always have a nodeName when running the
                        // test suite
                        if (optall.queue === false) {
                            jQuery._mark(this);
                        }
                        var opt = jQuery.extend({}, optall), isElement = this.nodeType === 1, hidden = isElement && jQuery(this).is(":hidden"), name, val, p, e, hooks, replace, parts, start, end, unit, method;
                        // will store per property easing and be used to determine when an animation is complete
                        opt.animatedProperties = {};
                        // first pass over propertys to expand / normalize
                        for (p in prop) {
                            name = jQuery.camelCase(p);
                            if (p !== name) {
                                __set$(prop, name, __get$(prop, p));
                                delete prop[p];
                            }
                            if ((hooks = __get$(jQuery.cssHooks, name)) && "expand" in hooks) {
                                replace = hooks.expand(__get$(prop, name));
                                delete prop[name];
                                // not quite $.extend, this wont overwrite keys already present.
                                // also - reusing 'p' from above because we have the correct "name"
                                for (p in replace) {
                                    if (!(p in prop)) {
                                        __set$(prop, p, __get$(replace, p));
                                    }
                                }
                            }
                        }
                        for (name in prop) {
                            val = __get$(prop, name);
                            // easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
                            if (jQuery.isArray(val)) {
                                __set$(opt.animatedProperties, name, val[1]);
                                val = __set$(prop, name, val[0]);
                            } else {
                                __set$(opt.animatedProperties, name, opt.specialEasing && __get$(opt.specialEasing, name) || opt.easing || "swing");
                            }
                            if (val === "hide" && hidden || val === "show" && !hidden) {
                                return opt.complete.call(this);
                            }
                            if (isElement && (name === "height" || name === "width")) {
                                // Make sure that nothing sneaks out
                                // Record all 3 overflow attributes because IE does not
                                // change the overflow attribute when overflowX and
                                // overflowY are set to the same value
                                opt.overflow = [
                                    this.style.overflow,
                                    this.style.overflowX,
                                    this.style.overflowY
                                ];
                                // Set display property to inline-block for height/width
                                // animations on inline elements that are having width/height animated
                                if (jQuery.css(this, "display") === "inline" && jQuery.css(this, "float") === "none") {
                                    // inline-level elements accept inline-block;
                                    // block-level elements need to be inline with layout
                                    if (!jQuery.support.inlineBlockNeedsLayout || defaultDisplay(this.nodeName) === "inline") {
                                        this.style.display = "inline-block";
                                    } else {
                                        this.style.zoom = 1;
                                    }
                                }
                            }
                        }
                        if (opt.overflow != null) {
                            this.style.overflow = "hidden";
                        }
                        for (p in prop) {
                            e = new jQuery.fx(this, opt, p);
                            val = __get$(prop, p);
                            if (rfxtypes.test(val)) {
                                // Tracks whether to show or hide based on private
                                // data attached to the element
                                method = jQuery._data(this, "toggle" + p) || (val === "toggle" ? hidden ? "show" : "hide" : 0);
                                if (method) {
                                    jQuery._data(this, "toggle" + p, method === "show" ? "hide" : "show");
                                    __call$(e, method, []);
                                } else {
                                    __call$(e, val, []);
                                }
                            } else {
                                parts = rfxnum.exec(val);
                                start = e.cur();
                                if (parts) {
                                    end = parseFloat(parts[2]);
                                    unit = parts[3] || (__get$(jQuery.cssNumber, p) ? "" : "px");
                                    // We need to compute starting value
                                    if (unit !== "px") {
                                        jQuery.style(this, p, (end || 1) + unit);
                                        start = (end || 1) / e.cur() * start;
                                        jQuery.style(this, p, start + unit);
                                    }
                                    // If a +=/-= token was provided, we're doing a relative animation
                                    if (parts[1]) {
                                        end = (parts[1] === "-=" ? -1 : 1) * end + start;
                                    }
                                    e.custom(start, end, unit);
                                } else {
                                    e.custom(start, val, "");
                                }
                            }
                        }
                        // For JS strict compliance
                        return true;
                    }
                    return optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
                },
                stop: function (type, clearQueue, gotoEnd) {
                    if (typeof type !== "string") {
                        gotoEnd = clearQueue;
                        clearQueue = type;
                        type = undefined;
                    }
                    if (clearQueue && type !== false) {
                        this.queue(type || "fx", []);
                    }
                    return this.each(function () {
                        var index, hadTimers = false, timers = jQuery.timers, data = jQuery._data(this);
                        // clear marker counters if we know they won't be
                        if (!gotoEnd) {
                            jQuery._unmark(true, this);
                        }
                        function stopQueue(elem, data, index) {
                            var hooks = __get$(data, index);
                            jQuery.removeData(elem, index, true);
                            hooks.stop(gotoEnd);
                        }
                        if (type == null) {
                            for (index in data) {
                                if (__get$(data, index) && __get$(data, index).stop && index.indexOf(".run") === index.length - 4) {
                                    stopQueue(this, data, index);
                                }
                            }
                        } else if (__get$(data, index = type + ".run") && __get$(data, index).stop) {
                            stopQueue(this, data, index);
                        }
                        for (index = timers.length; index--;) {
                            if (__get$(timers, index).elem === this && (type == null || __get$(timers, index).queue === type)) {
                                if (gotoEnd) {
                                    // force the next step to be the last
                                    __call$(timers, index, [true]);
                                } else {
                                    __get$(timers, index).saveState();
                                }
                                hadTimers = true;
                                timers.splice(index, 1);
                            }
                        }
                        // start the next in the queue if the last step wasn't forced
                        // timers currently will call their complete callbacks, which will dequeue
                        // but only if they were gotoEnd
                        if (!(gotoEnd && hadTimers)) {
                            jQuery.dequeue(this, type);
                        }
                    });
                }
            });
            // Animations created synchronously will run synchronously
            function createFxNow() {
                NativeMethods.setTimeout.call(window, __proc$Script(clearFxNow), 0);
                return fxNow = jQuery.now();
            }
            function clearFxNow() {
                fxNow = undefined;
            }
            // Generate parameters to create a standard animation
            function genFx(type, num) {
                var obj = {};
                jQuery.each(fxAttrs.concat.apply([], fxAttrs.slice(0, num)), function () {
                    __set$(obj, this, type);
                });
                return obj;
            }
            // Generate shortcuts for custom animations
            jQuery.each({
                slideDown: genFx("show", 1),
                slideUp: genFx("hide", 1),
                slideToggle: genFx("toggle", 1),
                fadeIn: { opacity: "show" },
                fadeOut: { opacity: "hide" },
                fadeToggle: { opacity: "toggle" }
            }, function (name, props) {
                __set$(jQuery.fn, name, function (speed, easing, callback) {
                    return this.animate(props, speed, easing, callback);
                });
            });
            jQuery.extend({
                speed: function (speed, easing, fn) {
                    var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
                        complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                        duration: speed,
                        easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
                    };
                    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration : opt.duration in jQuery.fx.speeds ? __get$(jQuery.fx.speeds, opt.duration) : jQuery.fx.speeds._default;
                    // normalize opt.queue - true/undefined/null -> "fx"
                    if (opt.queue == null || opt.queue === true) {
                        opt.queue = "fx";
                    }
                    // Queueing
                    opt.old = opt.complete;
                    opt.complete = function (noUnmark) {
                        if (jQuery.isFunction(opt.old)) {
                            opt.old.call(this);
                        }
                        if (opt.queue) {
                            jQuery.dequeue(this, opt.queue);
                        } else if (noUnmark !== false) {
                            jQuery._unmark(this);
                        }
                    };
                    return opt;
                },
                easing: {
                    linear: function (p) {
                        return p;
                    },
                    swing: function (p) {
                        return -Math.cos(p * Math.PI) / 2 + 0.5;
                    }
                },
                timers: [],
                fx: function (elem, options, prop) {
                    this.options = options;
                    this.elem = elem;
                    this.prop = prop;
                    options.orig = options.orig || {};
                }
            });
            jQuery.fx.prototype = {
                update: function () {
                    if (this.options.step) {
                        this.options.step.call(this.elem, this.now, this);
                    }
                    (__get$(jQuery.fx.step, this.prop) || jQuery.fx.step._default)(this);
                },
                cur: function () {
                    if (__get$(this.elem, this.prop) != null && (!this.elem.style || __get$(this.elem.style, this.prop) == null)) {
                        return __get$(this.elem, this.prop);
                    }
                    var parsed, r = jQuery.css(this.elem, this.prop);
                    // Empty strings, null, undefined and "auto" are converted to 0,
                    // complex values such as "rotate(1rad)" are returned as is,
                    // simple values such as "10px" are parsed to Float.
                    return isNaN(parsed = parseFloat(r)) ? !r || r === "auto" ? 0 : r : parsed;
                },
                custom: function (from, to, unit) {
                    var self = this, fx = jQuery.fx;
                    this.startTime = fxNow || createFxNow();
                    this.end = to;
                    this.now = this.start = from;
                    this.pos = this.state = 0;
                    this.unit = unit || this.unit || (__get$(jQuery.cssNumber, this.prop) ? "" : "px");
                    function t(gotoEnd) {
                        return self.step(gotoEnd);
                    }
                    t.queue = this.options.queue;
                    t.elem = this.elem;
                    t.saveState = function () {
                        if (jQuery._data(self.elem, "fxshow" + self.prop) === undefined) {
                            if (self.options.hide) {
                                jQuery._data(self.elem, "fxshow" + self.prop, self.start);
                            } else if (self.options.show) {
                                jQuery._data(self.elem, "fxshow" + self.prop, self.end);
                            }
                        }
                    };
                    if (t() && jQuery.timers.push(t) && !timerId) {
                        timerId = NativeMethods.setInterval.call(window, __proc$Script(fx.tick), fx.interval);
                    }
                },
                show: function () {
                    var dataShow = jQuery._data(this.elem, "fxshow" + this.prop);
                    // Remember where we started, so that we can go back to it later
                    __set$(this.options.orig, this.prop, dataShow || jQuery.style(this.elem, this.prop));
                    this.options.show = true;
                    // Begin the animation
                    // Make sure that we start at a small width/height to avoid any flash of content
                    if (dataShow !== undefined) {
                        // This show is picking up where a previous hide or show left off
                        this.custom(this.cur(), dataShow);
                    } else {
                        this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());
                    }
                    // Start by showing the element
                    jQuery(this.elem).show();
                },
                hide: function () {
                    // Remember where we started, so that we can go back to it later
                    __set$(this.options.orig, this.prop, jQuery._data(this.elem, "fxshow" + this.prop) || jQuery.style(this.elem, this.prop));
                    this.options.hide = true;
                    // Begin the animation
                    this.custom(this.cur(), 0);
                },
                step: function (gotoEnd) {
                    var p, n, complete, t = fxNow || createFxNow(), done = true, elem = this.elem, options = this.options;
                    if (gotoEnd || t >= options.duration + this.startTime) {
                        this.now = this.end;
                        this.pos = this.state = 1;
                        this.update();
                        __set$(options.animatedProperties, this.prop, true);
                        for (p in options.animatedProperties) {
                            if (__get$(options.animatedProperties, p) !== true) {
                                done = false;
                            }
                        }
                        if (done) {
                            // Reset the overflow
                            if (options.overflow != null && !jQuery.support.shrinkWrapBlocks) {
                                jQuery.each([
                                    "",
                                    "X",
                                    "Y"
                                ], function (index, value) {
                                    __set$(elem.style, "overflow" + value, __get$(options.overflow, index));
                                });
                            }
                            // Hide the element if the "hide" operation was done
                            if (options.hide) {
                                jQuery(elem).hide();
                            }
                            // Reset the properties, if the item has been hidden or shown
                            if (options.hide || options.show) {
                                for (p in options.animatedProperties) {
                                    jQuery.style(elem, p, __get$(options.orig, p));
                                    jQuery.removeData(elem, "fxshow" + p, true);
                                    // Toggle data is no longer needed
                                    jQuery.removeData(elem, "toggle" + p, true);
                                }
                            }
                            // Execute the complete function
                            // in the event that the complete function throws an exception
                            // we must ensure it won't be called twice. #5684
                            complete = options.complete;
                            if (complete) {
                                options.complete = false;
                                complete.call(elem);
                            }
                        }
                        return false;
                    } else {
                        // classical easing cannot be used with an Infinity duration
                        if (options.duration == Infinity) {
                            this.now = t;
                        } else {
                            n = t - this.startTime;
                            this.state = n / options.duration;
                            // Perform the easing function, defaults to swing
                            this.pos = __call$(jQuery.easing, __get$(options.animatedProperties, this.prop), [
                                this.state,
                                n,
                                0,
                                1,
                                options.duration
                            ]);
                            this.now = this.start + (this.end - this.start) * this.pos;
                        }
                        // Perform the next step of the animation
                        this.update();
                    }
                    return true;
                }
            };
            jQuery.extend(jQuery.fx, {
                tick: function () {
                    var timer, timers = jQuery.timers, i = 0;
                    for (; i < timers.length; i++) {
                        timer = __get$(timers, i);
                        // Checks the timer has not already been removed
                        if (!timer() && __get$(timers, i) === timer) {
                            timers.splice(i--, 1);
                        }
                    }
                    if (!timers.length) {
                        jQuery.fx.stop();
                    }
                },
                interval: 13,
                stop: function () {
                    clearInterval(timerId);
                    timerId = null;
                },
                speeds: {
                    slow: 600,
                    fast: 200,
                    _default: 400
                },
                step: {
                    opacity: function (fx) {
                        jQuery.style(fx.elem, "opacity", fx.now);
                    },
                    _default: function (fx) {
                        if (fx.elem.style && __get$(fx.elem.style, fx.prop) != null) {
                            __set$(fx.elem.style, fx.prop, fx.now + fx.unit);
                        } else {
                            __set$(fx.elem, fx.prop, fx.now);
                        }
                    }
                }
            });
            // Ensure props that can't be negative don't go there on undershoot easing
            jQuery.each(fxAttrs.concat.apply([], fxAttrs), function (i, prop) {
                // exclude marginTop, marginLeft, marginBottom and marginRight from this list
                if (prop.indexOf("margin")) {
                    __set$(jQuery.fx.step, prop, function (fx) {
                        jQuery.style(fx.elem, prop, Math.max(0, fx.now) + fx.unit);
                    });
                }
            });
            if (jQuery.expr && jQuery.expr.filters) {
                jQuery.expr.filters.animated = function (elem) {
                    return jQuery.grep(jQuery.timers, function (fn) {
                        return elem === fn.elem;
                    }).length;
                };
            }
            // Try to restore the default display value of an element
            function defaultDisplay(nodeName) {
                if (!__get$(elemdisplay, nodeName)) {
                    var body = document.body, elem = jQuery("<" + nodeName + ">").appendTo(body), display = elem.css("display");
                    elem.remove();
                    // If the simple way fails,
                    // get element's real default display by attaching it to a temp iframe
                    if (display === "none" || display === "") {
                        // No iframe to use yet, so create it
                        if (!iframe) {
                            iframe = document.createElement("iframe");
                            iframe.frameBorder = iframe.width = iframe.height = 0;
                        }
                        body.appendChild(iframe);
                        // Create a cacheable copy of the iframe document on first call.
                        // IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
                        // document to it; WebKit & Firefox won't allow reusing the iframe document.
                        if (!iframeDoc || !iframe.createElement) {
                            iframeDoc = (iframe.contentWindow || iframe.contentDocument).document;
                            iframeDoc.write((jQuery.support.boxModel ? "<!doctype html>" : "") + "<html><body>");
                            iframeDoc.close();
                        }
                        elem = iframeDoc.createElement(nodeName);
                        iframeDoc.body.appendChild(elem);
                        display = jQuery.css(elem, "display");
                        body.removeChild(iframe);
                    }
                    // Store the correct default display
                    __set$(elemdisplay, nodeName, display);
                }
                return __get$(elemdisplay, nodeName);
            }
            var getOffset, rtable = /^t(?:able|d|h)$/i, rroot = /^(?:body|html)$/i;
            if ("getBoundingClientRect" in document.documentElement) {
                getOffset = function (elem, doc, docElem, box) {
                    try {
                        box = elem.getBoundingClientRect();
                    } catch (e) {
                    }
                    // Make sure we're not dealing with a disconnected DOM node
                    if (!box || !jQuery.contains(docElem, elem)) {
                        return box ? {
                            top: box.top,
                            left: box.left
                        } : {
                            top: 0,
                            left: 0
                        };
                    }
                    var body = doc.body, win = getWindow(doc), clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, scrollTop = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop || body.scrollTop, scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft, top = box.top + scrollTop - clientTop, left = box.left + scrollLeft - clientLeft;
                    return {
                        top: top,
                        left: left
                    };
                };
            } else {
                getOffset = function (elem, doc, docElem) {
                    var computedStyle, offsetParent = elem.offsetParent, prevOffsetParent = elem, body = doc.body, defaultView = doc.defaultView, prevComputedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle, top = elem.offsetTop, left = elem.offsetLeft;
                    while ((elem = elem.parentNode) && elem !== body && elem !== docElem) {
                        if (jQuery.support.fixedPosition && prevComputedStyle.position === "fixed") {
                            break;
                        }
                        computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
                        top -= elem.scrollTop;
                        left -= elem.scrollLeft;
                        if (elem === offsetParent) {
                            top = top + elem.offsetTop;
                            left = left + elem.offsetLeft;
                            if (jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName))) {
                                top = top + (parseFloat(computedStyle.borderTopWidth) || 0);
                                left = left + (parseFloat(computedStyle.borderLeftWidth) || 0);
                            }
                            prevOffsetParent = offsetParent;
                            offsetParent = elem.offsetParent;
                        }
                        if (jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible") {
                            top = top + (parseFloat(computedStyle.borderTopWidth) || 0);
                            left = left + (parseFloat(computedStyle.borderLeftWidth) || 0);
                        }
                        prevComputedStyle = computedStyle;
                    }
                    if (prevComputedStyle.position === "relative" || prevComputedStyle.position === "static") {
                        top = top + body.offsetTop;
                        left = left + body.offsetLeft;
                    }
                    if (jQuery.support.fixedPosition && prevComputedStyle.position === "fixed") {
                        top = top + Math.max(docElem.scrollTop, body.scrollTop);
                        left = left + Math.max(docElem.scrollLeft, body.scrollLeft);
                    }
                    return {
                        top: top,
                        left: left
                    };
                };
            }
            jQuery.fn.offset = function (options) {
                if (arguments.length) {
                    return options === undefined ? this : this.each(function (i) {
                        jQuery.offset.setOffset(this, options, i);
                    });
                }
                var elem = this[0], doc = elem && elem.ownerDocument;
                if (!doc) {
                    return null;
                }
                if (elem === doc.body) {
                    return jQuery.offset.bodyOffset(elem);
                }
                return getOffset(elem, doc, doc.documentElement);
            };
            jQuery.offset = {
                bodyOffset: function (body) {
                    var top = body.offsetTop, left = body.offsetLeft;
                    if (jQuery.support.doesNotIncludeMarginInBodyOffset) {
                        top = top + (parseFloat(jQuery.css(body, "marginTop")) || 0);
                        left = left + (parseFloat(jQuery.css(body, "marginLeft")) || 0);
                    }
                    return {
                        top: top,
                        left: left
                    };
                },
                setOffset: function (elem, options, i) {
                    var position = jQuery.css(elem, "position");
                    // set position first, in-case top/left are set even on static elem
                    if (position === "static") {
                        elem.style.position = "relative";
                    }
                    var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, "top"), curCSSLeft = jQuery.css(elem, "left"), calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto", [
                        curCSSTop,
                        curCSSLeft
                    ]) > -1, props = {}, curPosition = {}, curTop, curLeft;
                    // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
                    if (calculatePosition) {
                        curPosition = curElem.position();
                        curTop = curPosition.top;
                        curLeft = curPosition.left;
                    } else {
                        curTop = parseFloat(curCSSTop) || 0;
                        curLeft = parseFloat(curCSSLeft) || 0;
                    }
                    if (jQuery.isFunction(options)) {
                        options = options.call(elem, i, curOffset);
                    }
                    if (options.top != null) {
                        props.top = options.top - curOffset.top + curTop;
                    }
                    if (options.left != null) {
                        props.left = options.left - curOffset.left + curLeft;
                    }
                    if ("using" in options) {
                        options.using.call(elem, props);
                    } else {
                        curElem.css(props);
                    }
                }
            };
            jQuery.fn.extend({
                position: function () {
                    if (!this[0]) {
                        return null;
                    }
                    var elem = this[0],
                    // Get *real* offsetParent
                        offsetParent = this.offsetParent(),
                    // Get correct offsets
                        offset = this.offset(), parentOffset = rroot.test(offsetParent[0].nodeName) ? {
                            top: 0,
                            left: 0
                        } : offsetParent.offset();
                    // Subtract element margins
                    // note: when an element has margin: auto the offsetLeft and marginLeft
                    // are the same in Safari causing offset.left to incorrectly be 0
                    offset.top -= parseFloat(jQuery.css(elem, "marginTop")) || 0;
                    offset.left -= parseFloat(jQuery.css(elem, "marginLeft")) || 0;
                    // Add offsetParent borders
                    parentOffset.top = parentOffset.top + (parseFloat(jQuery.css(offsetParent[0], "borderTopWidth")) || 0);
                    parentOffset.left = parentOffset.left + (parseFloat(jQuery.css(offsetParent[0], "borderLeftWidth")) || 0);
                    // Subtract the two offsets
                    return {
                        top: offset.top - parentOffset.top,
                        left: offset.left - parentOffset.left
                    };
                },
                offsetParent: function () {
                    return this.map(function () {
                        var offsetParent = this.offsetParent || document.body;
                        while (offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static")) {
                            offsetParent = offsetParent.offsetParent;
                        }
                        return offsetParent;
                    });
                }
            });
            // Create scrollLeft and scrollTop methods
            jQuery.each({
                scrollLeft: "pageXOffset",
                scrollTop: "pageYOffset"
            }, function (method, prop) {
                var top = /Y/.test(prop);
                __set$(jQuery.fn, method, function (val) {
                    return jQuery.access(this, function (elem, method, val) {
                        var win = getWindow(elem);
                        if (val === undefined) {
                            return win ? prop in win ? __get$(win, prop) : jQuery.support.boxModel && __get$(win.document.documentElement, method) || __get$(win.document.body, method) : __get$(elem, method);
                        }
                        if (win) {
                            win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
                        } else {
                            __set$(elem, method, val);
                        }
                    }, method, val, arguments.length, null);
                });
            });
            function getWindow(elem) {
                return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
            }
            // Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
            jQuery.each({
                Height: "height",
                Width: "width"
            }, function (name, type) {
                var clientProp = "client" + name, scrollProp = "scroll" + name, offsetProp = "offset" + name;
                // innerHeight and innerWidth
                __set$(jQuery.fn, "inner" + name, function () {
                    var elem = this[0];
                    return elem ? elem.style ? parseFloat(jQuery.css(elem, type, "padding")) : __call$(this, type, []) : null;
                });
                // outerHeight and outerWidth
                __set$(jQuery.fn, "outer" + name, function (margin) {
                    var elem = this[0];
                    return elem ? elem.style ? parseFloat(jQuery.css(elem, type, margin ? "margin" : "border")) : __call$(this, type, []) : null;
                });
                __set$(jQuery.fn, type, function (value) {
                    return jQuery.access(this, function (elem, type, value) {
                        var doc, docElemProp, orig, ret;
                        if (jQuery.isWindow(elem)) {
                            // 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
                            doc = elem.document;
                            docElemProp = __get$(doc.documentElement, clientProp);
                            return jQuery.support.boxModel && docElemProp || doc.body && __get$(doc.body, clientProp) || docElemProp;
                        }
                        // Get document width or height
                        if (elem.nodeType === 9) {
                            // Either scroll[Width/Height] or offset[Width/Height], whichever is greater
                            doc = elem.documentElement;
                            // when a window > document, IE6 reports a offset[Width/Height] > client[Width/Height]
                            // so we can't use max, as it'll choose the incorrect offset[Width/Height]
                            // instead we use the correct client[Width/Height]
                            // support:IE6
                            if (__get$(doc, clientProp) >= __get$(doc, scrollProp)) {
                                return __get$(doc, clientProp);
                            }
                            return Math.max(__get$(elem.body, scrollProp), __get$(doc, scrollProp), __get$(elem.body, offsetProp), __get$(doc, offsetProp));
                        }
                        // Get width or height on the element
                        if (value === undefined) {
                            orig = jQuery.css(elem, type);
                            ret = parseFloat(orig);
                            return jQuery.isNumeric(ret) ? ret : orig;
                        }
                        // Set the width or height on the element
                        jQuery(elem).css(type, value);
                    }, type, value, arguments.length, null);
                });
            });
            // Expose jQuery to the global object
            window.jQuery = window.$ = jQuery;
            // Expose jQuery as an AMD module, but only for AMD loaders that
            // understand the issues with loading multiple versions of jQuery
            // in a page that all might call define(). The loader will indicate
            // they have special allowances for multiple jQuery versions by
            // specifying define.amd.jQuery = true. Register as a named module,
            // since jQuery can be concatenated with other files that may use define,
            // but not use a proper concatenation script that understands anonymous
            // AMD modules. A named AMD is safest and most robust way to register.
            // Lowercase jquery is used because AMD module names are derived from
            // file names, and jQuery is normally delivered in a lowercase file name.
            // Do this after creating the global so that if an AMD module wants to call
            // noConflict to hide this version of jQuery, it will work.
            if (typeof define === "function" && define.amd && define.amd.jQuery) {
                define("jquery", [], function () {
                    return jQuery;
                });
            }
        }(window));
        
        exports.jQuery = window.jQuery.noConflict(true);
    };
});
HammerheadClient.define('TextSelection', function (require, exports) {
    var $ = require('jQuery'),
        ContentEditableHelper = require('ContentEditableHelper'),
        EventSandbox = require('DOMSandbox.Event'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        Util = require('Util');

    //NOTE: we can't determine selection direction in ie from dom api. Therefore we should listen selection changes,
    // and calculate direction using it.
    var BACKWARD_SELECTION_DIRECTION = 'backward',
        FORWARD_SELECTION_DIRECTION = 'forward',
        NONE_SELECTION_DIRECTION = 'none';

    var selectionDirection = NONE_SELECTION_DIRECTION,

        initialLeft = 0,
        initialTop = 0,
        lastSelectionHeight = 0,
        lastSelectionLeft = 0,
        lastSelectionLength = 0,
        lastSelectionTop = 0;

    function stateChanged(left, top, height, width, selectionLength) {
        if (!selectionLength) {
            initialLeft = left;
            initialTop = top;
            selectionDirection = NONE_SELECTION_DIRECTION;
        } else {
            switch (selectionDirection) {
                case NONE_SELECTION_DIRECTION:
                    if (top === lastSelectionTop && (left === lastSelectionLeft || height > lastSelectionHeight))
                        selectionDirection = FORWARD_SELECTION_DIRECTION;
                    else if (left < lastSelectionLeft || top < lastSelectionTop)
                        selectionDirection = BACKWARD_SELECTION_DIRECTION;

                    break;

                case FORWARD_SELECTION_DIRECTION:
                    if (left === lastSelectionLeft && top === lastSelectionTop ||
                        (left < lastSelectionLeft && height > lastSelectionHeight) ||
                        (top === lastSelectionTop && height === lastSelectionHeight && selectionLength > lastSelectionLength) &&
                            (left + width) !== initialLeft) {

                        break;
                    } else if (left < lastSelectionLeft || top < lastSelectionTop)
                        selectionDirection = BACKWARD_SELECTION_DIRECTION;

                    break;

                case BACKWARD_SELECTION_DIRECTION:
                    if ((left < lastSelectionLeft || top < lastSelectionTop) && selectionLength > lastSelectionLength)
                        break;
                    else if (top === initialTop && (left >= initialLeft || height > lastSelectionHeight))
                        selectionDirection = FORWARD_SELECTION_DIRECTION;

                    break;
            }
        }

        lastSelectionHeight = height;
        lastSelectionLeft = left;
        lastSelectionLength = selectionLength;
        lastSelectionTop = top;
    }

    function onSelectionChange() {
        var activeElement = null,
            endSelection = null,
            range = null,
            startSelection = null;

        try {
            if (this.selection)
                range = this.selection.createRange();
            else {
                //HACK: we need do this for IE11 because otherwise we can not get TextRange properties
                activeElement = this.activeElement;

                if (!activeElement || !Util.isTextEditableElement(activeElement)) {
                    selectionDirection = NONE_SELECTION_DIRECTION;

                    return;
                } else {
                    startSelection = exports.getSelectionStart(activeElement);
                    endSelection = exports.getSelectionEnd(activeElement);
                    range = activeElement.createTextRange();
                    range.collapse(true);
                    range.moveStart('character', startSelection);
                    range.moveEnd('character', endSelection - startSelection);
                }
            }
        } catch (e) {
            //NOTE: in ie it raises error when there are not a real selection
            selectionDirection = NONE_SELECTION_DIRECTION;

            return;
        }

        stateChanged(range.offsetLeft, range.offsetTop, range.boundingHeight, range.boundingWidth,
            range.htmlText ? range.htmlText.length : 0);
    }

    if (Util.isIE)
        NativeMethods.addEventListener.call(document, 'selectionchange', onSelectionChange, true);

    //utils for contentEditable
    function hasInverseSelectionContentEditable(el) {
        var curDocument = el ? Util.findDocument(el) : document,
            selection = curDocument.getSelection(),
            range = null,
            backward = false;

        if (selection) {
            if (!selection.isCollapsed) {
                range = curDocument.createRange();
                range.setStart(selection.anchorNode, selection.anchorOffset);
                range.setEnd(selection.focusNode, selection.focusOffset);
                backward = range.collapsed;
                range.detach();
            }
        }

        return backward;
    }

    function selectContentEditable(el, from, to, needFocus, inverse) {
        var endPosition = null,
            firstTextNodeChild = null,
            latestTextNodeChild = null,
            startPosition = null,
            temp = null;

        if (typeof from !== 'undefined' && typeof to !== 'undefined' && from > to) {
            temp = from;
            from = to;
            to = temp;
            inverse = true;
        }

        if (typeof from === 'undefined') {
            firstTextNodeChild = ContentEditableHelper.getFirstVisibleTextNode(el);
            startPosition = {
                node: firstTextNodeChild || el,
                offset: firstTextNodeChild && firstTextNodeChild.nodeValue ?
                    ContentEditableHelper.getFirstNonWhitespaceSymbolIndex(firstTextNodeChild.nodeValue) : 0
            };
        }

        if (typeof to === 'undefined') {
            latestTextNodeChild = ContentEditableHelper.getLastVisibleTextNode(el, true);
            endPosition = {
                node: latestTextNodeChild || el,
                offset: latestTextNodeChild && latestTextNodeChild.nodeValue ?
                    ContentEditableHelper.getLastNonWhitespaceSymbolIndex(latestTextNodeChild.nodeValue) : 0
            };
        }

        startPosition = startPosition || ContentEditableHelper.calculateNodeAndOffsetByPosition(el, from);
        endPosition = endPosition || ContentEditableHelper.calculateNodeAndOffsetByPosition(el, to);

        if (!startPosition.node || !endPosition.node)
            return;

        exports.selectByNodesAndOffsets(startPosition.node, startPosition.offset, endPosition.node, endPosition.offset, needFocus, inverse);
    }

    function correctContentEditableSelectionBeforeDelete(el) {
        var selection = exports.getSelectionByElement(el),

            startNode = selection.anchorNode,
            endNode = selection.focusNode,

            startOffset = selection.anchorOffset,
            endOffset = selection.focusOffset,

            startNodeFirstNonWhitespaceSymbol = ContentEditableHelper.getFirstNonWhitespaceSymbolIndex(startNode.nodeValue),
            startNodeLastNonWhitespaceSymbol = ContentEditableHelper.getLastNonWhitespaceSymbolIndex(startNode.nodeValue),

            endNodeFirstNonWhitespaceSymbol = ContentEditableHelper.getFirstNonWhitespaceSymbolIndex(endNode.nodeValue),
            endNodeLastNonWhitespaceSymbol = ContentEditableHelper.getLastNonWhitespaceSymbolIndex(endNode.nodeValue),

            newStartOffset = null,
            newEndOffset = null;

        if (startNode.nodeType === 3) {
            if (startOffset < startNodeFirstNonWhitespaceSymbol && startOffset !== 0)
                newStartOffset = 0;
            else if (startOffset !== startNode.nodeValue.length && ((ContentEditableHelper.isInvisibleTextNode(startNode) && startOffset !== 0) ||
                (startOffset > startNodeLastNonWhitespaceSymbol)))
                newStartOffset = startNode.nodeValue.length;
        }

        if (endNode.nodeType === 3) {
            if (endOffset < endNodeFirstNonWhitespaceSymbol && endOffset !== 0)
                newEndOffset = 0;
            else if (endOffset !== endNode.nodeValue.length && ((ContentEditableHelper.isInvisibleTextNode(endNode) && endOffset !== 0) ||
                (endOffset > endNodeLastNonWhitespaceSymbol)))
                newEndOffset = endNode.nodeValue.length;
        }

        if ($.browser.webkit) {
            if (newStartOffset !== null) {
                if (newStartOffset === 0)
                    startNode.nodeValue = startNode.nodeValue.substring(startNodeFirstNonWhitespaceSymbol);
                else
                    startNode.nodeValue = startNode.nodeValue.substring(0, startNodeLastNonWhitespaceSymbol);
            }

            if (newEndOffset !== null) {
                if (newEndOffset === 0)
                    endNode.nodeValue = endNode.nodeValue.substring(endNodeFirstNonWhitespaceSymbol);
                else
                    endNode.nodeValue = endNode.nodeValue.substring(0, endNodeLastNonWhitespaceSymbol);
            }
        }

        if (newStartOffset !== null || newEndOffset !== null) {
            newStartOffset = newStartOffset !== null ? (newStartOffset === 0 ? newStartOffset : startNode.nodeValue.length) : startOffset;
            newEndOffset = newEndOffset !== null ? (newEndOffset === 0 ? newEndOffset : endNode.nodeValue.length) : endOffset;
            exports.selectByNodesAndOffsets(startNode, newStartOffset, endNode, newEndOffset);
        }
    }

    function correctRectangle(currentRect, options) {
        var documentScroll = options.documentScroll,
            iFrameDocumentScroll = options.iFrameDocumentScroll,
            iFrameOffset = options.iFrameOffset,
            iFramePadding = options.iFramePadding,
            iFrameBorders = options.iFrameBorders,

            currentRectHeight = currentRect.top + options.elementHeight - 1,

            clientOffset = null,

            currentLeft = null,
            currentTop = null,
            currentBottom = null;

        if (Util.isIE && !Util.isIE11 && options.isInProcessedIFrame) {
            if (Util.browserVersion === 9 && !options.isContentEditable) {
                currentLeft = Math.ceil(currentRect.left) + options.windowTopScroll.left - options.crossDomainIFrameOffset.left - options.crossDomainIFrameBorders.left - options.crossDomainIFramePadding.left;
                currentTop = Math.ceil(currentRect.top) + options.windowTopScroll.top - options.crossDomainIFrameOffset.top - options.crossDomainIFrameBorders.top - options.crossDomainIFramePadding.top;
                currentBottom = Math.ceil(currentRect.bottom) + options.windowTopScroll.top - options.crossDomainIFrameOffset.top - options.crossDomainIFrameBorders.top - options.crossDomainIFramePadding.top;
            } else if (Util.browserVersion === 10 || options.isContentEditable) {
                currentLeft = Math.ceil(currentRect.left);
                currentTop = Math.ceil(currentRect.top);
                currentBottom = Math.ceil(currentRect.bottom);
            }
        } else {
            if (options.isTextarea) {
                currentLeft = Math.ceil(currentRect.left);
                currentTop = Math.ceil(currentRect.top);
                currentBottom = Math.ceil(currentRect.bottom);
            } else {
                if (options.isInIFrame && (options.isContentEditable || Util.isIE)) {
                    clientOffset = options.elementOffset;
                    clientOffset.left -= (iFrameOffset.left + iFrameBorders.left + iFramePadding.left);
                    clientOffset.top -= (iFrameOffset.top + iFrameBorders.top + iFramePadding.top);
                    clientOffset = Util.offsetToClientCoords({x: clientOffset.left, y: clientOffset.top});
                } else
                    clientOffset = Util.offsetToClientCoords({x: options.elementOffset.left, y: options.elementOffset.top});

                currentLeft = Math.ceil(Math.ceil(currentRect.left) <= clientOffset.x ? clientOffset.x + options.elementBorders.left + 1 : currentRect.left);
                currentTop = Math.ceil(Math.ceil(currentRect.top) <= clientOffset.y ? clientOffset.y + options.elementBorders.top + 1 : currentRect.top);
                currentBottom = Math.floor(Math.floor(currentRect.bottom) >= (clientOffset.y + options.elementBorders.top + options.elementBorders.bottom + options.elementHeight) ? currentRectHeight : currentRect.bottom);
            }
        }

        if (options.isInIFrame && (options.isContentEditable || (Util.isIE && Util.browserVersion !== 9))) {
            currentLeft = currentLeft + iFrameDocumentScroll.left + iFrameOffset.left + iFrameBorders.left + iFramePadding.left;
            currentTop = currentTop + iFrameDocumentScroll.top + iFrameOffset.top + iFrameBorders.top + iFramePadding.top;
            currentBottom = currentBottom + iFrameDocumentScroll.top + iFrameOffset.top + iFrameBorders.top + iFramePadding.top;
        } else if (options.isInIFrame && Util.isIE && Util.browserVersion === 9) {
            currentLeft = currentLeft + iFrameDocumentScroll.left + documentScroll.left;
            currentTop = currentTop + iFrameDocumentScroll.top + documentScroll.top;
            currentBottom = currentBottom + iFrameDocumentScroll.top + documentScroll.top;
        } else if (options.isContentEditable || (Util.isIE && !Util.isIE11)) {
            currentLeft = currentLeft + documentScroll.left;
            currentTop = currentTop + documentScroll.top;
            currentBottom = currentBottom + documentScroll.top;
        } else {
            currentLeft = currentLeft + documentScroll.left + iFrameDocumentScroll.left;
            currentTop = currentTop + documentScroll.top + iFrameDocumentScroll.top;
            currentBottom = currentBottom + documentScroll.top + iFrameDocumentScroll.top;
        }

        return {
            bottom: currentBottom,
            left: currentLeft,
            top: currentTop
        };
    }

    //API
    exports.getSelectionStart = function (el) {
        var selection = null;

        if (!Util.isContentEditableElement(el))
            return EventSandbox.getSelection(el).start;

        if (exports.hasElementContainsSelection(el)) {
            selection = exports.getSelectionByElement(el);

            return ContentEditableHelper.getSelectionStartPosition(el, selection, hasInverseSelectionContentEditable(el));
        }

        return 0;
    };

    exports.getSelectionEnd = function (el) {
        var selection = null;

        if (!Util.isContentEditableElement(el))
            return EventSandbox.getSelection(el).end;

        if (exports.hasElementContainsSelection(el)) {
            selection = exports.getSelectionByElement(el);

            return ContentEditableHelper.getSelectionEndPosition(el, selection, hasInverseSelectionContentEditable(el));
        }

        return 0;
    };

    exports.getSelectedText = function (el) {
        return el.value.substring(exports.getSelectionStart(el), exports.getSelectionEnd(el));
    };

    exports.hasInverseSelection = function (el) {
        if (Util.isContentEditableElement(el))
            return hasInverseSelectionContentEditable(el);

        return (EventSandbox.getSelection(el).direction || selectionDirection) === BACKWARD_SELECTION_DIRECTION;
    };

    exports.hasInverseSelectionContentEditable = hasInverseSelectionContentEditable;

    exports.getSelectionByElement = function (el) {
        var currentDocument = Util.findDocument(el);

        return currentDocument ? currentDocument.getSelection() : window.getSelection();
    };

    exports.getPositionCoordinates = function (el, position, correctOptions) {
        var range = null,
            rects = null,
            selectionPosition = null,
            rect = null,

            isTextarea = el.tagName.toLowerCase() === 'textarea',
            isContentEditable = Util.isContentEditableElement(el),
            offset = Util.getOffsetPosition(el);

        //NOTE: we don't create fake div element for contentEditable elements
        //because we can get the selection dimensions directly
        if (isContentEditable) {
            range = Util.findDocument(el).createRange();
            selectionPosition = ContentEditableHelper.calculateNodeAndOffsetByPosition(el, position);

            range.setStart(selectionPosition.node, Math.min(selectionPosition.offset, selectionPosition.node.length));
            range.setEnd(selectionPosition.node, Math.min(selectionPosition.offset, selectionPosition.node.length));
            rect = range.getClientRects()[0];

            return rect ? correctRectangle(rect, correctOptions) : null;
        }

        //NOTE: for IE
        if (typeof el.createTextRange === "function") {
            range = el.createTextRange();
            range.collapse(true);
            range.moveStart('character', position);
            range.moveEnd('character', position);
            range.collapse(true);
            rect = range.getBoundingClientRect();

            return rect ? correctRectangle(rect, correctOptions) : null;
        }

        var $body = $(document).find('body'),
            bodyMargin = Util.getElementMargin($body),
            bodyLeft = null,
            bodyTop = null,
            elementMargin = Util.getElementMargin($(el)),
            elementTop = offset.top - elementMargin.top,
            elementLeft = offset.left - elementMargin.left,
            width = el.scrollWidth,

            $fakeDiv = $('<div></div>'),
            fakeDivCssStyles = 'white-space:pre-wrap;border-style:solid;',
            listOfModifiers = ['direction', 'font-family', 'font-size', 'font-size-adjust', 'font-variant', 'font-weight', 'font-style', 'letter-spacing', 'line-height', 'text-align', 'text-indent', 'text-transform', 'word-wrap', 'word-spacing', 'padding-top', 'padding-left', 'padding-right', 'padding-bottom', 'margin-top', 'margin-left', 'margin-right', 'margin-bottom', 'border-top-width', 'border-left-width', 'border-right-width', 'border-bottom-width'];

        if (Util.getCssStyleValue($body[0], 'position') === 'absolute') {
            elementLeft -= bodyMargin.left;
            elementTop -= bodyMargin.top;
            bodyLeft = Util.getCssStyleValue($body[0], 'left');

            if (bodyLeft !== 'auto')
                elementLeft -= parseInt(bodyLeft.replace('px', ''));

            bodyTop = Util.getCssStyleValue($body[0], 'top');

            if (bodyTop !== 'auto')
                elementTop -= parseInt(bodyTop.replace('px', ''));
        }

        $.each(listOfModifiers, function (index, value) {
            fakeDivCssStyles += value + ':' + Util.getCssStyleValue(el, value) + ';';
        });

        $fakeDiv.appendTo($body);

        try {
            $fakeDiv.css({
                cssText: fakeDivCssStyles,
                position: 'absolute',
                top: elementTop,
                left: elementLeft,
                width: width,
                height: el.scrollHeight
            });

            $fakeDiv[0].textContent = !el.value.length ? ' ' : el.value;

            range = document.createRange(); //B254723
            range.setStart($fakeDiv[0].firstChild, Math.min(position, el.value.length));
            range.setEnd($fakeDiv[0].firstChild, Math.min(position, el.value.length));

            if (isTextarea) {
                rects = range.getClientRects();
                rect = range.getBoundingClientRect();

                if (rect.width === 0 && rect.height === 0)
                    rect = rects[0];
            } else
                rect = range.getClientRects()[0];

            $fakeDiv.remove();
        } catch (err) {
            $fakeDiv.remove();

            return {};
        }

        return rect ? correctRectangle(rect, correctOptions) : null;
    };

    exports.select = function (el, from, to, inverse) {
        if (Util.isContentEditableElement(el)) {
            selectContentEditable(el, from, to, true, inverse);

            return;
        }

        var start = from || 0,
            end = typeof to === 'undefined' ? el.value.length : to,
            temp = null;

        if (start > end) {
            temp = start;
            start = end;
            end = temp;
            inverse = true;
        }

        EventSandbox.setSelection(el, start, end, inverse ? BACKWARD_SELECTION_DIRECTION : FORWARD_SELECTION_DIRECTION);

        selectionDirection = from === to ?
            NONE_SELECTION_DIRECTION :
            inverse ? BACKWARD_SELECTION_DIRECTION : FORWARD_SELECTION_DIRECTION;
    };

    exports.selectByNodesAndOffsets = function (startNode, startOffset, endNode, endOffset, needFocus, inverse) {
        var parentElement = ContentEditableHelper.findContentEditableParent(startNode),
            curDocument = Util.findDocument(parentElement),
            selection = exports.getSelectionByElement(parentElement),
            range = curDocument.createRange(),

            startNodeLength = startNode.nodeValue ? startNode.length : 0,
            endNodeLength = endNode.nodeValue ? endNode.length : 0;

        var selectionSetter = function () {
            selection.removeAllRanges();

            //NOTE: For IE we can't create inverse selection
            if (!inverse || Util.isIE) {
                range.setStart(startNode, Math.min(startNodeLength, startOffset));
                range.setEnd(endNode, Math.min(endNodeLength, endOffset));
                selection.addRange(range);
            } else {
                range.setStart(endNode, Math.min(endNodeLength, endOffset));
                range.setEnd(endNode, Math.min(endNodeLength, endOffset));
                selection.addRange(range);

                if ($.browser.webkit && ContentEditableHelper.isInvisibleTextNode(startNode)) {
                    try {
                        selection.extend(startNode, Math.min(startOffset, 1));
                    } catch (err) {
                        selection.extend(startNode, 0);
                    }
                } else
                    selection.extend(startNode, Math.min(startNodeLength, startOffset));
            }
        };

        EventSandbox.wrapSetterSelection(parentElement, selectionSetter, needFocus, true);
    };

    exports.deleteSelectionContents = function (el, selectAll) {
        var startSelection = exports.getSelectionStart(el),
            endSelection = exports.getSelectionEnd(el);

        function deleteSelectionRanges(el) {
            var selection = exports.getSelectionByElement(el),
                rangeCount = selection.rangeCount;

            if (!rangeCount)
                return;

            for (var i = 0; i < rangeCount; i++)
                selection.getRangeAt(i).deleteContents();
        }

        if (selectAll)
            selectContentEditable(el);

        if (startSelection === endSelection)
            return;

        // NOTE: If selection is not contain initial and final invisible symbols
        //we should select its
        correctContentEditableSelectionBeforeDelete(el);

        deleteSelectionRanges(el);

        var selection = exports.getSelectionByElement(el),
            range = null;

        //NOTE: We should try to do selection collapsed
        if (selection.rangeCount && !selection.getRangeAt(0).collapsed) {
            range = selection.getRangeAt(0);
            range.collapse(true);
        }
    };

    exports.setCursorToLastVisiblePosition = function (el) {
        var position = ContentEditableHelper.getLastVisiblePosition(el);

        selectContentEditable(el, position, position);
    };

    exports.hasElementContainsSelection = function (el) {
        var selection = exports.getSelectionByElement(el);

        return selection.anchorNode && selection.focusNode ?
            Util.isElementContainsNode(el, selection.anchorNode) && Util.isElementContainsNode(el, selection.focusNode) :
            false;
    };
});
/* global isIFrameWithoutSrc:true */
HammerheadClient.define('Transport', function (require, exports) {
    var $ = require('jQuery'),
        async = require('async'),
        JSON = require('JSON'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        ServiceCommands = require('Shared.ServiceCommands'),
        Settings = require('Settings'),
        Util = require('Util');

    //Const
    var SWITCH_BACK_TO_ASYNC_XHR_DELAY = 2000,
        SERVICE_MESSAGES_WAITING_INTERVAL = 50,
        MSG_RECEIVED = 'received';

    //Globals
    var eventEmitter = new Util.EventEmitter(),
        msgQueue = {},
        useAsyncXhr = true;

    //NOTE: if we are unloading we should switch to sync XHR to be sure that we will not lost any service msgs
    window.addEventListener('beforeunload', function () {
        useAsyncXhr = false;

        //NOTE: if unloading was canceled switch back to async XHR
        NativeMethods.setTimeout.call(window, function () {
            useAsyncXhr = true;
        }, SWITCH_BACK_TO_ASYNC_XHR_DELAY);
    }, true);

    function sendNextQueuedMsg(queueId) {
        var queueItem = msgQueue[queueId][0];

        exports.asyncServiceMsg(queueItem.msg, function (res) {
            if (queueItem.callback)
                queueItem.callback(res);

            msgQueue[queueId].shift();

            eventEmitter.emit(MSG_RECEIVED, {});

            if (msgQueue[queueId].length)
                sendNextQueuedMsg(queueId);
        });
    }

    function storeMessage(msg) {
        var storedMessages = getStoredMessages();

        storedMessages.push(msg);

        window.localStorage.setItem(Settings.JOB_UID, JSON.stringify(storedMessages));
    }

    function getStoredMessages() {
        var storedMessagesStr = window.localStorage.getItem(Settings.JOB_UID);

        return storedMessagesStr ? JSON.parse(storedMessagesStr) : [];
    }

    function removeMessageFromStore(cmd) {
        var messages = getStoredMessages();

        for (var i = 0; i < messages.length; i++) {
            if (messages[i].cmd === cmd) {
                messages.splice(i, 1);

                break;
            }
        }

        window.localStorage.setItem(Settings.JOB_UID, JSON.stringify(messages));
    }

    exports.waitCookieMsg = function (callback) {
        var cookieMsgInProgress = function () {
            return msgQueue[ServiceCommands.SET_COOKIE] && !!msgQueue[ServiceCommands.SET_COOKIE].length;
        };

        if (cookieMsgInProgress()) {
            var handler = function () {
                if (!cookieMsgInProgress()) {
                    eventEmitter.off(MSG_RECEIVED, handler);

                    callback();
                }
            };

            eventEmitter.on(MSG_RECEIVED, handler);
        } else
            callback();
    };

    //NOTE: use sync method for most important things only
    exports.syncServiceMsg = function (msg, callback) {
        var storedSync = useAsyncXhr;

        useAsyncXhr = false;

        exports.asyncServiceMsg(msg, function (res) {
            useAsyncXhr = storedSync;
            callback(res);
        });
    };

    var activeServiceMessagesCounter = 0;

    exports.waitForServiceMessagesCompleted = function (callback, timeout) {
        if (!activeServiceMessagesCounter) {
            callback();
            return;
        }

        var timeoutId = window.setTimeout(function () {
            window.clearInterval(intervalId);
            callback();
        }, timeout);

        var intervalId = window.setInterval(function () {
            if (!activeServiceMessagesCounter) {
                window.clearInterval(intervalId);
                window.clearTimeout(timeoutId);
                callback();
            }
        }, SERVICE_MESSAGES_WAITING_INTERVAL);
    };

    exports.asyncServiceMsg = function (msg, callback) {
        msg.jobUid = Settings.JOB_UID;
        msg.jobOwnerToken = Settings.JOB_OWNER_TOKEN;

        if (isIFrameWithoutSrc)
            msg.referer = Settings.REFERER;

        var opt = {
            async: useAsyncXhr,
            cache: false,
            data: JSON.stringify(msg),
            type: 'POST',
            url: Settings.SERVICE_MSG_URL
        };

        var sendMsg = function (forced) {
            activeServiceMessagesCounter++;

            if (forced)
                opt.async = false;

            var jqxhr = $.ajax(opt),
                msgCallback = function () {
                    activeServiceMessagesCounter--;

                    if (callback)
                        callback(jqxhr.responseText && JSON.parse(jqxhr.responseText));
                };

            if (forced)
                jqxhr.always(msgCallback);
            else {
                jqxhr.done(msgCallback);
                jqxhr.fail(function () {
                    if (Util.isWebKit) {
                        storeMessage(msg);
                        msgCallback();
                    } else
                        sendMsg(true);
                });
            }
        };

        removeMessageFromStore(msg.cmd);
        sendMsg();
    };

    exports.batchUpdate = function (updateCallback) {
        var storedMessages = getStoredMessages();

        if (storedMessages.length) {
            window.localStorage.removeItem(Settings.JOB_UID);

            async.forEach(storedMessages, exports.queuedAsyncServiceMsg, updateCallback);
        } else
            updateCallback();
    };

    exports.queuedAsyncServiceMsg = function (msg, callback) {
        if (!msgQueue[msg.cmd])
            msgQueue[msg.cmd] = [];

        msgQueue[msg.cmd].push({
            msg: msg,
            callback: callback
        });

        //NOTE: if we don't have pending msgs except this one then send it immediately
        if (msgQueue[msg.cmd].length === 1)
            sendNextQueuedMsg(msg.cmd);
    };
});
/* global isIFrameWithoutSrc:true */
HammerheadClient.define('UrlUtil', function (require) {
    var NativeMethods = require('DOMSandbox.NativeMethods'),
        Settings = require('Settings'),
        SharedConst = require('Shared.Const'),
        SharedUrlUtil = require('Shared.UrlUtil');        

    var UrlUtil = {};

    //URL processing funcs
    UrlUtil.DOCUMENT_URL_RESOLVER = 'doc_url_resolver_8ff20d5e';
    UrlUtil.REQUEST_DESCRIPTOR_QUERY_KEY = SharedUrlUtil.REQUEST_DESCRIPTOR_QUERY_KEY;
    UrlUtil.REQUEST_DESCRIPTOR_VALUES_SEPARATOR = SharedUrlUtil.REQUEST_DESCRIPTOR_VALUES_SEPARATOR;

    UrlUtil.IFRAME = SharedUrlUtil.IFRAME;
    UrlUtil.SCRIPT = SharedUrlUtil.SCRIPT;

    document[UrlUtil.DOCUMENT_URL_RESOLVER] = document.createElement('a');

    function getResolver(doc) {
        // IE clean up document after document.open call
        if (!doc[UrlUtil.DOCUMENT_URL_RESOLVER])
            doc[UrlUtil.DOCUMENT_URL_RESOLVER] = doc.createElement('a');

        return doc[UrlUtil.DOCUMENT_URL_RESOLVER];
    }

    UrlUtil.getProxyUrl = function (url, proxyHostname, proxyPort, jobUid, jobOwnerToken, resourceType) {
        if (!UrlUtil.isSupportedProtocol(url))
            return url;

        // NOTE: resolve relative URLs
        url = UrlUtil.resolveUrl(url);

        // NOTE: if we have a relative URL without slash (e.g. 'img123') resolver will keep
        // original proxy information, so we can return such URL as is. TODO: implement is proxy URL func
        var isValidProxyUrl = !!UrlUtil.parseProxyUrl(url);

        if (isValidProxyUrl)
            return url;

        proxyHostname = proxyHostname || location.hostname;
        proxyPort = proxyPort || location.port.toString();
        jobUid = jobUid || Settings.JOB_UID;
        jobOwnerToken = jobOwnerToken || Settings.JOB_OWNER_TOKEN;

        var parsedUrl = UrlUtil.parseUrl(url);

        // NOTE: seems like we've had a relative URL with leading slash or dots,
        // so our proxy info path part was removed by resolver and we have an origin URL,
        // but with incorrect host and protocol.
        if (parsedUrl.protocol === 'http:' && parsedUrl.hostname === proxyHostname && parsedUrl.port === proxyPort) {
            var parsedOriginLocation = UrlUtil.OriginLocation.getParsed();

            parsedUrl.protocol = parsedOriginLocation.protocol;
            parsedUrl.host = parsedOriginLocation.host;
            parsedUrl.hostname = parsedOriginLocation.hostname;
            parsedUrl.port = parsedOriginLocation.port || '';

            url = UrlUtil.formatUrl(parsedUrl);
        }


        return SharedUrlUtil.getProxyUrl(url, proxyHostname, proxyPort, jobUid, jobOwnerToken, resourceType, UrlUtil.parseUrl, UrlUtil.formatUrl);
    };

    UrlUtil.getCrossDomainIframeProxyUrl = function (url) {
        return UrlUtil.getProxyUrl(url, null, Settings.CROSS_DOMAIN_PROXY_PORT, null, null, UrlUtil.IFRAME);
    };

    UrlUtil.getCrossDomainProxyUrl = function () {
        return location.protocol + '//' + location.hostname + ':' + Settings.CROSS_DOMAIN_PROXY_PORT + '/';
    };

    UrlUtil.resolveUrl = function (url, doc) {
        url = SharedUrlUtil.prepareUrl(url);
        
        if (url && url.indexOf('//') === 0)
            url = UrlUtil.OriginLocation.getParsed().protocol + url;

        var urlResolver = getResolver(doc || document);

        if (url === null)
            urlResolver.removeAttribute('href');
        else {
            urlResolver.href = url;

            //NOTE: it looks like a chrome bug: in nested iframe without src (when iframe is placed in another iframe) you
            //cannot set relative link href for some time while the iframe loading is not completed. So, we'll do it with
            //parent's urlResolver
            if (url && !urlResolver.href && isIFrameWithoutSrc && window.parent && window.parent.document)
                return UrlUtil.resolveUrl(url, window.parent.document);
        }
        
        return urlResolver.href;
    };

    UrlUtil.resolveUrlAsOrigin = function (url) {
        return SharedUrlUtil.resolveUrlAsOrigin(url, UrlUtil.formatUrl, UrlUtil.getProxyUrl, UrlUtil.parseProxyUrl);
    };

    UrlUtil.parseUrl = function (url) {
        return SharedUrlUtil.parseUrl(url);
    };

    UrlUtil.convertToProxyUrl = function (url, resourceType) {
        return UrlUtil.getProxyUrl(url, null, null, null, null, resourceType);
    };

    UrlUtil.changeOriginUrlPart = function (proxyUrl, prop, value, resourceType) {
        var parsed = UrlUtil.parseProxyUrl(proxyUrl);

        if (parsed) {
            var resolver = getResolver(document);
            var job = parsed.jobInfo;
            var proxy = parsed.proxy;

            resolver.href = parsed.originUrl;
            resolver[prop] = value;

            return UrlUtil.getProxyUrl(resolver.href, proxy.hostname, proxy.port, job.uid, job.ownerToken, resourceType);
        }

        return proxyUrl;
    };

    UrlUtil.formatUrl = function (parsedUrl) {
        // NOTE: URL is relative
        if (!parsedUrl.host && (!parsedUrl.hostname || !parsedUrl.port))
            return parsedUrl.partAfterHost;

        var url = parsedUrl.protocol || '';

        url += '//';

        if (parsedUrl.username || parsedUrl.password)
            url += parsedUrl.username + ':' + parsedUrl.password + '@';

        if (parsedUrl.host)
            url += parsedUrl.host;

        else {
            url += parsedUrl.hostname;

            if (parsedUrl.port)
                url += ':' + parsedUrl.port;
        }

        if (parsedUrl.partAfterHost)
            url += parsedUrl.partAfterHost;

        return url;
    };

    UrlUtil.isSubDomain = function (domain, subDomain) {
        return SharedUrlUtil.isSubDomain(domain, subDomain);
    };

    UrlUtil.sameOriginCheck = function (location, checkedUrl) {
        return SharedUrlUtil.sameOriginCheck(location, checkedUrl, UrlUtil.parseUrl, UrlUtil.resolveUrl);
    };

    UrlUtil.parseProxyUrl = function (proxyUrl) {
        return SharedUrlUtil.parseProxyUrl(proxyUrl, UrlUtil.parseUrl);
    };

    UrlUtil.isSupportedProtocol = function (url) {
        return SharedUrlUtil.isSupportedProtocol(url);
    };
    
    UrlUtil.isIframeWithoutSrc = function (iframe) {
        var iFrameLocation = UrlUtil.getIframeLocation(iframe),
            iFrameSrcLocation = iFrameLocation.srcLocation,
            iFrameDocumentLocation = iFrameLocation.documentLocation;

        if (iFrameDocumentLocation === null) // is a cross-domain iframe
            return false;

        var window = iframe[SharedConst.DOM_SANDBOX_PROCESSED_CONTEXT] || iframe.contentWindow.parent,
            windowLocation = window.location.toString(),
            parsedWindowLocation = UrlUtil.parseProxyUrl(windowLocation);

        if (iFrameDocumentLocation === (parsedWindowLocation ? parsedWindowLocation.originUrl : windowLocation) ||
            iFrameSrcLocation === (parsedWindowLocation ? parsedWindowLocation.originUrl : windowLocation))
            return true;

        var iFrameDocumentLocationHaveSupportedProtocol = UrlUtil.isSupportedProtocol(iFrameDocumentLocation);

        //NOTE: when an iFrame have empty src attribute (<iframe src></iframe>) the iframe.src property doesn't empty but it has different values
        //in different browsers. Its document location is 'about:blank'. Therefore we should check the src attribute.
        if (!iFrameDocumentLocationHaveSupportedProtocol && !(iframe.attributes['src'] && iframe.attributes['src'].value))
            return true;

        //NOTE: is Chrome an iFrame with src has documentLocation 'about:blank' when it is just created. So, we should check
        // srcLocation in this case.
        if (iFrameSrcLocation && UrlUtil.isSupportedProtocol(iFrameSrcLocation))
            return false;

        return !iFrameDocumentLocationHaveSupportedProtocol;
    };
    
    UrlUtil.getIframeLocation = function (iframe) {
        var documentLocation = null;

        try {
            documentLocation = iframe.contentDocument.location.href;
        } catch (e) {
        }

        var srcLocation = NativeMethods.getAttribute.call(iframe, 'src' + SharedConst.DOM_SANDBOX_STORED_ATTR_POSTFIX) ||
                NativeMethods.getAttribute.call(iframe, 'src') || iframe.src,

            parsedProxyDocumentLocation = documentLocation && UrlUtil.isSupportedProtocol(documentLocation) && UrlUtil.parseProxyUrl(documentLocation),
            parsedProxySrcLocation = srcLocation && UrlUtil.isSupportedProtocol(srcLocation) && UrlUtil.parseProxyUrl(srcLocation);

        return {
            documentLocation: parsedProxyDocumentLocation ? parsedProxyDocumentLocation.originUrl : documentLocation,
            srcLocation: parsedProxySrcLocation ? parsedProxySrcLocation.originUrl : srcLocation
        };
    };

    UrlUtil.OriginLocation = {
        get: function () {
            var url = window.location.toString();
            
            try {
                // NOTE: fallback to the owner page's URL if we are in the iFrame without src
                if (window.frameElement && UrlUtil.isIframeWithoutSrc(window.frameElement))
                    url = Settings.REFERER;
            } catch(e) {
                // NOTE: Cross-domain iframe
            }

            return UrlUtil.parseProxyUrl(url).originUrl;
        },

        withHash: function (hash) {
            var location = this.get();

            // NOTE: remove previous hash if we have one
            location = location.replace(/(#.*)$/, '');

            return location + hash;
        },

        getParsed: function () {
            var resolver = getResolver(document),
                origin = this.get(),
                parsedOrigin = UrlUtil.parseUrl(origin);
        
            // NOTE: IE "browser" adds default port for the https protocol while resolving
            resolver.href = this.get();
            
            // NOTE: IE ignores first '/' symbol in the pathname
            var pathname = resolver.pathname.indexOf('/') === 0 ? resolver.pathname : '/' + resolver.pathname; 

            //TODO describe default ports logic
            return {
                protocol: resolver.protocol,
                // NOTE: remove default port
                port: parsedOrigin.port ? resolver.port : null,
                hostname: resolver.hostname,
                // NOTE: remove default port form the host 
                host: parsedOrigin.port ? resolver.host : resolver.host.replace(/:\d+$/, ''),
                pathname: pathname,
                hash: resolver.hash,
                search: resolver.search
            };
        }
    };

    this.exports = UrlUtil;
});

HammerheadClient.define('DOMSandbox.Cookie', function (require, exports) {
    var $ = require('jQuery'),
        CookieUtil = require('CookieUtil'),
        ServiceCommands = require('Shared.ServiceCommands'),
        Settings = null,
        Transport = require('Transport'),
        UrlUtil = require('UrlUtil'),
        Util = require('Util');

    Settings = (window !== window.top && !Util.isCrossDomainWindows(window, window.top)) ?
               window.top.HammerheadClient.get('Settings') :
               require('Settings');

    exports.getCookie = function () {
        return Settings.COOKIE;
    };

    exports.setCookie = function (document, value) {
        //NOTE: let browser validate other stuff (e.g. Path attribute), so we add unique prefix
        //to the cookie key, pass cookie to the browser then clean up and return result.
        function getBrowserProcessedCookie(parsedCookie) {
            var parsedCookieCopy = {};

            for (var prop in parsedCookie) {
                if (parsedCookie.hasOwnProperty(prop))
                    parsedCookieCopy[prop] = parsedCookie[prop];
            }

            var uniquePrefix = Math.floor(Math.random() * 1e10) + '|';

            parsedCookieCopy.key = uniquePrefix + parsedCookieCopy.key;

            document.cookie = CookieUtil.format(parsedCookieCopy);

            var processedByBrowserCookieStr = CookieUtil.get(document, parsedCookieCopy.key);

            CookieUtil['delete'](document, parsedCookieCopy.key);

            if (processedByBrowserCookieStr)
                return processedByBrowserCookieStr.substr(uniquePrefix.length);

            return null;
        }

        //NOTE: perform validations which can't be processed by browser due to proxying
        function isValidCookie(parsedCookie) {
            if (!parsedCookie)
                return false;

            //NOTE: HttpOnly cookies can't be accessed from client code
            if (parsedCookie.httponly)
                return false;

            var originProtocol = UrlUtil.OriginLocation.getParsed().protocol;

            //NOTE: TestCafe tunnels HTTPS requests via HTTP so we should validate Secure attribute manually
            if (parsedCookie.secure && originProtocol !== 'https:')
                return false;

            //NOTE: add protocol portion to the domain, so we can use urlUtil for same origin check
            var domain = parsedCookie.domain && ('http://' + parsedCookie.domain);

            //NOTE: all TestCafe jobs has same domain, so we should validate Domain attribute manually
            //according to test url
            return !domain || UrlUtil.sameOriginCheck(document.location.toString(), domain);
        }

        function updateClientCookieStr(cookieKey, newCookieStr) {
            var cookies = Settings.COOKIE ? Settings.COOKIE.split(';') : [],
                replaced = false;

            //NOTE: replace cookie if it's already exists
            for (var i = 0; i < cookies.length; i++) {
                cookies[i] = $.trim(cookies[i]);

                if (cookies[i].indexOf(cookieKey + '=') === 0 || cookies[i] === cookieKey) {
                    //NOTE: delete or update cookie string
                    if (newCookieStr === null)
                        cookies.splice(i, 1);
                    else
                        cookies[i] = newCookieStr;

                    replaced = true;
                }
            }

            if (!replaced && newCookieStr !== null)
                cookies.push(newCookieStr);

            Settings.COOKIE = cookies.join('; ');
        }

        function setCookie(cookie) {
            var parsedCookie = CookieUtil.parse(cookie);

            if (isValidCookie(parsedCookie)) {
                //NOTE: this attributes shouldn't be processed by browser
                delete parsedCookie.secure;
                delete parsedCookie.domain;

                var clientCookieStr = getBrowserProcessedCookie(parsedCookie);

                if (!clientCookieStr) {
                    //NOTE: we have two options here:
                    //1)cookie was invalid, so it was ignored
                    //2)cookie was deleted by setting Expired attribute
                    //We need to check the second option and delete cookie in our cookie string manually
                    delete parsedCookie.expires;

                    //NOTE: we should delete cookie
                    if (getBrowserProcessedCookie(parsedCookie))
                        updateClientCookieStr(parsedCookie.key, null);

                } else
                    updateClientCookieStr(parsedCookie.key, clientCookieStr);
            }
        }

        //NOTE: at first try to update our client cookie cache with client-validated cookie string,
        //so sync code can immediately access cookie
        setCookie(value);

        var setCookieMsg = {
            cmd: ServiceCommands.SET_COOKIE,
            cookie: value,
            url: document.location.href
        };

        //NOTE: meanwhile sync cookies with server cookie jar
        Transport.queuedAsyncServiceMsg(setCookieMsg);

        return value;
    };
});

/* global initHammerheadClient:true, isIFrameWithoutSrc:true */

HammerheadClient.define('DOMSandbox', function (require, exports) {
    var $                   = require('jQuery'),
        DomAccessorWrappers = require('DOMSandbox.DomAccessorWrappers'),
        EventSandbox        = require('DOMSandbox.Event'),
        HiddenInfo          = require('DOMSandbox.Upload.HiddenInfo'),
        IFrameSandbox       = require('DOMSandbox.IFrame'),
        InfoManager         = require('DOMSandbox.Upload.InfoManager'),
        JSProcessor         = require('Shared.JSProcessor'),
        MessageSandbox      = require('DOMSandbox.Message'),
        NativeMethods       = require('DOMSandbox.NativeMethods'),
        PageProc            = require('Shared.PageProc'),
        SandboxedJQuery     = require('SandboxedJQuery'),
        SandboxUtil         = require('DOMSandbox.Util'),
        ShadowUI            = require('DOMSandbox.ShadowUI'),
        SharedConst         = require('Shared.Const'),
        Transport           = require('Transport'),
        UploadSandbox       = require('DOMSandbox.Upload'),
        UrlUtil             = require('UrlUtil'),
        Util                = require('Util'),
        XhrSandbox          = require('DOMSandbox.Xhr');

    // Consts
    var BEFORE_DOCUMENT_CLEANED = 'beforeDocumentCleaned',
        BODY_CONTENT_CHANGED    = 'bodyContentChanged',
        BODY_CREATED            = 'bodyCreated',
        DOCUMENT_CLEANED        = 'documentCleaned',
        DOCUMENT_CLOSED         = 'documentClosed',
        IFRAME_ADDED            = 'iframeAdded',
        UNCAUGHT_JS_ERROR       = 'uncaughtJSError';

    var IFRAME_DOM_SANDBOXES_STORE = 'dom_sandboxes_store_5d9138e9';

    exports.BEFORE_DOCUMENT_CLEARED = BEFORE_DOCUMENT_CLEANED;
    exports.BODY_CREATED            = BODY_CREATED;
    exports.DOCUMENT_CLEARED        = DOCUMENT_CLEANED;
    exports.DOCUMENT_CLOSED         = DOCUMENT_CLOSED;
    exports.IFRAME_ADDED            = IFRAME_ADDED;
    exports.UNCAUGHT_JS_ERROR       = UNCAUGHT_JS_ERROR;

    var eventEmitter = new Util.EventEmitter();

    exports.on  = eventEmitter.on.bind(eventEmitter);
    exports.off = eventEmitter.off.bind(eventEmitter);

    function onIFrameAddedToDOM (iframe) {
        if (!Util.isCrossDomainIframe(iframe, true)) {
            eventEmitter.emit(IFRAME_ADDED, {
                iframe: iframe
            });

            IFrameSandbox.iframeAddedToDom(iframe);
        }
    }

    function onBodyContentChanged () {
        ShadowUI.onBodyContentChanged();
    }

    function onBodyCreated () {
        EventSandbox.initDocumentBodyListening(document);
        eventEmitter.emit(BODY_CREATED, {
            body: document.body
        });
    }

    function onBodyElementMutation () {
        ShadowUI.onBodyElementMutation();
    }

    IFrameSandbox.on(IFrameSandbox.IFRAME_READY_TO_INIT_INTERNAL, function (e) {
        // Eval Hammerhead code script
        initHammerheadClient(e.iframe.contentWindow, true);
    });

    IFrameSandbox.on(IFrameSandbox.IFRAME_DOCUMENT_CREATED, function (e) {
        // Override only document (In fact, we only need 'write' and 'writeln' methods)
        overrideDocument(e.iframe.contentWindow, e.iframe.contentDocument);
    });

    IFrameSandbox.on(IFrameSandbox.IFRAME_DOCUMENT_RECREATED, function (e) {
        // We should informs iframe DomSandbox so that it restore communication with the recreated document
        exports.rebindDomSandboxToIframe(e.iframe);
    });

    function overrideElementDomMethods (el) {
        if (el[SharedConst.DOM_SANDBOX_PROCESSED_CONTEXT] !== window) {
            el[SharedConst.DOM_SANDBOX_PROCESSED_CONTEXT] = window;

            overrideElement(el, true);
            EventSandbox.overrideElement(el, true);
            ShadowUI.overrideElement(el, true);
        }
    }

    exports.raiseBodyCreatedEvent = onBodyCreated;

    exports.rebind = function (iframe) {
        // Assign exists DomSandbox to cleared document
        onDocumentCleaned(iframe.contentWindow, iframe.contentDocument);
    };

    exports.rebindDomSandboxToIframe = function (iframe) {
        if (iframe) {
            var topSameDomainWindow = Util.getTopSameDomainWindow(window),
                domSandboxesStore   = topSameDomainWindow[IFRAME_DOM_SANDBOXES_STORE];

            // Find iframe DomSandbox
            for (var i = 0; i < domSandboxesStore.length; i++) {
                if (domSandboxesStore[i].iframe === iframe) {
                    // Inform the DomSandbox so that it restore communication with the recreated document
                    domSandboxesStore[i].domSandbox.rebind(iframe);

                    return;
                }
            }

            // If the iframe DomSandbox is not found, this means that iframe not initialized,
            // in this case we should inject Hammerhead

            // Hack: IE10 clean up overrided methods after document.write calling
            NativeMethods.restoreNativeDocumentMeth(iframe.contentDocument);

            // DomSandbox for this iframe not found (iframe not yet initialized).
            // Inform the IFrameSandbox about it, and it inject Hammerhead
            IFrameSandbox.onIframeBeganToRun(iframe);
        }
    };

    exports.overrideDomMethods = function (el, doc) {
        if (!el) {
            doc = doc || document;

            EventSandbox.overrideElement(doc);

            if (doc.documentElement)
                exports.overrideDomMethods(doc.documentElement);
        } else {
            //OPTIMIZATION: use querySelectorAll to iterate over descendant nodes
            if (el.querySelectorAll) {
                overrideElementDomMethods(el);

                var children = el.querySelectorAll('*');

                for (var i = 0; i < children.length; i++)
                    overrideElementDomMethods(children[i]);
            }

            //NOTE: if querySelectorAll is not available fallback to recursive algorithm
            else if (el.nodeType === 1 || el.nodeType === 11) {
                overrideElementDomMethods(el);

                var cnLength = el.childNodes.length;

                if (cnLength) {
                    for (var j = 0; j < cnLength; j++)
                        exports.overrideDomMethods(el.childNodes[j]);
                }
            }
        }
    };

    // Overrided methods
    function getIframes (el) {
        if (el.tagName && el.tagName.toLowerCase() === 'iframe')
            return [el];
        else
            return el.querySelectorAll('iframe');
    }

    function onElementAdded (el) {
        if ((el.nodeType === 1 || el.nodeType === 9) && Util.isElementInDocument(el)) {
            var iframes = getIframes(el);

            if (iframes.length) {
                for (var i = 0; i < iframes.length; i++)
                    onIFrameAddedToDOM(iframes[i]);
            } else if (el.tagName && el.tagName.toLowerCase() === 'body')
                onBodyElementMutation();
        }

        var $el = $(el);

        $el.add($el.find('*')).each(function () {
            if (Util.isFileInput(this))
                HiddenInfo.addInputInfo(this, InfoManager.getFiles(this), InfoManager.getValue(this));
        });
    }

    function onElementRemoved (el) {
        if (el.nodeType === 1 && el.tagName && el.tagName.toLowerCase() === 'body')
            onBodyElementMutation();
    }

    function overridedInsertBefore (newNode, refNode) {
        exports.overrideDomMethods(newNode);

        var result = NativeMethods.insertBefore.call(this, newNode, refNode);

        onElementAdded(newNode);

        return result;
    }

    function overridedAppendChild (child) {
        //NOTE: we should process a TextNode as a script if it is appended to a script element (B254284)
        if (child.nodeType === 3 && this.tagName && this.tagName.toLowerCase() === 'script')
            child.data = PageProc.processScript(child.data);

        exports.overrideDomMethods(child);

        var result = null;

        if (this.tagName && this.tagName.toLowerCase() === 'body' && this.children.length) {
            // NOTE: We should to append element before shadow ui root
            var lastChild = this.children[this.children.length - 1];

            result = NativeMethods.insertBefore.call(this, child, lastChild);
        } else
            result = NativeMethods.appendChild.call(this, child);

        onElementAdded(child);

        return result;
    }

    function overridedRemoveChild (child) {
        var $el = $(child);

        $el.add($el.find('*')).each(function () {
            if (Util.isFileInput(this))
                HiddenInfo.removeInputInfo(this);
        });

        var result = NativeMethods.removeChild.call(this, child);

        onElementRemoved(child);

        return result;
    }

    function overridedCloneNode () {
        var clone = NativeMethods.cloneNode.apply(this, arguments);

        exports.overrideDomMethods(clone);

        return clone;
    }

    function overridedGetAttribute (attr) {
        return overridedGetAttributeCore(this, attr);
    }

    function overridedGetAttributeNS (ns, attr) {
        return overridedGetAttributeCore(this, attr, ns);
    }

    function overridedGetAttributeCore (el, attr, ns) {
        var getAttrMeth = ns ? NativeMethods.getAttributeNS : NativeMethods.getAttribute;

        // Optimization: hasAttribute meth is very slow
        if (isUrlAttr(el, attr) || attr === 'sandbox' || PageProc.EVENTS.indexOf(attr) !== -1 ||
            attr === 'autocomplete') {
            var storedAttr = PageProc.getStoredAttrName(attr);

            if (attr === 'autocomplete' && getAttrMeth.apply(el, ns ? [ns, storedAttr] : [storedAttr]) === 'none')
                return null;
            else if (el.hasAttribute(storedAttr))
                attr = storedAttr;
        }

        return getAttrMeth.apply(el, ns ? [ns, attr] : [attr]);
    }

    function overridedSetAttribute (attr, value) {
        return overridedSetAttributeCore(this, attr, value);
    }

    function overridedSetAttributeNS (ns, attr, value) {
        return overridedSetAttributeCore(this, attr, value, ns);
    }

    function overridedSetAttributeCore (el, attr, value, ns) {
        var setAttrMeth         = ns ? NativeMethods.setAttributeNS : NativeMethods.setAttribute,
            tagName             = el.tagName.toLowerCase(),
            isSupportedProtocol = UrlUtil.isSupportedProtocol(value),
            urlAttr             = isUrlAttr(el, attr),
            isEventAttr         = PageProc.EVENTS.indexOf(attr) !== -1;

        value = value + '';

        if ((urlAttr && !isSupportedProtocol) || isEventAttr) {
            var isJsProtocol = PageProc.JAVASCRIPT_PROTOCOL_REG_EX.test(value),
                storedJsAttr = PageProc.getStoredAttrName(attr);

            if ((urlAttr && isJsProtocol) || isEventAttr) {
                /* jshint ignore:start */
                var valueWithoutProtocol = value.replace(PageProc.JAVASCRIPT_PROTOCOL_REG_EX, ''),
                    matches              = valueWithoutProtocol.match(PageProc.HTML_STRING_REG_EX),
                    processedValue       = '';

                if (matches && isJsProtocol) {
                    var html = matches[2];

                    if (!SandboxUtil.isPageHtml(html))
                        html = '<html><body>' + html + '</body></html>'

                    processedValue = 'javascript:\'' + SandboxUtil.processHtml(html).replace(/'/g, "\\'") + '\'';
                }
                else
                    processedValue = (isJsProtocol ? 'javascript:' : '') +
                                     PageProc.processScript(valueWithoutProtocol, true);

                if (processedValue !== value) {
                    setAttrMeth.apply(el, ns ? [ns, storedJsAttr, value] : [storedJsAttr, value]);
                    value = processedValue;
                }
                /* jshint ignore:end */
            } else
                setAttrMeth.apply(el, ns ? [ns, storedJsAttr, value] : [storedJsAttr, value]);
        } else if (urlAttr && isSupportedProtocol) {
            var storedUrlAttr = PageProc.getStoredAttrName(attr);

            setAttrMeth.apply(el, ns ? [ns, storedUrlAttr, value] : [storedUrlAttr, value]);

            if (tagName !== 'img') {
                if (value !== '') {
                    var isIframe         = tagName === 'iframe',
                        isScript         = tagName === 'script',
                        isCrossDomainUrl = isSupportedProtocol && !UrlUtil.sameOriginCheck(location.toString(), value),
                        resourceType     = null;

                    if (isScript)
                        resourceType = UrlUtil.SCRIPT;
                    else if (isIframe || PageProc.isOpenLinkInIFrame(el))
                        resourceType = UrlUtil.IFRAME;

                    value = (isIframe && isCrossDomainUrl) ? UrlUtil.getCrossDomainIframeProxyUrl(value) :
                            UrlUtil.getProxyUrl(value, null, null, null, null, resourceType);
                }
            } else {
                if (value && !UrlUtil.parseProxyUrl(value))
                    value = UrlUtil.resolveUrlAsOrigin(value);
            }
        } else if (attr === 'autocomplete') {
            var storedAutocompleteAttr = PageProc.getStoredAttrName(attr);

            setAttrMeth.apply(el, ns ? [ns, storedAutocompleteAttr, value] : [storedAutocompleteAttr, value]);
            value                      = 'off';
        }
        else if (attr === 'target' && value === '_blank' && PageProc.TARGET_ATTR_TAGS[tagName])
            return;
        else if (attr === 'sandbox' && value.indexOf('allow-scripts') === -1) {
            var storedSandboxAttr = PageProc.getStoredAttrName(attr);

            setAttrMeth.apply(el, ns ? [ns, storedSandboxAttr, value] : [storedSandboxAttr, value]);
            value += ' allow-scripts';
        }

        return setAttrMeth.apply(el, ns ? [ns, attr, value] : [attr, value]);
    }

    function overridedRemoveAttribute () {
        overridedRemoveAttributeCore.call(this, false, arguments);
    }

    function overridedRemoveAttributeNS () {
        overridedRemoveAttributeCore.call(this, true, arguments);
    }

    function overridedRemoveAttributeCore (ns, arg) {
        var attr           = ns ? arg[1] : arg[0],
            removeAttrFunc = ns ? NativeMethods.removeAttributeNS : NativeMethods.removeAttribute;

        if (isUrlAttr(this, attr) || attr === 'sandbox' || attr === 'autocomplete' ||
            PageProc.EVENTS.indexOf(attr) !== -1) {
            var storedAttr = PageProc.getStoredAttrName(attr);

            if (attr === 'autocomplete')
                NativeMethods.setAttribute.call(this, storedAttr, 'none');
            else
                removeAttrFunc.apply(this, ns ? [arg[0], storedAttr] : [storedAttr]);
        }

        if (attr !== 'autocomplete')
            return removeAttrFunc.apply(this, arg);
    }

    function overridedInsertRow () {
        var tagName    = this.tagName.toLowerCase(),
            nativeMeth = tagName === 'table' ? NativeMethods.insertTableRow : NativeMethods.insertTBodyRow,
            row        = nativeMeth.apply(this, arguments);

        exports.overrideDomMethods(row);

        return row;
    }

    function overridedInsertCell () {
        var cell = NativeMethods.insertCell.apply(this, arguments);

        exports.overrideDomMethods(cell);

        return cell;
    }

    function overridedInsertAdjacentHTML (pos, html) {
        if (html !== null)
            html = SandboxUtil.processHtml('' + html, this.parentNode && this.parentNode.tagName);

        NativeMethods.insertAdjacentHTML.call(this, pos, html);
        exports.overrideDomMethods(this.parentNode || this);
    }

    function overridedFormSubmit () {
        var form = this;

        Transport.waitCookieMsg(function () {
            NativeMethods.formSubmit.apply(form, arguments);
        });
    }

    // Utils
    function isUninitializedIframeWithoutSrc (window) {
        try {
            return window !== window.top && UrlUtil.isIframeWithoutSrc(window.frameElement) &&
                   !IFrameSandbox.isIframeInitialized(window.frameElement);
        } catch (e) {
            return false;
        }
    }

    function isUrlAttr (el, attr) {
        var tagName = el.tagName.toLowerCase();

        return PageProc.URL_ATTR_TAGS[attr] && PageProc.URL_ATTR_TAGS[attr].indexOf(tagName) !== -1;
    }

    function overrideElement (el, overridePrototypeMeths) {
        var isDocFragment = el.nodeType === 11,
            elTagName     = el.tagName && el.tagName.toLowerCase(),
            isForm        = elTagName === 'form',
            isIframe      = elTagName === 'iframe';

        if (!isDocFragment)
            PageProc.processElement(el, UrlUtil.convertToProxyUrl);

        if (elTagName === 'img') {
            el.addEventListener('error', function (e) {
                var storedAttr = NativeMethods.getAttribute.call(el, PageProc.getStoredAttrName('src'));

                if (storedAttr && !UrlUtil.parseProxyUrl(el.src) && UrlUtil.isSupportedProtocol(el.src)) {
                    NativeMethods.setAttribute.call(el, 'src', UrlUtil.getProxyUrl(storedAttr));
                    Util.stopPropagation(e);
                }
            }, false);
        }

        if (isIframe && !Util.isCrossDomainIframe(el, true))
            IFrameSandbox.overrideIframe($(el));

        if ('insertAdjacentHTML' in el)
            el.insertAdjacentHTML = overridedInsertAdjacentHTML;

        if (!SandboxUtil.BROWSER_HAS_ELEMENT_PROTOTYPE || overridePrototypeMeths) {
            el.insertBefore = overridedInsertBefore;
            el.appendChild  = overridedAppendChild;
            el.removeChild  = overridedRemoveChild;
            el.cloneNode    = overridedCloneNode;

            if (!isDocFragment) {
                el.setAttribute      = overridedSetAttribute;
                el.setAttributeNS    = overridedSetAttributeNS;
                el.getAttribute      = overridedGetAttribute;
                el.getAttributeNS    = overridedGetAttributeNS;
                el.removeAttribute   = overridedRemoveAttribute;
                el.removeAttributeNS = overridedRemoveAttributeNS;
            }

            if ('insertRow' in el)
                el.insertRow = overridedInsertRow;

            if ('insertCell' in el)
                el.insertCell = overridedInsertCell;

            if (isForm)
                el.submit = overridedFormSubmit;
        }
    }

    function raiseUncaughtJsErrorEvent (msg, window, pageUrl) {
        if (Util.isCrossDomainWindows(window, window.top))
            return;

        var sendToTopWindow = window !== window.top;

        if (!pageUrl)
            pageUrl = UrlUtil.OriginLocation.get();

        if (sendToTopWindow) {
            eventEmitter.emit(UNCAUGHT_JS_ERROR, {
                msg:      msg,
                pageUrl:  pageUrl,
                inIFrame: true
            });

            MessageSandbox.sendServiceMsg({
                cmd:     UNCAUGHT_JS_ERROR,
                pageUrl: pageUrl,
                msg:     msg
            }, window.top);
        } else {
            eventEmitter.emit(UNCAUGHT_JS_ERROR, {
                msg:     msg,
                pageUrl: pageUrl
            });
        }
    }

    //NOTE: DOM sandbox hides evidence of the content proxying from page-native script. Proxy replaces URLs for
    //resources. Our goal is to make native script think that all resources are fetched from origin resource not
    //from proxy and also provide proxying for dynamicly created elements.
    exports.init = function (window, document) {
        onInit(window);

        ShadowUI.init(window, document);
        EventSandbox.init(window, document);
        XhrSandbox.init(window, document);
        MessageSandbox.init(window, document);
        UploadSandbox.init(window, document);
        DomAccessorWrappers.init(window, document);

        DomAccessorWrappers.on(DomAccessorWrappers.BODY_CONTENT_CHANGED, function (el) {
            var elContextWindow = el[SharedConst.DOM_SANDBOX_PROCESSED_CONTEXT];

            if (elContextWindow !== window) {
                MessageSandbox.sendServiceMsg({
                    cmd: BODY_CONTENT_CHANGED
                }, elContextWindow);
            } else
                onBodyContentChanged();
        });

        initInternal(window, document);

        SandboxedJQuery.init(window, undefined);

        MessageSandbox.on(MessageSandbox.SERVICE_MSG_RECEIVED, function (e) {
            var message = e.message;

            if (message.cmd === UNCAUGHT_JS_ERROR)
                raiseUncaughtJsErrorEvent(message.msg, window, message.pageUrl);

            if (message.cmd === BODY_CONTENT_CHANGED)
                onBodyContentChanged();
        });
    };

    function initInternal (window, document) {
        // NOTE: Iframe loses its contentWindow after reinserting in the DOM (in the FF).
        if (Util.isMozilla) {
            exports.on(IFRAME_ADDED, function (e) {
                IFrameSandbox.overrideIframe($(e.iframe));
            });
        }

        // NOTE: in some browsers (for example Firefox) 'window.document' are different objects when iframe is created
        // just now and on document ready event. Therefore we should update 'document' object to override its methods (Q527555).
        $(document).ready(function () {
            exports.overrideDomMethods(null, document);
        });

        overrideDocument(window, document);
        overrideWindow(window);
    }

    function onDocumentCleaned (window, document) {
        if (Util.isIE) {
            var needToUpdateNativeDomMeths     = false,
                needToUpdateNativeElementMeths = false,
                needToUpdateNativeWindowMeths  = false;

            try {
                needToUpdateNativeDomMeths = !document.createElement ||
                                             (NativeMethods.createElement.toString() ===
                                              document.createElement.toString());
            } catch (e) {
                needToUpdateNativeDomMeths = true;
            }

            try {
                var nativeElement = NativeMethods.createElement.call(document, 'div');

                needToUpdateNativeElementMeths = nativeElement.getAttribute.toString() ===
                                                 NativeMethods.getAttribute.toString();
            } catch (e) {
                needToUpdateNativeElementMeths = true;
            }

            try {
                NativeMethods.setTimeout.call(window, function () {
                }, 0);

                needToUpdateNativeWindowMeths = window.setTimeout.toString() === NativeMethods.setTimeout.toString();
            } catch (e) {
                needToUpdateNativeWindowMeths = true;
            }

            // T173709
            if (needToUpdateNativeDomMeths)
                NativeMethods.refreshDocument(document);

            if (needToUpdateNativeElementMeths)
                NativeMethods.refreshElementMeths(document);

            // T239109
            if (needToUpdateNativeWindowMeths)
                NativeMethods.refreshWindowMeths(window);
        }

        EventSandbox.initDocumentListening();

        if (Util.isWebKit)
            EventSandbox.restartElementListening(window);

        ShadowUI.init(window, document);
        DomAccessorWrappers.init(window, document); // T182337

        eventEmitter.emit(DOCUMENT_CLEANED, {
            document:           document,
            isIFrameWithoutSrc: isIFrameWithoutSrc
        });

        overrideDocument(window, document);
    }

    function onInit (window) {
        var topSameDomainWindow = Util.getTopSameDomainWindow(window);

        if (isIFrameWithoutSrc) {
            topSameDomainWindow[IFRAME_DOM_SANDBOXES_STORE].push({
                iframe:     window.frameElement,
                domSandbox: exports
            });
        } else if (window === topSameDomainWindow) {
            window[IFRAME_DOM_SANDBOXES_STORE] = [];
        }
    }

    function overrideDocument (window, document) {
        var storedDocumentWriteContent = '',
            writeBlockCounter          = 0;

        function beforeDocumentCleaned () {
            eventEmitter.emit(BEFORE_DOCUMENT_CLEANED, {
                document:           document,
                isIFrameWithoutSrc: isIFrameWithoutSrc
            });
        }

        function onDocumentClosed () {
            eventEmitter.emit(DOCUMENT_CLOSED, {
                document:           document,
                isIFrameWithoutSrc: isIFrameWithoutSrc
            });
        }

        function overridedDocumentWrite (args, ln) {
            args = Array.prototype.slice.call(args);

            var separator = ln ? '\n' : '',
                lastArg   = args.length ? args[args.length - 1] : '',
                isBegin   = lastArg === JSProcessor.DOCUMENT_WRITE_BEGIN_PARAM,
                isEnd     = lastArg === JSProcessor.DOCUMENT_WRITE_END_PARAM;

            if (isBegin)
                writeBlockCounter++;
            else if (isEnd)
                writeBlockCounter--;

            if (isBegin || isEnd)
                args.pop();

            var str = separator + args.join(separator);

            var needWriteOnEndMarker = isEnd && !writeBlockCounter;

            if (needWriteOnEndMarker ||
                SandboxUtil.isPageHtml(str) ||
                (SandboxUtil.isWellFormattedHtml(str) && !storedDocumentWriteContent)) {
                writeBlockCounter          = 0;
                str                        = storedDocumentWriteContent + str;
                storedDocumentWriteContent = '';
            } else if (isBegin || storedDocumentWriteContent) {
                storedDocumentWriteContent += str;

                return;
            }

            var isUninitializedIframe = isUninitializedIframeWithoutSrc(window);

            str = SandboxUtil.processHtml('' + str);

            if (!isUninitializedIframe)
                beforeDocumentCleaned();

            // FireFox, IE recreate window instance during the document.write function execution T213930
            if ((Util.isMozilla || Util.isIE) && !SandboxUtil.isPageHtml(str))
                str = SandboxUtil.INIT_SCRIPT_FOR_IFRAME_TEMPLATE + str;

            var result = NativeMethods.documentWrite.call(document, str);

            if (!isUninitializedIframe) {
                onDocumentCleaned(window, document);
                exports.overrideDomMethods(null, document); // B234357
            }

            return result;
        }

        document.open = function () {
            var isUninitializedIframe = isUninitializedIframeWithoutSrc(window);

            if (!isUninitializedIframe)
                beforeDocumentCleaned();

            var result = NativeMethods.documentOpen.call(document);

            if (!isUninitializedIframe)
                onDocumentCleaned(window, document);
            else
            // If iframe initialization in progress, we should once again override document.write and document.open meths
            // because they were cleaned after native document.open meth calling
                overrideDocument(window, document);

            return result;
        };

        document.close = function () {
            // IE10 and IE9 rise "load" event only when document.close meth called.
            // We should restore overrided document.open and document.write meths before Hammerhead injection
            // if window not initialized
            if (Util.isIE && !IFrameSandbox.isWindowInited(window))
                NativeMethods.restoreNativeDocumentMeth(document);

            var result = NativeMethods.documentClose.call(document);

            if (!isUninitializedIframeWithoutSrc(window))
                onDocumentClosed();

            return result;
        };

        document.createElement = function (tagName) {
            var el = NativeMethods.createElement.call(document, tagName);

            exports.overrideDomMethods(el);

            return el;
        };

        document.createElementNS = function (ns, tagName) {
            var el = NativeMethods.createElementNS.call(document, ns, tagName);

            exports.overrideDomMethods(el);

            return el;
        };

        document.write = function () {
            return overridedDocumentWrite(arguments);
        };

        document.writeln = function () {
            return overridedDocumentWrite(arguments, true);
        };

        document.createDocumentFragment = function () {
            var fragment = NativeMethods.createDocumentFragment.apply(document, arguments);

            exports.overrideDomMethods(fragment);

            return fragment;
        };
    }

    function overrideWindow (window) {
        // Additional methods for the DOM
        window[SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME] = exports.overrideDomMethods;

        window.CanvasRenderingContext2D.prototype.drawImage = function () {
            var args = Array.prototype.slice.call(arguments, 0),
                img  = args.shift(),
                src  = img.src;

            if (UrlUtil.sameOriginCheck(location.toString(), src)) {
                img     = NativeMethods.createElement.call(window.document, 'img');
                img.src = UrlUtil.getProxyUrl(src);
            }

            args.unshift(img);

            return NativeMethods.canvasContextDrawImage.apply(this, args);
        };

        // Override uncaught error handling
        window.onerror = function (msg, url, line, col, errObj) {
            // FireFox raises NS_ERROR_NOT_INITIALIZED exception after widnow has been removed from the dom
            if (msg.indexOf('NS_ERROR_NOT_INITIALIZED') !== -1)
                return true;

            var originalOnErrorHandler = window[DomAccessorWrappers.ORIGINAL_WINDOW_ON_ERROR_HANDLER_KEY],
                caught                 = originalOnErrorHandler &&
                                         originalOnErrorHandler.call(window, msg, url, line, col, errObj) === true;

            if (caught)
                return true;

            raiseUncaughtJsErrorEvent(msg, window);

            return false;
        };

        window.open = function () {
            var newArgs = [];

            newArgs.push(UrlUtil.getProxyUrl(arguments[0]));
            newArgs.push('_self');

            if (arguments.length > 2)
                newArgs.push(arguments[2]);
            if (arguments.length > 3)
                newArgs.push(arguments[3]);

            return NativeMethods.windowOpen.apply(window, newArgs);
        };

        window.Worker = function (scriptURL) {
            scriptURL = UrlUtil.getProxyUrl(scriptURL);

            return new NativeMethods.workerCtor(scriptURL);
        };

        window.EventSource = function (url) {
            url = UrlUtil.getProxyUrl(url);

            return new NativeMethods.eventSourceCtor(url);
        };

        if (window.MutationObserver) {
            window.MutationObserver = function (callback) {
                var wrapper = function (mutations) {
                    var result = [];

                    for (var i = 0; i < mutations.length; i++) {
                        if (!ShadowUI.isShadowUIMutation(mutations[i]))
                            result.push(mutations[i]);
                    }

                    if (result.length)
                        callback(result);
                };

                return new NativeMethods.mutationObserverCtor(wrapper);
            };
        }

        if (window.navigator && window.navigator.serviceWorker) {
            window.navigator.serviceWorker.register = function (url) {
                url = UrlUtil.getProxyUrl(url);

                return NativeMethods.registerServiceWorker.call(window.navigator.serviceWorker, url);
            };
        }

        window.Image = function () {
            var image = null;

            if (!arguments.length)
                image = new NativeMethods.imageCtor();
            else if (arguments.length === 1)
                image = new NativeMethods.imageCtor(arguments[0]);
            else
                image = new NativeMethods.imageCtor(arguments[0], arguments[1]);

            exports.overrideDomMethods(image);

            return image;
        };

        // Override native DOM methods
        if (SandboxUtil.BROWSER_HAS_ELEMENT_PROTOTYPE) {
            window.Element.prototype.insertBefore              = overridedInsertBefore;
            window.Element.prototype.appendChild               = overridedAppendChild;
            window.Element.prototype.removeChild               = overridedRemoveChild;
            window.Element.prototype.setAttribute              = overridedSetAttribute;
            window.Element.prototype.setAttributeNS            = overridedSetAttributeNS;
            window.Element.prototype.getAttribute              = overridedGetAttribute;
            window.Element.prototype.getAttributeNS            = overridedGetAttributeNS;
            window.Element.prototype.removeAttribute           = overridedRemoveAttribute;
            window.Element.prototype.removeAttributeNS         = overridedRemoveAttributeNS;
            window.Element.prototype.cloneNode                 = overridedCloneNode;
            window.Node.prototype.cloneNode                    = overridedCloneNode;
            window.Node.prototype.appendChild                  = overridedAppendChild;
            window.Node.prototype.removeChild                  = overridedRemoveChild;
            window.Node.prototype.insertBefore                 = overridedInsertBefore;
            window.HTMLTableElement.prototype.insertRow        = overridedInsertRow;
            window.HTMLTableSectionElement.prototype.insertRow = overridedInsertRow;
            window.HTMLTableRowElement.prototype.insertCell    = overridedInsertCell;
            window.HTMLFormElement.prototype.submit            = overridedFormSubmit;
        }

        if (typeof window.history.pushState === 'function' && typeof window.history.replaceState === 'function') {
            window.history.pushState = function (data, title, url) {
                var args = [data, title];

                if (arguments.length > 2)
                    args.push(url ? UrlUtil.getProxyUrl(url) : url);

                return NativeMethods.historyPushState.apply(history, args);
            };

            window.history.replaceState = function (data, title, url) {
                var args = [data, title];

                if (arguments.length > 2)
                    args.push(url ? UrlUtil.getProxyUrl(url) : url);

                return NativeMethods.historyReplaceState.apply(history, args);
            };
        }

        if (window.navigator.registerProtocolHandler) {
            window.navigator.registerProtocolHandler = function () {
                var args           = Array.prototype.slice.call(arguments),
                    urlIndex       = 1,
                    originHostname = UrlUtil.OriginLocation.getParsed().hostname,
                    isOriginUrl    = $.browser.mozilla ?
                                     UrlUtil.isSubDomain(originHostname, UrlUtil.parseUrl(args[urlIndex]).hostname) :
                                     UrlUtil.sameOriginCheck(UrlUtil.OriginLocation.get(), args[urlIndex]);

                if (isOriginUrl)
                    args[urlIndex] = UrlUtil.getProxyUrl(args[urlIndex]);

                return NativeMethods.registerProtocolHandler.apply(navigator, args);
            };
        }
    }
});

HammerheadClient.define('DOMSandbox.DomAccessorWrappers', function (require, exports) {
    var $ = require('jQuery'),
        CookieSandbox = require('DOMSandbox.Cookie'),
        EventSandbox = require('DOMSandbox.Event'),
        JSProcessor = require('Shared.JSProcessor'),
        MessageSandbox = require('DOMSandbox.Message'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        PageProc = require('Shared.PageProc'),
        PageState = require('PageState'),
        SandboxUtil = require('DOMSandbox.Util'),
        ShadowUI = require('DOMSandbox.ShadowUI'),
        SharedConst = require('Shared.Const'),
        UploadSandbox = require('DOMSandbox.Upload'),
        UrlUtil = require('UrlUtil'),
        Util = require('Util');

    var LOCATION_WRAPPER = 'location_1b082a6cec',
        IS_LOCATION_WRAPPER = 'is_location_1b082a6cec';

    exports.BODY_CONTENT_CHANGED = 'bodyContentChanged';
    exports.LOCATION_WRAPPER = LOCATION_WRAPPER;
    exports.ORIGINAL_WINDOW_ON_ERROR_HANDLER_KEY = 'onerror_23ad9304921s';
    exports.WINDOW_ON_ERROR_SET = 'windowOnErrorSet';

    var anchor = document.createElement('A'),
        emptyAnchor = document.createElement('A');

    var eventEmitter = new Util.EventEmitter();

    exports.on = eventEmitter.on.bind(eventEmitter);

    function onBodyContentChanged(el) {
        eventEmitter.emit(exports.BODY_CONTENT_CHANGED, el);
    }

    function getAnchorProperty(el, prop) {
        if (el.href) {
            var parsedProxyUrl = UrlUtil.parseProxyUrl(el.href);

            anchor.href = parsedProxyUrl ? UrlUtil.formatUrl(parsedProxyUrl.originResourceInfo) : el.href;

            return anchor[prop];
        } else
            return emptyAnchor[prop];
    }

    function setAnchorProperty(el, prop, value) {
        if (el.href) {
            anchor.href = UrlUtil.formatUrl(UrlUtil.parseProxyUrl(el.href).originResourceInfo);
            anchor[prop] = value;
            el.setAttribute('href', anchor.href);

            return anchor[prop];
        } else
            return '';
    }

    function removeOurWriteMethArgs(args) {
        if (args.length) {
            var lastArg = args[args.length - 1];

            if (lastArg === JSProcessor.DOCUMENT_WRITE_BEGIN_PARAM ||
                lastArg === JSProcessor.DOCUMENT_WRITE_END_PARAM) {
                var result = Array.prototype.slice.call(args);

                result.pop();

                return result;
            }
        }

        return args;
    }

    function createLocWrapper(window) {
        var locationProps = ['port', 'host', 'hostname', 'pathname', 'protocol'],
            result = {},
            resourceType = window !== window.top ? UrlUtil.IFRAME : null;

        var getHref = function () {
            return window.location.href === 'about:blank' ?
                   'about:blank' :
                   UrlUtil.OriginLocation.get();
        };

        Object.defineProperty(result, 'href', SandboxUtil.createPropertyDesc({
            get: function () {
                return getHref();
            },
            set: function (href) {
                window.location.href = UrlUtil.getProxyUrl(href, null, null, null, null, resourceType);

                return href;
            }
        }));

        Object.defineProperty(result, 'search', SandboxUtil.createPropertyDesc({
            get: function () {
                return window.location.search;
            },
            set: function (search) {
                window.location = UrlUtil.changeOriginUrlPart(window.location.toString(), 'search', search, resourceType);

                return search;
            }
        }));

        Object.defineProperty(result, 'origin', SandboxUtil.createPropertyDesc({
            get: function () {
                var parsedOriginLocation = UrlUtil.OriginLocation.getParsed();

                return parsedOriginLocation.protocol + '//' + parsedOriginLocation.host;
            },
            set: function (origin) {
                return origin;
            }
        }));

        Object.defineProperty(result, 'hash', SandboxUtil.createPropertyDesc({
            get: function () {
                return window.location.hash;
            },
            set: function (hash) {
                window.location.hash = hash;

                return hash;
            }
        }));

        var overrideLocationProp = function (prop) {
            Object.defineProperty(result, prop, SandboxUtil.createPropertyDesc({
                get: function () {
                    return UrlUtil.OriginLocation.getParsed()[prop];
                },
                set: function (value) {
                    window.location = UrlUtil.changeOriginUrlPart(window.location.toString(), prop, value, resourceType);

                    return value;
                }
            }));
        };

        $.each(locationProps, function (index, value) {
            overrideLocationProp(value);
        });

        result.assign = function (url) {
            return window.location.assign(UrlUtil.getProxyUrl(url, null, null, null, null, resourceType));
        };

        result.reload = function (forceget) {
            return window.location.reload(forceget);
        };

        result.replace = function (url) {
            return window.location.replace(UrlUtil.getProxyUrl(url, null, null, null, null, resourceType));
        };

        result.toString = function () {
            return getHref();
        };

        result[IS_LOCATION_WRAPPER] = true;

        return result;
    }

    exports.init = function (window, document) {
        var locationWrapper = createLocWrapper(window),
            storedDomain = '';

        window[LOCATION_WRAPPER] = locationWrapper;
        document[LOCATION_WRAPPER] = locationWrapper;

        function getUrlAttr(el, attr) {
            var attrValue = el.getAttribute(attr);

            if (attrValue === null)
                return '';

            else if (attrValue === '')
                return UrlUtil.OriginLocation.get();

            else if (/^#/.test(attrValue))
                return UrlUtil.OriginLocation.withHash(attrValue);

            else
                return UrlUtil.resolveUrlAsOrigin(attrValue);
        }

        var elementMethWrappers = {
            postMessage: {
                condition: function (window) {
                    return Util.isWindowInstance(window);
                },
                method: function (contentWindow, args) {
                    return MessageSandbox.postMessage(contentWindow, args);
                }
            },
            write: {
                condition: function (document) {
                    return !Util.isDocumentInstance(document);
                },
                method: function (document, args) {
                    return document.write.apply(document, removeOurWriteMethArgs(args));
                }
            },
            writeln: {
                condition: function (document) {
                    return !Util.isDocumentInstance(document);
                },
                method: function (document, args) {
                    return document.writeln.apply(document, removeOurWriteMethArgs(args));
                }
            }
        };

        var elementPropertyAccessors = {
            action: {
                condition: function (el) {
                    if (Util.isDomElement(el)) {
                        var tagName = el.tagName.toLowerCase();

                        return PageProc.URL_ATTR_TAGS['action'].indexOf(tagName) !== -1;
                    }

                    return false;
                },
                get: function (el) {
                    return getUrlAttr(el, 'action');
                },
                set: function (el, value) {
                    return el.setAttribute('action', value);
                }
            },
            activeElement: {
                condition: function (el) {
                    return Util.isDocumentInstance(el);
                },
                get: function (el) {
                    if (Util.isShadowUIElement(el.activeElement))
                        return PageState.getLastActiveElement() || el.body;

                    return el.activeElement;
                },
                set: function () {

                }
            },
            attributes: {
                condition: function (el) {
                    var attributesType = window.NamedNodeMap || window.MozNamedAttrMap;

                    return attributesType && el.attributes instanceof attributesType;
                },
                get: function (el) {
                    return SandboxUtil.getAttributesProperty(el);
                },
                set: function (el, value) {
                    return value;
                }
            },
            autocomplete: {
                condition: function (el) {
                    return Util.isInputElement(el);
                },
                get: function (input) {
                    return input.getAttribute('autocomplete') || '';
                },
                set: function (input, value) {
                    return input.setAttribute('autocomplete', value);
                }
            },
            cookie: {
                condition: function (doc) {
                    return Util.isDocumentInstance(doc);
                },
                get: function () {
                    return CookieSandbox.getCookie();
                },
                set: function (doc, cookie) {
                    return CookieSandbox.setCookie(doc, cookie);
                }
            },
            data: {
                condition: function (el) {
                    if (Util.isDomElement(el)) {
                        var tagName = el.tagName.toLowerCase();

                        return PageProc.URL_ATTR_TAGS['data'].indexOf(tagName) !== -1;
                    }

                    return false;
                },
                get: function (el) {
                    return getUrlAttr(el, 'data');
                },
                set: function (el, value) {
                    return el.setAttribute('data', value);
                }
            },
            domain: {
                condition: function (doc) {
                    return Util.isDocumentInstance(doc);
                },
                get: function () {
                    return storedDomain ? storedDomain : locationWrapper.hostname;
                },
                set: function (doc, domain) {
                    storedDomain = domain;

                    return domain;
                }
            },
            files: {
                condition: function (el) {
                    return Util.isFileInput(el);
                },
                get: function (el) {
                    return UploadSandbox.getFiles(el);
                },
                set: function (el, value) {
                    return value;
                }
            },
            firstChild: {
                condition: function (el) {
                    return ShadowUI.isShadowContainer(el);
                },
                get: function (el) {
                    return ShadowUI.getFirstChild(el);
                },
                set: function () {
                }
            },
            firstElementChild: {
                condition: function (el) {
                    return ShadowUI.isShadowContainer(el);
                },
                get: function (el) {
                    return ShadowUI.getFirstElementChild(el);
                },
                set: function () {
                }
            },
            host: {
                condition: function (el) {
                    return Util.isAnchor(el);
                },
                get: function (el) {
                    return getAnchorProperty(el, 'host');
                },
                set: function (el, port) {
                    return setAnchorProperty(el, 'host', port);
                }
            },
            hostname: {
                condition: function (el) {
                    return Util.isAnchor(el);
                },
                get: function (el) {
                    return getAnchorProperty(el, 'hostname');
                },
                set: function (el, port) {
                    return setAnchorProperty(el, 'hostname', port);
                }
            },
            href: {
                condition: function (el) {
                    if (Util.isDomElement(el)) {
                        var tagName = el.tagName.toLowerCase();

                        return PageProc.URL_ATTR_TAGS['href'].indexOf(tagName) !== -1;
                    } else if (el[IS_LOCATION_WRAPPER])
                        return true;

                    return false;
                },
                get: function (el) {
                    return el[IS_LOCATION_WRAPPER] ? el.href : getUrlAttr(el, 'href');
                },
                set: function (el, value) {
                    return el[IS_LOCATION_WRAPPER] ? el.href = UrlUtil.resolveUrl(value, document) : el.setAttribute('href', value);
                }
            },
            innerHTML: {
                condition: function (el) {
                    return el.nodeType === 1 && 'innerHTML' in el;
                },
                get: function (el) {
                    return SandboxUtil.cleanUpHtml(el.innerHTML, el.tagName);
                },
                set: function (el, value) {
                    if (el.tagName && el.tagName.toLowerCase() === 'style')
                        value = PageProc.processStylesheet('' + value, UrlUtil.getProxyUrl, true);
                    else if (value !== null)
                        value = SandboxUtil.processHtml('' + value, el.tagName);

                    el.innerHTML = value;

                    var parentDocument = Util.findDocument(el),
                        parentWindow = parentDocument ? parentDocument.defaultView : null;

                    //NOTE: for iframe with empty src
                    if (parentWindow && parentWindow !== window &&
                        parentWindow[SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME])
                        parentWindow[SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME](el, parentDocument);
                    else {
                        if (window[SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME])
                            window[SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME](el);
                    }

                    //NOTE: fix for B239138 - unroll.me 'Cannot read property 'document' of null' error raised during recording
                    //There were an issue then document.body was replaced, so we need to reattach UI to new body manually
                    //See also: ui/ui.js
                    var containerTagName = el.tagName && el.tagName.toLowerCase();

                    //NOTE: this check is required because jQuery calls the set innerHTML method for an element in an unavailable window
                    if (window.self) {
                        //NOTE: use timeout, so changes take effect
                        if (containerTagName === 'html' || containerTagName === 'body') {
                            NativeMethods.setTimeout.call(window, function () {                            
                                onBodyContentChanged(el);
                            }, 0);
                        }
                    }

                    return value;
                }
            },
            onerror: {
                condition: function (owner) {
                    return Util.isWindowInstance(owner);
                },
                get: function (owner) {
                    return owner[exports.ORIGINAL_WINDOW_ON_ERROR_HANDLER_KEY] || null;
                },
                set: function (owner, handler) {
                    if (typeof handler === 'function')
                        owner[exports.ORIGINAL_WINDOW_ON_ERROR_HANDLER_KEY] = handler;

                    return handler;
                }
            },
            lastChild: {
                condition: function (el) {
                    return ShadowUI.isShadowContainer(el);
                },
                get: function (el) {
                    return ShadowUI.getLastChild(el);
                },
                set: function () {
                }
            },
            lastElementChild: {
                condition: function (el) {
                    return ShadowUI.isShadowContainer(el);
                },
                get: function (el) {
                    return ShadowUI.getLastElementChild(el);
                },
                set: function () {
                }
            },
            length: {
                condition: function (collection) {
                    return ShadowUI.isShadowContainerCollection(collection);
                },
                get: function (collection) {
                    var elementCount = 0;

                    for (var i = 0; i < collection.length; i++) {
                        if (collection[i].className &&
                            collection[i].className.indexOf(SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX) !== -1)
                            elementCount++;
                    }

                    if (elementCount !== 0)
                        ShadowUI.checkElementsPosition(collection);

                    return collection.length - elementCount;
                },
                set: function () {
                }
            },
            location: {
                condition: function (owner) {
                    return Util.isDocumentInstance(owner) || Util.isWindowInstance(owner);
                },
                get: function (owner) {
                    if (owner[LOCATION_WRAPPER])
                        return owner[LOCATION_WRAPPER];

                    var window = Util.isWindowInstance(owner) ? owner : owner.defaultView;

                    return createLocWrapper(window);
                },
                set: function (owner, location) {
                    if (typeof location === 'string') {
                        if (window.self !== window.top)
                            location = UrlUtil.resolveUrl(location, window.top.document);

                        owner.location = UrlUtil.getProxyUrl(location);

                        return location;
                    }

                    return owner.location;
                }
            },
            manifest: {
                condition: function (el) {
                    if (Util.isDomElement(el)) {
                        var tagName = el.tagName.toLowerCase();

                        return PageProc.URL_ATTR_TAGS['manifest'].indexOf(tagName) !== -1;
                    }

                    return false;
                },
                get: function (el) {
                    return getUrlAttr(el, 'manifest');
                },
                set: function (el, value) {
                    return el.setAttribute('manifest', value);
                }
            },
            origin: {
                condition: function (el) {
                    return Util.isAnchor(el);
                },
                get: function (el) {
                    return typeof el.origin !== 'undefined' ? getAnchorProperty(el, 'origin') : el.origin;
                },
                set: function (el, origin) {
                    el.origin = origin;

                    return el.origin;
                }
            },
            pathname: {
                condition: function (el) {
                    return Util.isAnchor(el);
                },
                get: function (el) {
                    return getAnchorProperty(el, 'pathname');
                },
                set: function (el, pathname) {
                    return setAnchorProperty(el, 'pathname', pathname);
                }
            },
            port: {
                condition: function (el) {
                    return Util.isAnchor(el);
                },
                get: function (el) {
                    return getAnchorProperty(el, 'port');
                },
                set: function (el, port) {
                    return setAnchorProperty(el, 'port', port);
                }
            },
            protocol: {
                condition: function (el) {
                    return Util.isAnchor(el);
                },
                get: function (el) {
                    return getAnchorProperty(el, 'protocol');
                },
                set: function (el, port) {
                    return setAnchorProperty(el, 'protocol', port);
                }
            },
            referrer: {
                condition: function (doc) {
                    return Util.isDocumentInstance(doc);
                },
                get: function (doc) {
                    var proxyUrl = UrlUtil.parseProxyUrl(doc.referrer),
                        result = proxyUrl ? UrlUtil.formatUrl(proxyUrl.originResourceInfo) : '';

                    return result;
                },
                set: function (doc, value) {
                    doc.referrer = UrlUtil.getProxyUrl(value);

                    return value;
                }
            },
            sandbox: {
                condition: function (el) {
                    return Util.isIframe(el);
                },
                get: function (el) {
                    return el.getAttribute('sandbox');
                },
                set: function (el, value) {
                    return el.setAttribute('sandbox', value);
                }
            },
            search: {
                condition: function (el) {
                    return Util.isAnchor(el);
                },
                get: function (el) {
                    return getAnchorProperty(el, 'search');
                },
                set: function (el, search) {
                    return setAnchorProperty(el, 'search', search);
                }
            },
            src: {
                condition: function (el) {
                    if (Util.isDomElement(el)) {
                        var tagName = el.tagName.toLowerCase();

                        return PageProc.URL_ATTR_TAGS['src'].indexOf(tagName) !== -1;
                    }

                    return false;
                },
                get: function (el) {
                    return getUrlAttr(el, 'src');
                },
                set: function (el, value) {
                    return el.setAttribute('src', value);
                }
            },
            target: {
                condition: function (el) {
                    return Util.isDomElement(el) && PageProc.TARGET_ATTR_TAGS[el.tagName.toLowerCase()];
                },
                get: function (el) {
                    return el.target;
                },
                set: function (el, value) {
                    if (value !== '_blank')
                        el.target = value;

                    return el.target;
                }
            },
            text: {
                condition: function (el) {
                    //NOTE: check for tagName being a string. Because is some cases in Angular app it
                    //may be function.
                    //See: T175340: TD_14_2 - Uncaught JS error on angular getting started site
                    return typeof el.tagName === 'string' && el.tagName.toLowerCase() === 'script';
                },
                get: function (el) {
                    return el.text;
                },
                set: function (el, script) {
                    el.text = script ? PageProc.processScript(script) : script;

                    return script;
                }
            },
            textContent: {
                condition: function (el) {
                    //NOTE: check for tagName being a string. Because is some cases in Angular app it
                    //may be function.
                    //See: T175340: TD_14_2 - Uncaught JS error on angular getting started site
                    return typeof el.tagName === 'string' && el.tagName.toLowerCase() === 'script';
                },
                get: function (el) {
                    return el.textContent;
                },
                set: function (el, script) {
                    el.textContent = script ? PageProc.processScript(script) : script;

                    return script;
                }
            },
            URL: {
                condition: function (doc) {
                    return Util.isDocumentInstance(doc);
                },
                get: function () {
                    return locationWrapper.href;
                },
                set: function () {
                }
            },
            value: {
                condition: function (el) {
                    return Util.isDomElement(el) && (Util.isFileInput(el) ||
                                                     Util.isTextEditableElementAndEditingAllowed(el) &&
                                                     !Util.isShadowUIElement(el));
                },
                get: function (el) {
                    if (Util.isFileInput(el))
                        return UploadSandbox.getUploadElementValue(el);
                    else
                        return el.value;
                },
                set: function (el, value) {
                    if (Util.isFileInput(el))
                        return UploadSandbox.setUploadElementValue(el, value);

                    else {
                        el.value = value;

                        EventSandbox.restartWatchingElementEditing(el);

                        return value;
                    }
                }
            },

            // Event
            onbeforeunload: {
                condition: function (window) {
                    return Util.isWindowInstance(window);
                },
                get: function () {
                    return EventSandbox.getOnBeforeUnload();
                },
                set: function (window, handler) {
                    return EventSandbox.setOnBeforeUnload(window, handler);
                }
            },
            onmessage: {
                condition: function (window) {
                    return Util.isWindowInstance(window);
                },
                get: function () {
                    return MessageSandbox.getOnMessage();
                },
                set: function (window, handler) {
                    return MessageSandbox.setOnMessage(window, handler);
                }
            },
            which: {
                condition: function (ev) {
                    return typeof ev[SharedConst.EVENT_SANDBOX_WHICH_PROPERTY_WRAPPER] !== 'undefined' ||
                           (ev.originalEvent &&
                            typeof ev.originalEvent[SharedConst.EVENT_SANDBOX_WHICH_PROPERTY_WRAPPER] !== 'undefined');
                },
                get: function (ev) {
                    return ev.originalEvent ? ev.originalEvent[SharedConst.EVENT_SANDBOX_WHICH_PROPERTY_WRAPPER] :
                           ev[SharedConst.EVENT_SANDBOX_WHICH_PROPERTY_WRAPPER];
                },
                set: function () {
                }
            },

            // Style
            background: {
                condition: function (style) {
                    return Util.isStyleInstance(style);
                },
                get: function (style) {
                    return PageProc.cleanUpStylesheet(style.background, UrlUtil.parseProxyUrl, UrlUtil.formatUrl);
                },
                set: function (style, value) {
                    if (typeof value === 'string')
                        style.background = PageProc.processStylesheet(value, UrlUtil.getProxyUrl);

                    return style.background;
                }
            },
            backgroundImage: {
                condition: function (style) {
                    return Util.isStyleInstance(style);
                },
                get: function (style) {
                    return PageProc.cleanUpStylesheet(style.backgroundImage, UrlUtil.parseProxyUrl, UrlUtil.formatUrl);
                },
                set: function (style, value) {
                    if (typeof value === 'string')
                        style.backgroundImage = PageProc.processStylesheet(value, UrlUtil.getProxyUrl);

                    return style.backgroundImage;
                }
            },
            borderImage: {
                condition: function (style) {
                    return Util.isStyleInstance(style);
                },
                get: function (style) {
                    return PageProc.cleanUpStylesheet(style.borderImage, UrlUtil.parseProxyUrl, UrlUtil.formatUrl);
                },
                set: function (style, value) {
                    if (typeof value === 'string')
                        style.borderImage = PageProc.processStylesheet(value, UrlUtil.getProxyUrl);

                    return style.borderImage;
                }
            },
            cssText: {
                condition: function (style) {
                    return Util.isStyleInstance(style);
                },
                get: function (style) {
                    return PageProc.cleanUpStylesheet(style.cssText, UrlUtil.parseProxyUrl, UrlUtil.formatUrl);
                },
                set: function (style, value) {
                    if (typeof value === 'string')
                        style.cssText = PageProc.processStylesheet(value, UrlUtil.getProxyUrl);

                    return style.cssText;
                }
            },
            cursor: {
                condition: function (style) {
                    return Util.isStyleInstance(style);
                },
                get: function (style) {
                    return PageProc.cleanUpStylesheet(style.cursor, UrlUtil.parseProxyUrl, UrlUtil.formatUrl);
                },
                set: function (style, value) {
                    if (typeof value === 'string')
                        style.cursor = PageProc.processStylesheet(value, UrlUtil.getProxyUrl);

                    return style.cursor;
                }
            },
            listStyle: {
                condition: function (style) {
                    return Util.isStyleInstance(style);
                },
                get: function (style) {
                    return PageProc.cleanUpStylesheet(style.listStyle, UrlUtil.parseProxyUrl, UrlUtil.formatUrl);
                },
                set: function (style, value) {
                    if (typeof value === 'string')
                        style.listStyle = PageProc.processStylesheet(value, UrlUtil.getProxyUrl);

                    return style.listStyle;
                }
            },
            listStyleImage: {
                condition: function (style) {
                    return Util.isStyleInstance(style);
                },
                get: function (style) {
                    return PageProc.cleanUpStylesheet(style.listStyleImage, UrlUtil.parseProxyUrl, UrlUtil.formatUrl);
                },
                set: function (style, value) {
                    if (typeof value === 'string')
                        style.listStyleImage = PageProc.processStylesheet(value, UrlUtil.getProxyUrl);

                    return style.listStyleImage;
                }
            }
        };

        exports.elementPropertyAccessors = elementPropertyAccessors;

        //NOTE: isolate throw statement into separate function because JS engines doesn't optimize such functions.
        function error(msg) {
            throw new Error(msg);
        }

        function isNullOrUndefined(obj) {
            return !obj && (obj === null || typeof obj === 'undefined');
        }

        function inaccessibleTypeToStr(obj) {
            return obj === null ? 'null' : 'undefined';
        }

        //Proxy methods
        function callMethod(owner, methName, args) {
            if (isNullOrUndefined(owner))
                error('Cannot call method \'' + methName + '\' of ' + inaccessibleTypeToStr(owner));

            if (typeof owner[methName] !== 'function')
                error('\'' + methName + '\' is not a function');

            if (typeof methName !== 'string' || !elementMethWrappers.hasOwnProperty(methName))
                return owner[methName].apply(owner, args);

            return elementMethWrappers[methName].condition(owner) ?
                   elementMethWrappers[methName].method(owner, args) : owner[methName].apply(owner, args);
        }

        function getLocation(location) {
            return Util.isLocationInstance(location) ? locationWrapper : location;
        }

        function getProperty(owner, propName) {
            if (isNullOrUndefined(owner))
                error('Cannot read property \'' + propName + '\' of ' + inaccessibleTypeToStr(owner));

            if (typeof propName !== 'string' || !elementPropertyAccessors.hasOwnProperty(propName))
                return owner[propName];

            return elementPropertyAccessors[propName].condition(owner) ?
                   elementPropertyAccessors[propName].get(owner) : owner[propName];
        }

        function processScript(script) {
            return typeof script !== 'string' ? script : JSProcessor.process(script);
        }

        function setLocation(location, value) {
            if (Util.isLocationInstance(location)) {
                location = value;

                return location;
            }

            return null;
        }

        function setProperty(owner, propName, value) {
            if (isNullOrUndefined(owner))
                error('Cannot set property \'' + propName + '\' of ' + inaccessibleTypeToStr(owner));

            var returnValue = null;

            if (typeof propName !== 'string' || !elementPropertyAccessors.hasOwnProperty(propName)) {
                returnValue = owner[propName] = value;

                return returnValue;
            }

            if (elementPropertyAccessors[propName].condition(owner))
                return elementPropertyAccessors[propName].set(owner, value);

            returnValue = owner[propName] = value;

            return returnValue;
        }

        window[JSProcessor.CALL_METHOD_METH_NAME] = callMethod;
        window[JSProcessor.GET_LOCATION_METH_NAME] = getLocation;
        window[JSProcessor.GET_PROPERTY_METH_NAME] = getProperty;
        window[JSProcessor.PROCESS_SCRIPT_METH_NAME] = processScript;
        window[JSProcessor.SET_LOCATION_METH_NAME] = setLocation;
        window[JSProcessor.SET_PROPERTY_METH_NAME] = setProperty;
    };
});

HammerheadClient.define('DOMSandbox.Event', function (require, exports) {
    var $ = require('jQuery'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        SandboxUtil = require('DOMSandbox.Util'),
        SharedConst = require('Shared.Const'),
        ShadowUI = require('DOMSandbox.ShadowUI'),
        Util = require('Util');

    var INTERNAL_FOCUS_FLAG = SharedConst.PROPERTY_PREFIX + 'iff',
        INTERNAL_BLUR_FLAG = SharedConst.PROPERTY_PREFIX + 'ibf',
        DISPATCHED_EVENT_FLAG = SharedConst.PROPERTY_PREFIX + 'def',
        EVENT_SANDBOX_DISPATCH_EVENT_FLAG = 'tc-sdef-310efb6b',
        DISABLE_OUTER_FOCUS_HANDLERS = false;

    exports.BEFORE_UNLOAD_EVENT = 'beforeUnload';
    exports.BEFORE_BEFORE_UNLOAD_EVENT = 'beforeBeforeUnload';
    exports.UNLOAD_EVENT = 'unload';

    var EVENT_LISTENER_ATTACHED_EVENT = 'eventListenerAttached',
        ELEMENT_HAS_ADDINITIONAL_EVENT_METHODS = Util.isIE && !Util.isIE11;

    var eventEmitter = new Util.EventEmitter(),
        topWindow = Util.isCrossDomainWindows(window, window.top) ? window : window.top;

    var clickedFileInput = null;

    var hoverElementFixed = false;

    exports.on = eventEmitter.on.bind(eventEmitter);
    exports.off = eventEmitter.off.bind(eventEmitter);

    exports.init = function (window, document) {
        function beforeDispatchEvent() {
            window[EVENT_SANDBOX_DISPATCH_EVENT_FLAG] = (window[EVENT_SANDBOX_DISPATCH_EVENT_FLAG] || 0) + 1;
        }

        function afterDispatchEvent() {
            window[EVENT_SANDBOX_DISPATCH_EVENT_FLAG]--;

            if (!window[EVENT_SANDBOX_DISPATCH_EVENT_FLAG])
                delete window[EVENT_SANDBOX_DISPATCH_EVENT_FLAG];
        }

        //wrappers
        function overridedDispatchEvent(ev) {
            beforeDispatchEvent();

            var res = NativeMethods.dispatchEvent.call(this, ev);

            afterDispatchEvent();
            return res;
        }

        function overridedFireEvent(eventName, ev) {
            var eventType = eventName.substring(0, 2) === 'on' ? eventName.substring(2) : eventName,
                createEventType,
                res;

            beforeDispatchEvent();

            //event is 'MSEventObj'
            if (!ev || !ev.target) {
                if (/(^mouse\w+$)|^(dbl)?click$|^contextmenu$/.test(eventType))
                    createEventType = 'MouseEvents';
                else if (/^key\w+$/.test(eventType))
                    createEventType = 'Events';
                else if (/^touch\w+$/.test(eventType))
                    createEventType = 'TouchEvent';
                else
                    createEventType = 'Events';

                if (ev) {
                    ev = $.extend(document.createEvent(createEventType), ev);
                    ev.initEvent(eventType, typeof ev.cancelBubble !== 'undefined' ? ev.cancelBubble : false, true);
                }
                else {
                    //NOTE: fire event method can be called with no arguments
                    ev = document.createEvent(createEventType);
                    ev.initEvent(eventType, true, true);
                }
            }

            res = NativeMethods.dispatchEvent.call(this, ev);
            afterDispatchEvent();
            return res;
        }

        function overridedAttachEvent(eventName, handler) {
            NativeMethods.addEventListener.call(this, eventName.substring(2), handler);
        }

        function overridedDetachEvent(eventName, handler) {
            NativeMethods.removeEventListener.call(this, eventName.substring(2), handler);
        }

        function overridedClick() {
            beforeDispatchEvent();

            if (Util.isFileInput(this))
                clickedFileInput = this;

            var res = exports.Simulator.nativeClick(this, NativeMethods.click);

            afterDispatchEvent();
            return res;
        }

        function overridedSetSelectionRange() {
            return setSelectionRangeWrapper.apply(this, arguments);
        }

        function overridedSelect() {
            return selectWrapper.call(this);
        }

        function overridedFocus() {
            return focus(this, null, false, false, true);
        }

        function overridedBlur() {
            return blur(this, null, false, true);
        }

        var $lastHoveredElement = null;

        function cancelInternalEvents(e, dispatched, preventEvent, cancelHandlers, stopPropagation) {
            //NOTE: we should cancel events raised by native function calling (focus, blur) only if the element has the flag.
            // If event is dispatched, we shouldn't cancel it.
            var target = e.target || e.srcElement,
                internalEventFlag = e.type === 'focus' ? INTERNAL_FOCUS_FLAG : INTERNAL_BLUR_FLAG;

            if (target[internalEventFlag] && !e[DISPATCHED_EVENT_FLAG])
                stopPropagation();
        }

        exports.fixHoveredElement = function () {
            hoverElementFixed = true;
        };

        exports.freeHoveredElement = function () {
            hoverElementFixed = false;
        };

        function needChangeInputType(el) {
            var tagName = el.tagName ? el.tagName.toLowerCase() : '';
            return tagName === 'input' && (Util.isWebKit && /^(number|email)$/.test(el.type));
        }

        exports.setSelection = function (el, start, end, direction) {
            if (el.setSelectionRange)
                el.setSelectionRange(start, end, direction);
            else {
                el.selectionStart = start;
                el.selectionEnd = end;
            }
        };

        exports.getSelection = function (el) {
            var changeType = needChangeInputType(el),
                activeElement = Util.getActiveElement(Util.findDocument(el)),
                isElementActive = activeElement === el,
                savedType = el.type,
                selection = null;

            //HACK: (the problem after Chrome update to v.33.0.1750.117, and in Mozilla 29.0 for input with type 'number' T101195)
            // To get selection we should change input type to text if it's 'number' or 'email' (B254340).
            // But type changing is async in this case, so we should call blur to raise it (and focus to restore activeElement).
            if (changeType) {
                if (isElementActive)
                    blur(el, null, true);
                el.type = 'text';
            }

            if (Util.isInputWithoutSelectionPropertiesInMozilla(el)) {
                selection = {
                    start: 0,
                    end: 0,
                    direction: 'forward'
                };
            }
            else {
                selection = {
                    start: el.selectionStart,
                    end: el.selectionEnd,
                    direction: el.selectionDirection
                };
            }


            if (changeType) {
                el.type = savedType;
                if (isElementActive)
                    focus(el, null, true);
            }

            return selection;
        };

        exports.wrapSetterSelection = function (element, selectionSetter, needFocus, isContentEditable) {
            var curDocument = Util.findDocument(element),
                activeElement = null,

                result = null,
                focusRaised = false,
                focusHandler = function () {
                    focusRaised = true;
                };

            if (needFocus)
                element.addEventListener('focus', focusHandler);

            //focus and blur events
            beforeDispatchEvent();
            beforeDispatchEvent();

            result = selectionSetter();

            //focus and blur events
            afterDispatchEvent();
            afterDispatchEvent();

            if (needFocus) {
                activeElement = Util.getActiveElement(curDocument);

                if (Util.isWebKit && activeElement !== element) {
                    if (focusRaised)
                        element[INTERNAL_FOCUS_FLAG] = true;

                    element.focus();
                }

                if (Util.isIE)
                    internalSetTimeout.call(window, function () {
                        internalSetTimeout.call(window, function () {
                            element.removeEventListener('focus', focusHandler);

                            if (!focusRaised)
                                exports.Simulator.focus(element);
                        }, 0);
                    }, 0);
                else {
                    element.removeEventListener('focus', focusHandler);

                    if (!focusRaised) {
                        //NOTE: in Mozilla calling dispatchEvent 'focus' does active element.
                        // We should call native focus method.
                        if (isContentEditable && Util.isMozilla)
                            focus(element, null, true, false, true);
                        else
                            exports.Simulator.focus(element);
                    }
                }
            }
            return result;
        };

        function setSelectionRangeWrapper() {
            var selectionStart = arguments[0],
                selectionEnd = arguments[1],
                selectionDirection = arguments[2] || 'none',
                element = this,

                isTextArea = this.tagName && this.tagName.toLowerCase() === 'textarea',
                fn = isTextArea ? NativeMethods.textAreaSetSelectionRange : NativeMethods.setSelectionRange,
                activeElement = Util.getActiveElement(Util.findDocument(element)),
                isElementActive = false;

            var selectionSetter = function () {
                var changeType = needChangeInputType(element),
                    savedType = element.type,
                    res;

                if (changeType)
                    element.type = 'text';

                res = fn.call(element, selectionStart, selectionEnd, selectionDirection);

                if (changeType) {
                    element.type = savedType;
                    //HACK: (the problem after Chrome update to v.33.0.1750.117, and in Mozilla 29.0 for input with type 'number' T101195)
                    // To set right selection we should change input type to text if it's 'number' or 'email' and restore it after (B254340).
                    // But type changing is async in this case, so we should call blur to raise it (and focus to restore activeElement).
                    if (isElementActive) {
                        blur(element, null, true);
                        focus(element, null, true);
                    }
                }

                return res;
            };

            if (activeElement === element) {
                isElementActive = true;
                return selectionSetter();
            }

            //setSelectionRange leads to element focusing only in IE
            return exports.wrapSetterSelection(element, selectionSetter, Util.isIE);
        }

        function selectWrapper() {
            var element = this.parentElement();

            if (!element || Util.getActiveElement(Util.findDocument(element)) === element)
                return NativeMethods.select.call(this);
            else {
                var result = null,
                    focusRaised = false,
                    focusHandler = function () {
                        focusRaised = true;
                    };

                element.addEventListener('focus', focusHandler);
                result = NativeMethods.select.call(this);

                internalSetTimeout.call(window, function () {
                    internalSetTimeout.call(window, function () {
                        element.removeEventListener('focus', focusHandler);

                        if (!focusRaised)
                            exports.Simulator.focus(element);
                    }, 0);
                }, 0);
                return result;
            }
        }

        //NOTE: when you call focus/blur function of some element in IE, handlers of the event are executed it async manner,
        // but before any function that is called with the window.setTimeout function. So, we should raise handlers with
        // timeout but we should do it before other async functions calling
        var timeouts = [],
            deferredFunctions = [],
            nativeSetTimeout = NativeMethods.setTimeout,
            nativeSetInterval = NativeMethods.setInterval,
            internalSetTimeout = nativeSetTimeout;

        if (Util.isIE) {
            window.setTimeout = function () {
                return nativeSetTimeout.apply(window, wrapTimeoutFunctionsArguments(arguments));
            };

            window.setInterval = function () {
                return nativeSetInterval.apply(window, wrapTimeoutFunctionsArguments(arguments));
            };

            internalSetTimeout = window.setTimeout;
        }

        function callDeferredFunction(fn, args) {
            if (timeouts.length) {
                var curTimeouts = [],
                    curHandlers = [],
                    i = 0;

                for (; i < timeouts.length; i++) {
                    curTimeouts.push(timeouts[i]);
                    curHandlers.push(deferredFunctions[i]);
                }

                timeouts = [];
                deferredFunctions = [];

                for (i = 0; i < curTimeouts.length; i++) {
                    window.clearInterval(curTimeouts[i]);
                    curHandlers[i]();
                }

                //NOTE: handlers can create new deferred functions
                return callDeferredFunction(fn, args);
            }

            return fn.apply(window, args);
        }

        function wrapTimeoutFunctionsArguments(args) {
            var fn = args[0],
                fnToRun = (typeof fn === 'function') ? fn : function () {
                    window.eval(fn);
                };

            args[0] = function () {
                return callDeferredFunction(fnToRun, arguments);
            };

            return args;
        }

        function deferFunction(fn) {
            var deferredFunction = function () {
                fn();

                for (var i = 0; i < deferredFunctions.length; i++) {
                    if (deferredFunctions[i] === deferredFunction) {
                        deferredFunctions.splice(i, 1);
                        timeouts.splice(i, 1);

                        break;
                    }
                }
            };

            deferredFunctions.push(deferredFunction);
            timeouts.push(nativeSetTimeout.call(window, deferredFunction, 0));
        }

        function raiseEvent(element, type, callback, withoutHandlers, isAsync, forMouseEvent, preventScrolling) {
            //NOTE: focus and blur events should be raised after the activeElement changed (B237489)
            var simulateEvent = function () {
                    if (Util.isIE) {
                        window.setTimeout(function () {
                            window.setTimeout(function () {
                                if (element[getInternalEventFlag()])
                                    delete element[getInternalEventFlag()];
                            }, 0);
                        }, 0);
                    }
                    else if (element[getInternalEventFlag()])
                        delete element[getInternalEventFlag()];

                    if (!withoutHandlers) {
                        if (isAsync) {
                            deferFunction(function () {
                                exports.Simulator[type](element);
                            });
                        }
                        else
                            exports.Simulator[type](element);
                    }
                    callback();
                },

                getInternalEventFlag = function () {
                    return type === 'focus' ? INTERNAL_FOCUS_FLAG : INTERNAL_BLUR_FLAG;
                };

            //T239149 - TD15.1? - Error occurs during assertion creation on http://knockoutjs.com/examples/helloWorld.html in IE9
            if (Util.isIE && Util.browserVersion === 9 && ShadowUI.getRoot()[0] === element && (type === 'focus' || type === 'blur'))
                callback();

            if (element[type]) {
                //NOTE: we should guarantee that activeElement will be changed, therefore we should call native focus/blur
                // event. To guarantee all focus/blur events raising we should raise it manually too.

                var windowScroll = null;

                if (preventScrolling)
                    windowScroll = Util.getElementScroll($(window));

                var tempElement = null;
                if (type === 'focus' && element.tagName && element.tagName.toLowerCase() === 'label' && element.htmlFor) {
                    tempElement = Util.findDocument(element).getElementById(element.htmlFor);
                    if (tempElement)
                        element = tempElement;
                    else {
                        callback();
                        return;
                    }
                }

                element[getInternalEventFlag()] = true;

                NativeMethods[type].call(element);

                if (preventScrolling) {
                    var newWindowScroll = Util.getElementScroll($(window));

                    if (newWindowScroll.left !== windowScroll.left)
                        $(window).scrollLeft(windowScroll.left);

                    if (newWindowScroll.top !== windowScroll.top)
                        $(window).scrollTop(windowScroll.top);
                }

                var curDocument = Util.findDocument(element),
                    activeElement = Util.getActiveElement(curDocument);

                //if element was not focused and it has parent with tabindex, we focus this parent
                var $parent = $(element).parent();

                if (type === 'focus' && activeElement !== element && $parent[0] !== document && $parent.closest('[tabindex]').length && forMouseEvent) {
                    //NOTE: in WebKit calling of native focus for parent element raised page scrolling, we can't prevent it,
                    // therefore we need to restore page scrolling value
                    raiseEvent($parent.closest('[tabindex]')[0], 'focus', simulateEvent, false, false, forMouseEvent, forMouseEvent && Util.isWebKit);
                }
                //NOTE: some browsers doesn't change document.activeElement after element.blur() if browser window is on background.
                //That's why we call body.focus() without handlers. It should be called synchronously because client scripts may
                //expect that document.activeElement will be changed immediately after element.blur() calling.
                else if (type === 'blur' && activeElement === element && element !== $('body', curDocument)[0]) {
                    raiseEvent($('body', curDocument)[0], 'focus', simulateEvent, true);
                }
                else {
                    simulateEvent();
                }
            }
            else {
                simulateEvent();
            }
        }

        function focus(element, callback, silent, forMouseEvent, isNativeFocus) {
            if (DISABLE_OUTER_FOCUS_HANDLERS && !Util.isShadowUIElement(element))
                return;

            var callFocusCallback = function (callback) {
                if (typeof callback === 'function')
                    callback();
            };

            var raiseFocusEvent = function () {
                raiseEvent(element, 'focus', function () {
                    if (!silent)
                        elementEditingWatcher.watch(element);

                    //NOTE: If we call focus for unfocusable element (like 'div' or 'image') in iframe we should make
                    // document.active this iframe manually, so we call focus without handlers
                    if (isCurrentElementInIFrame && iFrameElement && topWindow.document.activeElement !== iFrameElement) {
                        raiseEvent(iFrameElement, 'focus', function () {
                            callFocusCallback(callback);
                        }, true, isAsync);
                    }
                    else
                        callFocusCallback(callback);

                }, withoutHandlers || silent, isAsync, forMouseEvent);
            };

            //NOTE: in IE if you call focus() or blur() methods from script, active element is changed immediately
            // but events are raised asynchronously after some timeout
            var isAsync = false;

            if (isNativeFocus && Util.isIE) {
                //in IE focus() method does not have any effect if it is called from focus event handler on second event phase
                if (((savedWindowEvents && savedWindowEvents.length) || Util.isIE11) && window.event && window.event.type === 'focus' && window.event.srcElement === element) {
                    callFocusCallback(callback);
                    return;
                }
                else
                    isAsync = true;
            }

            var isCurrentElementInIFrame = Util.isElementInIframe(element),
                iFrameElement = isCurrentElementInIFrame ? Util.getIFrameByElement(element) : null,
                curDocument = Util.findDocument(element),
                activeElement = Util.getActiveElement(),
                activeElementDocument = Util.findDocument(activeElement),
                withoutHandlers = element === $('body', curDocument)[0] && !Util.isIE,
                needBlur = false,
                needBlurIFrame = false;

            if (activeElement && activeElement.tagName) {
                if (activeElement === element)
                    withoutHandlers = true;
                else if (curDocument !== activeElementDocument && activeElement === $('body', activeElementDocument)[0])  //B253685
                    needBlur = false;
                else if (activeElement === $('body', curDocument)[0]) {
                    //Blur event raised for body only in IE. In addition, we must not call blur function for body because
                    //this leads to browser window moving to background
                    if (!silent && Util.isIE) {
                        var simulateBodyBlur = function () {
                            exports.Simulator.blur(activeElement);
                        };

                        if (isAsync)
                            internalSetTimeout.call(window, simulateBodyBlur, 0);
                        else
                            simulateBodyBlur();
                    }
                }
                else
                    needBlur = true;

                //B254260
                needBlurIFrame = curDocument !== activeElementDocument && Util.isElementInIframe(activeElement, activeElementDocument);
            }

            //NOTE: we always call blur for iframe manually without handlers (B254260)
            if (needBlurIFrame && !needBlur) {
                if (Util.isIE) {
                    //NOTE: We should call blur for iframe with handlers in IE
                    //but we can't call method 'blur' because activeElement !== element and handlers will not be called
                    exports.Simulator.blur(Util.getIFrameByElement(activeElement));
                    raiseFocusEvent();
                }
                else
                    blur(Util.getIFrameByElement(activeElement), raiseFocusEvent, true, isNativeFocus);
            }
            else if (needBlur) {
                blur(activeElement, function () {
                    if (needBlurIFrame)
                        blur(Util.getIFrameByElement(activeElement), raiseFocusEvent, true, isNativeFocus);
                    else
                        raiseFocusEvent();
                }, silent, isNativeFocus);
            }
            else
                raiseFocusEvent();
        }

        function blur(element, callback, withoutHandlers, isNativeBlur) {
            var activeElement = Util.getActiveElement(Util.findDocument(element)),
            //in IE if you call focus() or blur() methods from script, active element is changed immediately
            // but events are raised asynchronously after some timeout
                isAsync = isNativeBlur && Util.isIE;

            if (activeElement !== element)
                withoutHandlers = true;

            if (!withoutHandlers) {
                elementEditingWatcher.check(element);
                elementEditingWatcher.stopWatching(element);
            }

            raiseEvent(element, 'blur', function () {
                if (typeof callback === 'function')
                    callback();
            }, withoutHandlers, isAsync);
        }

        function overrideElementOrHTMLElementMethod(methodName, overridedMethod) {
            if (window.Element && methodName in window.Element.prototype)
                window.Element.prototype[methodName] = overridedMethod;
            else if (window.HTMLElement && methodName in window.HTMLElement.prototype)
                window.HTMLElement.prototype[methodName] = overridedMethod;

            if (window.Document && methodName in window.Document.prototype)
                window.Document.prototype[methodName] = overridedMethod;
        }

        if (SandboxUtil.BROWSER_HAS_ELEMENT_PROTOTYPE) {
            window.HTMLInputElement.prototype.setSelectionRange = overridedSetSelectionRange;
            window.HTMLTextAreaElement.prototype.setSelectionRange = overridedSetSelectionRange;

            overrideElementOrHTMLElementMethod('focus', overridedFocus);
            overrideElementOrHTMLElementMethod('blur', overridedBlur);
            overrideElementOrHTMLElementMethod('dispatchEvent', overridedDispatchEvent);

            if (ELEMENT_HAS_ADDINITIONAL_EVENT_METHODS) {
                overrideElementOrHTMLElementMethod('fireEvent', overridedFireEvent);
                overrideElementOrHTMLElementMethod('attachEvent', overridedAttachEvent);
                overrideElementOrHTMLElementMethod('detachEvent', overridedDetachEvent);
            }
        }

        //change
        var elementEditingWatcher = (function () {
            var OLD_VALUE_PROPERTY = SharedConst.PROPERTY_PREFIX + "oldValue",
                ELEMENT_EDITING_OBSERVED_FLAG = SharedConst.PROPERTY_PREFIX + "elementEditingObserved";

            function onBlur(e) {
                var target = (e.target || e.srcElement);
                if (!checkElementChanged(target))
                    stopWatching(target);
            }

            function onChange(e) {
                stopWatching(e.target || e.srcElement);
            }

            function stopWatching(element) {
                if (element) {
                    $(element).unbind('blur', onBlur);
                    $(element).unbind('change', onChange);
                    if (element[ELEMENT_EDITING_OBSERVED_FLAG])
                        delete element[ELEMENT_EDITING_OBSERVED_FLAG];
                    if (element[OLD_VALUE_PROPERTY])
                        delete element[OLD_VALUE_PROPERTY];
                }
            }

            function watchElement(element) {
                if (element && !element[ELEMENT_EDITING_OBSERVED_FLAG] && Util.isTextEditableElementAndEditingAllowed(element) && !Util.isShadowUIElement(element)) {
                    var $element = $(element);

                    element[ELEMENT_EDITING_OBSERVED_FLAG] = true;
                    element[OLD_VALUE_PROPERTY] = element.value;
                    $element.bind('blur', onBlur);
                    $element.bind('change', onChange);
                }
            }

            function restartWatching(element) {
                if (element && element[ELEMENT_EDITING_OBSERVED_FLAG])
                    element[OLD_VALUE_PROPERTY] = element.value;
            }

            function checkElementChanged(element) {
                if (element && element[ELEMENT_EDITING_OBSERVED_FLAG] && element.value !== element[OLD_VALUE_PROPERTY]) {
                    exports.Simulator.change(element);
                    restartWatching(element);
                    return true;
                }
                else
                    return false;
            }

            return {
                watch: watchElement,
                restartWatching: restartWatching,
                check: checkElementChanged,
                stopWatching: stopWatching
            };
        })();

        if (Util.isIE && window.TextRange && window.TextRange.prototype.select)
            window.TextRange.prototype.select = overridedSelect;

        exports.watchElementEditing = elementEditingWatcher.watch;
        exports.restartWatchingElementEditing = elementEditingWatcher.restartWatching;
        exports.processElementChanging = elementEditingWatcher.check;
        exports.focus = focus;
        exports.blur = blur;

        exports.overrideElement = function (el, overridePrototypeMeths) {
            if ('click' in el)
                el.click = overridedClick;

            if (!SandboxUtil.BROWSER_HAS_ELEMENT_PROTOTYPE || overridePrototypeMeths) {
                el.dispatchEvent = overridedDispatchEvent;

                if ('focus' in el) {
                    el.focus = overridedFocus;
                    el.blur = overridedBlur;
                }

                if ('setSelectionRange' in el)
                    el.setSelectionRange = overridedSetSelectionRange;

                if (ELEMENT_HAS_ADDINITIONAL_EVENT_METHODS) {
                    el.fireEvent = overridedFireEvent;
                    el.attachEvent = overridedAttachEvent;
                    el.detachEvent = overridedDetachEvent;
                }
            }

            if (Util.isInputElement(el)) {
                if (Util.isIE) {
                    // Prevent browser's open file dialog
                    NativeMethods.addEventListener.call(el, 'click', function (e) {
                        if (Util.isFileInput(el)) {
                            if (clickedFileInput === el) {
                                clickedFileInput = null;

                                return Util.preventDefault(e, true);
                            }
                        }
                    }, true);
                }
            }
        };


        //NOTE: this handler should be called after the others
        var emitBeforeUnloadEvent = function () {
            eventEmitter.emit(exports.BEFORE_UNLOAD_EVENT, {
                returnValue: storedBeforeUnloadReturnValue,
                prevented: prevented,
                isFakeIEEvent: isFakeIEBeforeUnloadEvent
            });

            isFakeIEBeforeUnloadEvent = false;
        };

        var storedBeforeUnloadReturnValue = '',
            prevented = false;

        function onBeforeUnloadHanlder(e, originListener) {
            //NOTE: overriding the returnValue property to prevent native dialog
            Object.defineProperty(e, 'returnValue', SandboxUtil.createPropertyDesc({
                get: function () {
                    return storedBeforeUnloadReturnValue;
                },
                set: function (value) {
                    //NOTE: in all browsers if any value is set it leads to preventing unload. In Mozilla only if value
                    // is an empty string it does not do it.
                    storedBeforeUnloadReturnValue = value;

                    prevented = Util.isMozilla ? value !== '' : true;
                }
            }));

            Object.defineProperty(e, 'preventDefault', SandboxUtil.createPropertyDesc({
                get: function () {
                    return function () {
                        prevented = true;
                    };
                },
                set: function () {
                }
            }));

            var res = originListener(e);

            if (typeof res !== 'undefined') {
                storedBeforeUnloadReturnValue = res;
                prevented = true;
            }
        }

        exports.setOnBeforeUnload = function (window, value) {
            if (typeof value === 'function') {

                this.storedBeforeUnloadHandler = value;

                window.onbeforeunload = function (e) {
                    return onBeforeUnloadHanlder(e, value);
                };

                //NOTE: reattach listener and it'll be the last in the queue
                NativeMethods.windowRemoveEventListener.call(window, 'beforeunload', emitBeforeUnloadEvent);
                NativeMethods.windowAddEventListener.call(window, 'beforeunload', emitBeforeUnloadEvent);
            }
            else {
                this.storedBeforeUnloadHandler = null;
                window.onbeforeunload = null;
            }
        };

        exports.getOnBeforeUnload = function () {
            return this.storedBeforeUnloadHandler;
        };

        exports.initDocumentListening = function () {
            exports.initElementListening(document, Util.DOM_EVENTS);
        };

        exports.initDocumentListening();

        function addWindowEventHandlers() {
            exports.initElementListening(window, Util.DOM_EVENTS.concat(['beforeunload', 'unload', 'message']));

            exports.setEventListenerWrapper(window, ['beforeunload'], onBeforeUnloadHanlder);

            exports.addInternalEventListener(window, ['unload'], function () {
                eventEmitter.emit(exports.UNLOAD_EVENT);
            });

            exports.addInternalEventListener(window, ['mouseover'], function (e) {
                if (hoverElementFixed || Util.isShadowUIElement(e.target))
                    return;

                var $target = $(e.target),
                    $jointParent = null,
                    stop = false;


                // NOTE: In this method, we are looking for a joint parent for the previous and the new hovered element.
                // Processes need only to that parent. This we are trying to reduce the number of dom calls.
                if ($lastHoveredElement) {
                    var $el = $lastHoveredElement;

                    while (!stop) {
                        // Check that the current element is a joint parent for the hovered elements.
                        if ($el.has($target).length === 0) {
                            $el.removeAttr(SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR);
                            $el = $el.parent();
                            stop = $el.length === 0;
                        } else
                            stop = true;
                    }

                    $jointParent = $el;
                }

                stop = false;

                while (!stop) {
                    // Assign pseudo-class marker up to joint parent.
                    if ($target !== $jointParent) {
                        $target.attr(SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR, '');
                        $target = $target.parent();
                        stop = $target.length === 0;
                    } else
                        stop = true;
                }
            });

            exports.addInternalEventListener(window, ['mouseout'], function (e) {
                if (!Util.isShadowUIElement(e.target))
                    $lastHoveredElement = $(e.target);
            });

            exports.addInternalEventListener(window, ['focus', 'blur', 'change'], cancelInternalEvents);
        }

        addWindowEventHandlers();

        var isFakeIEBeforeUnloadEvent = false;

        $(document).on('click', 'a', function () {
            if (Util.isIE && !Util.isIE11 && this.tagName && this.tagName.toLowerCase() === 'a') {
                var href = $(this).attr('href');

                isFakeIEBeforeUnloadEvent = /(^javascript:)|(^mailto:)|(^tel:)|(^#)/.test(href);
            }
        });

        NativeMethods.windowAddEventListener.call(window, 'beforeunload', emitBeforeUnloadEvent);

        exports.addInternalEventListener(window, ['beforeunload'], function () {
            eventEmitter.emit(exports.BEFORE_BEFORE_UNLOAD_EVENT, {
                isFakeIEEvent: isFakeIEBeforeUnloadEvent
            });
        });

        eventEmitter.on(EVENT_LISTENER_ATTACHED_EVENT, function (e) {
            if (e.el === window && e.eventType === 'beforeunload') {
                //NOTE: reattach listener and it'll be the last in the queue
                NativeMethods.windowRemoveEventListener.call(window, 'beforeunload', emitBeforeUnloadEvent);
                NativeMethods.windowAddEventListener.call(window, 'beforeunload', emitBeforeUnloadEvent);
            }
        });
    };

    //event listeners overriding
    (function () {
        var ELEMENT_LISTENING_EVENTS_STORAGE_PROP = 'tc_eles_bef23a16';

        var LISTENED_EVENTS = [
            'click', 'mousedown', 'mouseup', 'dblclick', 'contextmenu', 'mousemove', 'mouseover', 'mouseout',
            'pointerdown', 'pointermove', 'pointerover', 'pointerout', 'pointerup',
            'MSPointerDown', 'MSPointerMove', 'MSPointerOver', 'MSPointerOut', 'MSPointerUp',
            'touchstart', 'touchmove', 'touchend',
            'keydown', 'keypress', 'keyup',
            'change', 'focus', 'blur', 'focusin', 'focusout'
        ];

        var listeningCtx = {
            getElementCtx: function (el) {
                return el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
            },

            getEventCtx: function (el, event) {
                event = Util.isIE11 && /MSPointer/.test(event) ? event.replace('MS', '').toLowerCase() : event;
                return listeningCtx.getElementCtx(el)[event] || null;
            },

            isElementListening: function (el) {
                return !!el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
            },

            addListeningElement: function (el, events) {
                if (!el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP])
                    el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP] = {};

                for (var i = 0; i < events.length; i++) {
                    if (!el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP][events[i]]) {
                        el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP][events[i]] = {
                            internalHandlers: [],
                            outerHandlers: [],
                            outerHandlersWrapper: null,
                            wrappers: [],
                            cancelOuterHandlers: false
                        };
                    }
                }
            },

            removeListeningElement: function (el) {
                delete el[ELEMENT_LISTENING_EVENTS_STORAGE_PROP];
            },

            addFirstInternalHandler: function (el, events, handler) {
                var elementHandlers = listeningCtx.getElementCtx(el);

                for (var i = 0; i < events.length; i++)
                    elementHandlers[events[i]].internalHandlers.splice(0, 0, handler);
            },

            addInternalHandler: function (el, events, handler) {
                var elementHandlers = listeningCtx.getElementCtx(el);

                for (var i = 0; i < events.length; i++)
                    elementHandlers[events[i]].internalHandlers.push(handler);

            },
            removeInternalHandler: function (el, events, handler) {
                var elementHandlers = listeningCtx.getElementCtx(el);

                for (var i = 0; i < events.length; i++) {
                    var eventHandlers = elementHandlers[events[i]].internalHandlers,
                        listenerIndex = $.inArray(handler, eventHandlers);

                    if (listenerIndex > -1)
                        eventHandlers.splice(listenerIndex, 1);
                }
            },

            wrapEventListener: function (eventListeningInfo, listener, wrapper, useCapture) {
                eventListeningInfo.outerHandlers.push({fn: listener, useCapture: useCapture || false});
                eventListeningInfo.wrappers.push(wrapper);
            },

            getWrapper: function (eventListeningInfo, listener, useCapture) {
                var originListeners = eventListeningInfo.outerHandlers,
                    wrappers = eventListeningInfo.wrappers,
                    wrapper = null;

                for (var i = 0; i < originListeners.length; i++) {
                    var curListener = originListeners[i];

                    if (curListener.fn === listener && (curListener.useCapture || false) === (useCapture || false)) {
                        wrapper = wrappers[i];

                        wrappers.splice(i, 1);
                        originListeners.splice(i, 1);

                        return wrapper;
                    }
                }
            }
        };

        var eventHandler = function (e) {
            //NOTE: fix for the bug in firefox (https://bugzilla.mozilla.org/show_bug.cgi?id=1161548).
            //An exception is raised when try to get any property from the event object in some cases.
            var type = '';

            try {
                type = e.type;
            }
            catch (err) {
                return;
            }

            var el = this,
                eventPrevented = false,
                handlersCancelled = false,
                stopPropagationCalled = false,

                eventListeningInfo = listeningCtx.getEventCtx(el, type),
                internalHandlers = eventListeningInfo ? eventListeningInfo.internalHandlers : [];

            eventListeningInfo.cancelOuterHandlers = false;

            var preventEvent = function () {
                eventPrevented = true;
                Util.preventDefault(e);
            };

            var cancelHandlers = function () {
                if (!handlersCancelled)
                    eventListeningInfo.cancelOuterHandlers = true;

                handlersCancelled = true;
            };

            var stopPropagation = function () {
                stopPropagationCalled = true;

                Util.stopPropagation(e);
            };

            for (var i = 0; i < internalHandlers.length; i++) {
                internalHandlers[i].call(el, e, !!window[EVENT_SANDBOX_DISPATCH_EVENT_FLAG], preventEvent, cancelHandlers, stopPropagation);

                if (eventPrevented || stopPropagationCalled)
                    break;
            }
        };

        function getEventListenerWrapper(eventListeningInfo, listener) {
            return function (e) {
                if (eventListeningInfo.cancelOuterHandlers)
                    return;

                if (typeof eventListeningInfo.outerHandlersWrapper === 'function')
                    return eventListeningInfo.outerHandlersWrapper.call(this, e, listener);
                else
                    return listener.call(this, e);
            };
        }

        function getBodyEventListenerWrapper(documentEventListeningInfo, listener) {
            return function (e) {
                if (documentEventListeningInfo.cancelOuterHandlers)
                    return;

                return listener.call(this, e);
            };
        }

        exports.initElementListening = function (el, events) {
            var nativeAddEventListener = (function () {
                if (Util.isWindowInstance(el))
                    return NativeMethods.windowAddEventListener;

                return typeof el.body !== 'undefined' ? NativeMethods.documentAddEventListener : el.addEventListener;
            })();

            var nativeRemoveEventListener = (function () {
                if (Util.isWindowInstance(el))
                    return NativeMethods.windowRemoveEventListener;

                return typeof el.body !== 'undefined' ? NativeMethods.documentRemoveEventListener : el.removeEventListener;
            })();

            events = events || LISTENED_EVENTS;

            listeningCtx.addListeningElement(el, events);

            for (var i = 0; i < events.length; i++) {
                nativeAddEventListener.call(el, events[i], eventHandler, true);
            }

            el.addEventListener = function (type, listener, useCapture) {
                var eventListeningInfo = listeningCtx.getEventCtx(el, type);

                if (!eventListeningInfo)
                    return nativeAddEventListener.call(this, type, listener, useCapture);

                //T233158 - Wrong test run for mouse click in IE
                var isDifferentHandler = eventListeningInfo.outerHandlers.every(function (value) {
                    return value.fn !== listener || value.useCapture !== useCapture;
                });

                if (!isDifferentHandler)
                    return;

                var wrapper = getEventListenerWrapper(eventListeningInfo, listener);

                listeningCtx.wrapEventListener(eventListeningInfo, listener, wrapper, useCapture);

                var res = nativeAddEventListener.call(this, type, wrapper, useCapture);

                eventEmitter.emit(EVENT_LISTENER_ATTACHED_EVENT, {
                    el: this,
                    eventType: type,
                    listener: listener
                });

                return res;
            };

            var removeEventListener = function (type, listener, useCapture) {
                var eventListeningInfo = listeningCtx.getEventCtx(this, type);

                if (!eventListeningInfo)
                    return nativeRemoveEventListener.call(this, type, listener, useCapture);

                return nativeRemoveEventListener.call(this, type, listeningCtx.getWrapper(eventListeningInfo, listener, useCapture), useCapture);
            };

            el.removeEventListener = removeEventListener;
        };

        exports.restartElementListening = function (el) {
            var nativeAddEventListener = (function () {
                if (Util.isWindowInstance(el))
                    return NativeMethods.windowAddEventListener;

                return typeof el.body !== 'undefined' ? NativeMethods.documentAddEventListener : NativeMethods.addEventListener;
            })();

            var elementCtx = listeningCtx.getElementCtx(el);

            if (elementCtx) {
                Object.keys(elementCtx).forEach(function (event) {
                    nativeAddEventListener.call(el, event, eventHandler, true);
                });
            }
        };

        exports.initDocumentBodyListening = function (doc) {
            var events = Util.DOM_EVENTS;

            var nativeAddEventListener = (function () {
                return doc.body.addEventListener;
            })();

            var nativeRemoveEventListener = (function () {
                return doc.body.removeEventListener;
            })();

            listeningCtx.addListeningElement(doc.body, events);

            doc.body.addEventListener = function (type, listener, useCapture) {
                var docEventListeningInfo = listeningCtx.getEventCtx(doc, type),
                    eventListeningInfo = listeningCtx.getEventCtx(this, type);

                if (!docEventListeningInfo)
                    return nativeAddEventListener.call(this, type, listener, useCapture);

                //T233158 - Wrong test run for mouse click in IE
                var isDifferentHandler = eventListeningInfo.outerHandlers.every(function (value) {
                    return value.fn !== listener || value.useCapture !== useCapture;
                });

                if (!isDifferentHandler)
                    return;

                var wrapper = getBodyEventListenerWrapper(docEventListeningInfo, listener);

                listeningCtx.wrapEventListener(eventListeningInfo, listener, wrapper, useCapture);

                var res = nativeAddEventListener.call(this, type, wrapper, useCapture);

                eventEmitter.emit(EVENT_LISTENER_ATTACHED_EVENT, {
                    el: this,
                    eventType: type,
                    listener: listener
                });

                return res;
            };

            doc.body.removeEventListener = function (type, listener, useCapture) {
                var eventListeningInfo = listeningCtx.getEventCtx(this, type);

                if (!eventListeningInfo)
                    return nativeRemoveEventListener.call(this, type, listener, useCapture);

                return nativeRemoveEventListener.call(this, type, listeningCtx.getWrapper(eventListeningInfo, listener, useCapture), useCapture);
            };
        };

        exports.cancelElementListening = function (el) {
            listeningCtx.removeListeningElement(el);

            if (el.body)
                listeningCtx.removeListeningElement(el.body);
        };

        exports.addInternalEventListener = function (el, events, handler) {
            listeningCtx.addInternalHandler(el, events, handler);
        };

        exports.addFirstInternalHandler = function (el, events, handler) {
            listeningCtx.addFirstInternalHandler(el, events, handler);
        };

        exports.removeInternalEventListener = function (el, events, handler) {
            listeningCtx.removeInternalHandler(el, events, handler);
        };

        exports.setEventListenerWrapper = function (el, events, wrapper) {
            if (!listeningCtx.isElementListening(el))
                exports.initElementListening(el, events);

            for (var i = 0; i < events.length; i++) {
                var eventListeningInfo = listeningCtx.getEventCtx(el, events[i]);

                eventListeningInfo.outerHandlersWrapper = wrapper;
            }
        };
    })();

    var touchIdentifier = Date.now();

    function getTouchIdentifier(type) {
        //NOTE: a touch point is created on 'touchstart' event. When it's moved its id should not be changed (T112153)
        if (type === 'touchstart')
            touchIdentifier++;

        return touchIdentifier;
    }

    function getUIEventArgs(type, options) {
        var opts = options || {};

        return {
            type: type,
            canBubble: opts.canBubble !== false,
            cancelable: opts.cancelable !== false,
            view: opts.view || window,
            detail: opts.detail || 0,
            ctrlKey: opts.ctrlKey || false,
            altKey: opts.altKey || false,
            shiftKey: opts.shiftKey || false,
            metaKey: opts.metaKey || false
        };
    }

    function getMouseEventArgs(type, options) {
        var opts = options || {};

        return $.extend(getUIEventArgs(type, options), {
            screenX: opts.screenX || 0,
            screenY: opts.screenY || 0,
            clientX: opts.clientX || 0,
            clientY: opts.clientY || 0,
            button: typeof opts.button === 'undefined' ? Util.BUTTON.LEFT : opts.button,
            buttons: typeof opts.buttons === 'undefined' ? Util.BUTTONS_PARAMETER.LEFT_BUTTON : opts.buttons,
            relatedTarget: opts.relatedTarget || null,
            which: typeof opts.which === 'undefined' ? Util.WHICH_PARAMETER.LEFT_BUTTON : opts.which
        });
    }

    function getKeyEventArgs(type, options) {
        var opts = options || {};
        return $.extend(getUIEventArgs(type, options), {
            keyCode: opts.keyCode || 0,
            charCode: opts.charCode || 0,
            which: type === 'press' ? opts.charCode : opts.keyCode
        });
    }

    function getTouchEventArgs(type, options) {
        var opts = options || {},
            args = $.extend(getUIEventArgs(type, opts), {
                screenX: opts.screenX || 0,
                screenY: opts.screenY || 0,
                clientX: opts.clientX || 0,
                clientY: opts.clientY || 0,
                pageX: opts.clientX || 0,
                pageY: opts.clientY || 0
            });

        if (Util.isIOS)
            args.touch = document.createTouch(args.view, options.target, getTouchIdentifier(args.type),
                args.clientX, args.clientY, 0, 0);
        else
            args.touch = document.createTouch(args.view, options.target, getTouchIdentifier(args.type), args.pageX, args.pageY,
                args.screenX, args.screenY, args.clientX, args.clientY, null, null, typeof args.rotation === 'undefined' ? 0 : args.rotation); //B237995

        args.changedTouches = document.createTouchList(args.touch);
        args.touches = args.type === 'touchend' ? document.createTouchList() : args.changedTouches; //T170088
        args.targetTouches = args.touches;

        return args;
    }

    var IE_BUTTONS_MAP = {
        0: 1,
        1: 4,
        2: 2
    };

    //NOTE: (IE only) if some event dispatching raised native click function calling we should remove window.event property
    // (that was set in the raiseDispatchEvent function). Otherwise the window.event property will be equal dispatched event
    // but not native click event. After click we should restore it. (B237144)
    var savedWindowEvents = [],
        savedNativeClickCount = 0;

    function raiseNativeClick(el, originClick) {
        //B254199
        var curWindow = Util.isElementInIframe(el) ? Util.getIFrameByElement(el).contentWindow : window;

        if (Util.isIE && !Util.isIE11)
            delete curWindow.event;

        originClick.call(el);

        if (Util.isIE && !Util.isIE11) {
            if (savedNativeClickCount--)
                savedWindowEvents.shift();

            if (savedWindowEvents.length) {
                Object.defineProperty(curWindow, 'event', {
                    get: function () {
                        return savedWindowEvents[0];
                    },
                    configurable: true
                });
            }
        }
    }

    function raiseDispatchEvent(el, ev, args) {
        //NOTE: in IE  when we raise event via the dispatchEvent function, the window.event object is null.
        // After a real event happened there is the window.event object but it is not identical with the first argument
        // of event handler. The window.Event object is identical with the object that is created when we raise event
        // via the fireEvent function. So, when we raise event via the dispatchEvent function we should set the
        // window.event object malually.
        // Except IE11 - window.event is not null and its the same as in event handler (only in window.top.event).
        // Also in iE11 window.event has not returnValue property and
        // impossible to prevent event via assigning window.event.returnValue = false
        var isElementInIFrame = Util.isElementInIframe(el);

        if (Util.isFileInput(el) && ev.type === 'click')
            clickedFileInput = el;

        if (Util.isIE && !Util.isIE11) {
            args = args || {type: ev.type};

            var returnValue = true,
            //B254199
                curWindow = isElementInIFrame ? Util.getIFrameByElement(el).contentWindow : window,
                curWindowEvent = null,
                onEvent = 'on' + (Util.isIE && Util.browserVersion === 10 && /MSPointer(Down|Up|Move|Over|Out)/.test(ev.type) ? ev.type.toLowerCase() : ev.type),
                inlineHandler = el[onEvent],
                button = args.button;

            //NOTE: if window.event generated after native click raised
            if (typeof curWindow.event === 'object' && savedWindowEvents.length && curWindow.event !== savedWindowEvents[0]) {
                savedNativeClickCount++;
                savedWindowEvents.unshift(curWindow.event);
            }

            delete curWindow.event;

            var saveWindowEventObject = function (e) {
                curWindowEvent = curWindow.event || ev;
                savedWindowEvents.unshift(curWindowEvent);
                Util.preventDefault(e);
            };

            if (el.parentNode) {  // NOTE: fireEvent raises error when el.parentNode === null

                el[onEvent] = saveWindowEventObject;
                args.button = IE_BUTTONS_MAP[button];

                NativeMethods.fireEvent.call(el, onEvent, $.extend(Util.findDocument(el).createEventObject(), args));

                el[onEvent] = inlineHandler;
                args.button = button;
            }

            Object.defineProperty(curWindow, 'event', {
                get: function () {
                    return savedWindowEvents[0];
                },
                configurable: true
            });

            var cancelBubble = false;

            if (curWindowEvent) {
                Object.defineProperty(curWindowEvent, 'returnValue', {
                    get: function () {
                        return returnValue;
                    },

                    set: function (value) {
                        if (value === false)
                            ev.preventDefault();

                        returnValue = value;
                    },
                    configurable: true
                });

                Object.defineProperty(curWindowEvent, 'cancelBubble', {
                    get: function () {
                        return cancelBubble;
                    },

                    set: function (value) {
                        ev.cancelBubble = cancelBubble = value;
                    },
                    configurable: true
                });

                if (curWindowEvent.type === 'mouseout' || curWindowEvent.type === 'mouseover') {
                    Object.defineProperty(curWindowEvent, 'fromElement', {
                        get: function () {
                            return curWindowEvent.type === 'mouseout' ? el : args.relatedTarget;
                        },
                        configurable: true
                    });
                    Object.defineProperty(curWindowEvent, 'toElement', {
                        get: function () {
                            return curWindowEvent.type === 'mouseover' ? el : args.relatedTarget;
                        },
                        configurable: true
                    });
                }

            }

            returnValue = el.dispatchEvent(ev) && returnValue;

            if (curWindowEvent && curWindowEvent === savedWindowEvents[0])
                savedWindowEvents.shift();

            if (!savedWindowEvents.length)
                delete curWindow.event;

            return returnValue;
        }
        //NOTE: In IE11 iframe's window.event object is null.
        // So we should set iframe's window.event object malually by window.event (B254199).
        else if (Util.isIE11 && isElementInIFrame) {

            Object.defineProperty(Util.getIFrameByElement(el).contentWindow, 'event', {
                get: function () {
                    return window.event;
                },
                configurable: true
            });

            return el.dispatchEvent(ev);
        }
        else {
            return el.dispatchEvent(ev);
        }
    }

    function dispatchMouseEvent(el, args) {
        var ev = null,
            pointerRegExp = /mouse(down|up|move|over|out)/;

        //NOTE: in IE submit doesn't work if a click is emulated for some submit button's children (for example img, B236676)
        //In addition, if a test is being recorded in IE, the target of a click event is always a button, not a child, so child does not receive click event at all
        if (Util.isIE) {
            if (args.type === 'click' || args.type === 'mouseup' || args.type === 'mousedown')
                if (el.parentNode && $(el.parentNode).closest('button').length) {
                    var $button = $(el.parentNode).closest('button');
                    if ($button.attr('type') === 'submit') {
                        el = $button[0];
                    }
                }
        }

        if (pointerRegExp.test(args.type) && (window.PointerEvent || window.MSPointerEvent)) {
            var pointEvent = Util.isIE11 ? document.createEvent('PointerEvent') : document.createEvent('MSPointerEvent'),
                elPosition = Util.getOffsetPosition(el),
                elBorders = Util.getBordersWidth($(el)),
                elClientPosition = Util.offsetToClientCoords({
                    x: elPosition.left + elBorders.left,
                    y: elPosition.top + elBorders.top
                }),
                eventShortType = args.type.replace('mouse', ''),
                pArgs = $.extend({
                    widthArg: Util.isIE11 ? 1 : 0,
                    heightArg: Util.isIE11 ? 1 : 0,
                    pressure: 0,
                    rotation: 0,
                    tiltX: 0,
                    tiltY: 0,
                    pointerIdArg: 1, //NOTE: this parameter must be "1" for mouse
                    pointerType: Util.isIE11 ? 'mouse' : 4,
                    hwTimestampArg: Date.now(),
                    isPrimary: true
                }, args);

            pArgs.type = Util.isIE11 ? 'pointer' + eventShortType : 'MSPointer' + eventShortType.charAt(0).toUpperCase() + eventShortType.substring(1);
            pArgs.offsetXArg = args.clientX - elClientPosition.x;
            pArgs.offsetYArg = args.clientY - elClientPosition.y;
            pArgs.button = args.buttons === Util.BUTTONS_PARAMETER.NO_BUTTON ? Util.POINTER_EVENT_BUTTON.NO_BUTTON : pArgs.button;

            //NOTE: we send null as a relatedTarget argument because IE has memory leak
            pointEvent.initPointerEvent(pArgs.type, pArgs.canBubble, pArgs.cancelable, window, pArgs.detail, pArgs.screenX,
                pArgs.screenY, pArgs.clientX, pArgs.clientY, pArgs.ctrlKey, pArgs.altKey, pArgs.shiftKey, pArgs.metaKey,
                pArgs.button, null, pArgs.offsetXArg, pArgs.offsetYArg, pArgs.widthArg, pArgs.heightArg,
                pArgs.pressure, pArgs.rotation, pArgs.tiltX, pArgs.tiltY, pArgs.pointerIdArg, pArgs.pointerType,
                pArgs.hwTimestampArg, pArgs.isPrimary);

            //NOTE: after dispatching pointer event doesn't contain 'target' and 'relatedTarget' property
            Object.defineProperty(pointEvent, 'target', {
                get: function () {
                    return el;
                },
                configurable: true
            });

            Object.defineProperty(pointEvent, 'relatedTarget', {
                get: function () {
                    return args.relatedTarget;
                },
                configurable: true
            });

            Object.defineProperty(pointEvent, 'buttons', {
                get: function () {
                    return args.buttons;
                }
            });

            raiseDispatchEvent(el, pointEvent, pArgs);
        }

        ev = document.createEvent('MouseEvents');
        ev.initMouseEvent(args.type, args.canBubble, args.cancelable, window, args.detail, args.screenX,
            args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey,
            args.button, args.relatedTarget);

        if (Util.isMozilla || Util.isIE) {
            Object.defineProperty(ev, 'buttons', {
                get: function () {
                    return args.buttons;
                }
            });
        }

        //T188166 - act.hover trigger "mouseenter" event with "which" parameter 1
        if (typeof args.which !== 'undefined' && $.browser.webkit) {
            Object.defineProperty(ev, SharedConst.EVENT_SANDBOX_WHICH_PROPERTY_WRAPPER, {
                get: function () {
                    return args.which;
                }
            });
        }

        //NOTE: After the MouseEvent was created by using initMouseEvent method pageX and pageY properties equal zero (only in IE9).
        //We can set them only by defineProperty method (B253930)
        if (Util.isIE && Util.browserVersion === 9) {
            var currentDocument = Util.findDocument(el),
                documentScroll = Util.getElementScroll($(currentDocument));

            Object.defineProperty(ev, 'pageX', {
                get: function () {
                    return ev.clientX + documentScroll.left;
                }
            });

            Object.defineProperty(ev, 'pageY', {
                get: function () {
                    return ev.clientY + documentScroll.top;
                }
            });
        }

        return raiseDispatchEvent(el, ev, args);
    }

    function dispatchKeyEvent(el, args) {
        var ev = null;

        if (document.createEvent) {
            ev = document.createEvent('Events');
            ev.initEvent(args.type, args.canBubble, args.cancelable);
            ev = $.extend(ev, {
                view: args.view,
                detail: args.detail,
                ctrlKey: args.ctrlKey,
                altKey: args.altKey,
                shiftKey: args.shiftKey,
                metaKey: args.metaKey,
                keyCode: args.keyCode,
                charCode: args.charCode,
                which: args.which
            });
            return raiseDispatchEvent(el, ev, args);
        }
    }

    function dispatchEvent(el, name, flag) {
        var ev = null;

        if (document.createEvent) {
            ev = document.createEvent('Events');

            //NOTE: the dispatchEvent funciton is used for events specific to one element (focus, blur, change, input, submit),
            // so we set the 'bubbling' (the second) argument to false (T229732)
            ev.initEvent(name, false, true);

            if (flag)
                ev[flag] = true;

            return raiseDispatchEvent(el, ev);
        }
    }

    function dispatchTouchEvent(el, args) {
        var ev = document.createEvent('TouchEvent');

        //HACK: test for iOS using initTouchEvent args count (TODO:replace it with user agent analyzis later)
        if (Util.isIOS) {
            ev.initTouchEvent(args.type, args.canBubble, args.cancelable, args.view,
                args.detail, args.screenX, args.screenY, args.pageX, args.pageY, args.ctrlKey,
                args.altKey, args.shiftKey, args.metaKey, args.touches, args.targetTouches,
                args.changedTouches, args.scale, typeof args.rotation === 'undefined' ? 0 : args.rotation); //B237995
        } else {
            if (ev.initTouchEvent.length === 12) {
                // FireFox
                ev.initTouchEvent(args.type, args.canBubble, args.cancelable, args.view,
                    args.detail, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.touches,
                    args.targetTouches, args.changedTouches);
            } else {
                // Default android browser, Dolphin
                ev.initTouchEvent(args.touches, args.targetTouches, args.changedTouches, args.type, args.view,
                    args.screenX, args.screenY, args.pageX - args.view.pageXOffset, args.pageY - args.view.pageYOffset,
                    args.ctrlKey, args.altKey, args.shiftKey, args.metaKey);
            }
        }

        return el.dispatchEvent(ev);
    }

    exports.disableOuterFocusHandlers = function () {
        DISABLE_OUTER_FOCUS_HANDLERS = true;
    };

    exports.enableOuterFocusHandlers = function () {
        DISABLE_OUTER_FOCUS_HANDLERS = false;
    };

    function simulateEvent(el, event, userOptions, options) {
        var args,
            dispatch,
        //NOTE: we don't emulate click on link with modifiers (ctrl, shift, ctrl+shift, alt),
        // because it causes the opening of additional tabs and window in browser or loading files
            isClickOnLink = event === 'click' && el.tagName && el.tagName.toLocaleLowerCase() === 'a',
            opts = $.extend(
                userOptions ? {
                    clientX: userOptions.clientX,
                    clientY: userOptions.clientY,
                    altKey: isClickOnLink ? false : userOptions.alt,
                    shiftKey: isClickOnLink ? false : userOptions.shift,
                    ctrlKey: isClickOnLink ? false : userOptions.ctrl,
                    metaKey: userOptions.meta,
                    button: userOptions.button,
                    which: userOptions.which,
                    buttons: userOptions.buttons,
                    relatedTarget: userOptions.relatedTarget
                } : {},
                options || {});
        if (!opts.relatedTarget)
            opts.relatedTarget = $('body')[0];
        if (/(^mouse\w+$)|^(dbl)?click$|^contextmenu$/.test(event)) {
            if (userOptions && userOptions.button !== undefined)
                opts = $.extend(opts, {button: userOptions.button});
            args = getMouseEventArgs(event, opts);
            dispatch = dispatchMouseEvent;
        }
        else if (/^key\w+$/.test(event)) {
            if (userOptions && (userOptions.keyCode !== undefined || userOptions.charCode !== undefined))
                opts = $.extend(opts, {keyCode: userOptions.keyCode || 0, charCode: userOptions.charCode || 0});
            args = getKeyEventArgs(event, opts);
            dispatch = dispatchKeyEvent;
        }
        else if (/^touch\w+$/.test(event)) {
            args = getTouchEventArgs(event, $.extend(opts, {target: el}));
            dispatch = dispatchTouchEvent;
        }
        return dispatch(el, args);
    }

    /* NOTE: options = {
     [clientX: integer,]
     [clientY: integer,]
     [alt: true|false,]
     [ctrl: true|false,]
     [shift: true|false,]
     [meta: true|false,]
     [button: Util.BUTTON]
     }
     */


    // NOTE: mouse events
    exports.Simulator = {};

    exports.Simulator.click = function (el, options) {
        return simulateEvent(el, 'click', options, {
            button: Util.BUTTON.LEFT,
            buttons: Util.BUTTONS_PARAMETER.LEFT_BUTTON
        });
    };

    exports.Simulator.nativeClick = function (el, originClick) {
        raiseNativeClick(el, originClick);
    };

    exports.Simulator.dblclick = function (el, options) {
        return simulateEvent(el, 'dblclick', options, {
            button: Util.BUTTON.LEFT,
            buttons: Util.BUTTONS_PARAMETER.LEFT_BUTTON
        });
    };

    exports.Simulator.rightclick = function (el, options) {
        return simulateEvent(el, 'click', options, {
            button: Util.BUTTON.RIGHT,
            buttons: Util.BUTTONS_PARAMETER.RIGHT_BUTTON
        });
    };

    exports.Simulator.contextmenu = function (el, options) {
        return simulateEvent(el, 'contextmenu', options, {
            button: Util.BUTTON.RIGHT,
            which: Util.WHICH_PARAMETER.RIGHT_BUTTON,
            buttons: Util.BUTTONS_PARAMETER.RIGHT_BUTTON
        });
    };

    exports.Simulator.mousedown = function (el, options) {
        options = options || {};

        options.button = typeof options.button === 'undefined' ? Util.BUTTON.LEFT : options.button;
        options.which = typeof options.which === 'undefined' || options.button !== Util.BUTTON.RIGHT ? Util.WHICH_PARAMETER.LEFT_BUTTON : Util.WHICH_PARAMETER.RIGHT_BUTTON;
        options.buttons = typeof options.buttons === 'undefined' ? Util.BUTTONS_PARAMETER.LEFT_BUTTON : options.buttons;

        return simulateEvent(el, 'mousedown', options);
    };

    exports.Simulator.mouseup = function (el, options) {
        options = options || {};

        options.button = typeof options.button === 'undefined' ? Util.BUTTON.LEFT : options.button;
        options.which = typeof options.which === 'undefined' || options.button !== Util.BUTTON.RIGHT ? Util.WHICH_PARAMETER.LEFT_BUTTON : Util.WHICH_PARAMETER.RIGHT_BUTTON;
        options.buttons = typeof options.buttons === 'undefined' ? Util.BUTTONS_PARAMETER.LEFT_BUTTON : options.buttons;

        return simulateEvent(el, 'mouseup', options);
    };

    exports.Simulator.mouseover = function (el, options) {
        return simulateEvent(el, 'mouseover', options);
    };

    exports.Simulator.mousemove = function (el, options) {
        return simulateEvent(el, 'mousemove', options, {cancelable: false});
    };

    exports.Simulator.mouseout = function (el, options) {
        return simulateEvent(el, 'mouseout', options);
    };

    // NOTE: keyboard events
    exports.Simulator.keypress = function (el, options) {
        return simulateEvent(el, 'keypress', options);
    };

    exports.Simulator.keyup = function (el, options) {
        return simulateEvent(el, 'keyup', options);
    };

    exports.Simulator.keydown = function (el, options) {
        return simulateEvent(el, 'keydown', options);
    };

    exports.Simulator.input = function (el) {
        return dispatchEvent(el, 'input');
    };

    // NOTE: control events
    exports.Simulator.blur = function (el) {
        return dispatchEvent(el, 'blur', DISPATCHED_EVENT_FLAG);
    };

    exports.Simulator.focus = function (el) {
        return dispatchEvent(el, 'focus', DISPATCHED_EVENT_FLAG);
    };

    exports.Simulator.change = function (el) {
        return dispatchEvent(el, 'change', DISPATCHED_EVENT_FLAG);
    };

    exports.Simulator.submit = function (el) {
        return dispatchEvent(el, 'submit');
    };

    // NOTE: touch events
    exports.Simulator.touchstart = function (el, options) {
        return simulateEvent(el, 'touchstart', options);
    };

    exports.Simulator.touchend = function (el, options) {
        return simulateEvent(el, 'touchend', options);
    };

    exports.Simulator.touchmove = function (el, options) {
        return simulateEvent(el, 'touchmove', options);
    };
});

HammerheadClient.define('DOMSandbox.IFrame', function (require, exports) {
    var $ = require('jQuery'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        SharedConst = require('Shared.Const'),
        ServiceCommands = require('Shared.ServiceCommands'),
        Transport = require('Transport'),
        UrlUtil = require('UrlUtil'),
        Util = require('Util');

    // For iframes without src only!
    exports.IFRAME_READY_TO_INIT = 'iframeReadyToInit';
    exports.IFRAME_READY_TO_INIT_INTERNAL = 'iframeReadyToInitInternal';
    exports.IFRAME_DOCUMENT_CREATED = 'iframeDocumentCreated';
    exports.IFRAME_DOCUMENT_RECREATED = 'iframeDocumentRecreated';

    var IFRAME_WINDOW_INITED = 'hh_iwi_5d9138e9';

    var eventEmitter = new Util.EventEmitter();

    exports.on = eventEmitter.on.bind(eventEmitter);
    exports.off = eventEmitter.off.bind(eventEmitter);

    exports.isIframeInitialized = function (iframe) {
        var isFFIframeUninitialized = Util.isMozilla && iframe.contentWindow.document.readyState === 'uninitialized';

        return !isFFIframeUninitialized && !!iframe.contentDocument.documentElement;
    };

    exports.isWindowInited = function (window) {
        return window[IFRAME_WINDOW_INITED];
    };

    exports.iframeReadyToInitHandler = iframeReadyToInitHandler;

    function iframeReadyToInitHandler(e) {
        // Get and evaluate iframe task script
        Transport.syncServiceMsg({ cmd: ServiceCommands.GET_IFRAME_TASK_SCRIPT }, function (iFrameTaskScript) {
            e.iframe.contentWindow.eval.apply(e.iframe.contentWindow, [ iFrameTaskScript ]);
        });
    }

    eventEmitter.on(exports.IFRAME_READY_TO_INIT, iframeReadyToInitHandler);

    function raiseReadyToInitEvent(iframe) {
        if (UrlUtil.isIframeWithoutSrc(iframe)) {
            var iframeInitialized = exports.isIframeInitialized(iframe),
                iframeWindowInitialized = iframe.contentWindow[IFRAME_WINDOW_INITED];

            if (iframeInitialized && !iframeWindowInitialized) {
                // Ok, iframe fully loaded now, but Hammerhead not injected
                iframe.contentWindow[IFRAME_WINDOW_INITED] = true;

                // Rise this internal event to eval Hammerhead code script
                eventEmitter.emit(exports.IFRAME_READY_TO_INIT_INTERNAL, {
                    iframe: iframe
                });

                // Rise this event to eval "task" script and to call Hammerhead initialization method after
                eventEmitter.emit(exports.IFRAME_READY_TO_INIT, {
                    iframe: iframe
                });

                iframe.contentWindow[SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME]();
            } else if (!iframeInitialized) {
                // Even if iframe is not loaded (iframe.contentDocument.documentElement not exist) we should still
                // override document.write method, without Hammerhead initializing. This method can be called
                // before iframe fully loading, we are obliged to override it now
                if (iframe.contentDocument.write.toString() === NativeMethods.documentWrite.toString()) {
                    eventEmitter.emit(exports.IFRAME_DOCUMENT_CREATED, {
                        iframe: iframe
                    });
                }
            } else if (iframeWindowInitialized && (Util.isMozilla || Util.isIE)) {
                // IE recreates iframe document after document.write calling.
                // FireFox recreates iframe document during loading
//                if (iframe.contentDocument.write.toString() === NativeMethods.documentWrite.toString()) {
//                    eventEmitter.emit(exports.IFRAME_DOCUMENT_RECREATED, {
//                        iframe: iframe
//                    });
//                }
            }
        }

    }

    exports.iframeAddedToDom = function (el) {
        if (!Util.isShadowUIElement(el)) {
            raiseReadyToInitEvent(el);

            if (!Util.isWebKit && el.contentDocument) {
                $(el.contentDocument).ready(function () {
                    raiseReadyToInitEvent(el);
                });
            }
        }
    };

    exports.onIframeBeganToRun = function (iframe) {
        raiseReadyToInitEvent(iframe);
    };

    exports.overrideIframe = function ($el) {
        var el = $el[0];

        if (Util.isShadowUIElement(el))
            return;

        var src = $el.attr('src');

        if (!src || !UrlUtil.isSupportedProtocol(src)) {
            if (el.contentWindow) {
                raiseReadyToInitEvent(el);

                var readyHandler = function () {
                    if (el.contentWindow)
                        raiseReadyToInitEvent(el);
                };

                $el.bind('load', readyHandler);

                if (Util.isMozilla)
                    $(el.contentDocument).bind('ready', readyHandler);

            } else {
                var handler = function () {
                    if (!Util.isShadowUIElement(el)) {
                        if (Util.isCrossDomainIframe(el))
                            $el.unbind('load', handler);
                        else
                            raiseReadyToInitEvent(el);
                    }
                };

                if (Util.isElementInDocument(el))
                    raiseReadyToInitEvent(el);

                $el.bind('load', handler);
            }
        } else {
            if (Util.isElementInDocument(el))
                raiseReadyToInitEvent(el);

            $el.bind('load', function () {

                raiseReadyToInitEvent(this);
            });
        }
    };
});
/* global isIFrameWithoutSrc:true */
HammerheadClient.define('DOMSandbox.Message', function (require, exports) {
    var EventSandbox = require('DOMSandbox.Event'),
        JSON = require('JSON'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        UrlUtil = require('UrlUtil'),
        Util = require('Util');

    var messageType = {
        SERVICE: '5Gtrb',
        USER: 'qWip2'
    };

    var SERVICE_MSG_RECEIVED = 'received',
        PING_DELAY = 200;

    //NOTE: published for test purposes only
    exports.PING_IFRAME_TIMEOUT = 7000;
    exports.PING_IFRAME_MIN_TIMEOUT = 100;
    exports.SERVICE_MSG_RECEIVED = SERVICE_MSG_RECEIVED;

    var RECEIVE_MSG_FN = 'tc_rmf_375fb9e7';

    exports.MessageType = messageType;

    var eventEmitter = new Util.EventEmitter(),
        pingCallback = null,
        pingCmd = null;

    //NOTE: the window.top property may be changed after an iFrame is removed from DOM in IE, so we save it on script initializing
    var topWindow = window.top;

    exports.on = eventEmitter.on.bind(eventEmitter);
    exports.off = eventEmitter.off.bind(eventEmitter);

    exports.init = function (window) {
        function onMessage(e) {
            var data = typeof e.data === 'string' ? JSON.parse(e.data) : e.data;

            if (data.type === messageType.SERVICE && e.source) {
                if (pingCmd && data.message.cmd === pingCmd && data.message.isPingResponse) {
                    pingCallback();
                    pingCallback = null;
                    pingCmd = null;
                } else
                    eventEmitter.emit(SERVICE_MSG_RECEIVED, {message: data.message, source: e.source});
            }
        }

        EventSandbox.addInternalEventListener(window, ['message'], onMessage);

        window[RECEIVE_MSG_FN] = (isIFrameWithoutSrc || topWindow === window.self) ? onMessage : null;

        EventSandbox.setEventListenerWrapper(window, ['message'], onWindowMessage);
    };

    function onWindowMessage(e, originListener) {
        var resultEvt = {};

        /* jshint ignore:start */
        for (var key in e)
            resultEvt[key] = typeof e[key] === 'function' ? e[key].bind(e) : e[key];
        /* jshint ignore:end */

        var data = typeof e.data === 'string' ? JSON.parse(e.data) : e.data;

        if (data.type !== messageType.SERVICE) {
            var originUrl = UrlUtil.OriginLocation.get();

            if (data.targetUrl === '*' || UrlUtil.sameOriginCheck(originUrl, data.targetUrl)) {
                resultEvt.origin = data.originUrl;

                var isIE9 = Util.isIE && Util.browserVersion < 10;
                // IE9 can send only string values
                if (typeof data.message !== 'string' && (isIE9 || data.isStringMessage))
                    resultEvt.data = JSON.stringify(data.message);
                else
                    resultEvt.data = data.message;

                return originListener.call(window, resultEvt);
            }
        }
    }

    exports.setOnMessage = function (window, value) {
        if (typeof value === 'function') {
            this.storedOnMessageHandler = value;

            window.onmessage = function (e) {
                return onWindowMessage(e, value);
            };
        } else {
            this.storedOnMessageHandler = null;
            window.onmessage = null;
        }
    };

    exports.getOnMessage = function () {
        return this.storedOnMessageHandler;
    };

    exports.postMessage = function (contentWindow, args) {
        var targetUrl = args[1];

        if (Util.isCrossDomainWindows(window, contentWindow))
            args[1] = UrlUtil.getCrossDomainProxyUrl();
        else if (!UrlUtil.isSupportedProtocol(contentWindow.location))
            args[1] = '*';
        else {
            args[1] = UrlUtil.formatUrl({
                protocol: window.location.protocol,
                host: window.location.host
            });
        }

        args[0] = wrapMessage(messageType.USER, args[0], targetUrl);

        if (isIFrameWithoutSrc) {
            window.tc_cw_375fb9e7 = contentWindow;
            window.tc_a_375fb9e7 = args;

            return window.eval('window.tc_cw_375fb9e7.postMessage(window.tc_a_375fb9e7[0], window.tc_a_375fb9e7[1]); delete window.tc_cw_375fb9e7; delete window.tc_a_375fb9e7');
        } else
            return contentWindow.postMessage(args[0], args[1]);
    };

    //NOTE: in IE after an iFrame is removed from DOM the window.top property is equal to window.self
    function isIFrameRemoved() {
        return window.top === window.self && window !== topWindow;
    }

    exports.sendServiceMsg = function (msg, targetWindow) {
        var message = wrapMessage(messageType.SERVICE, msg);

        //NOTE: for iframes without src
        if (!isIFrameRemoved() && (isIFrameWithoutSrc || (!Util.isCrossDomainWindows(targetWindow, window) && targetWindow[RECEIVE_MSG_FN]))) {
            //NOTE: postMessage delay imitation
            NativeMethods.setTimeout.call(topWindow, function () {
                targetWindow[RECEIVE_MSG_FN]({
                    data: JSON.parse(JSON.stringify(message)), // Cloning message to prevent this modification
                    source: window
                });
            }, 10);

            return;
        }

        return targetWindow.postMessage(message, '*');
    };

    exports.pingIFrame = function (targetIFrame, pingMessageCommand, callback, shortWaiting) {
        var pingInterval = null,
            pingTimeout = null,
            targetWindow = null;

        function sendPingRequest() {
            if (targetIFrame.contentWindow) {
                targetWindow = targetIFrame.contentWindow;

                exports.sendServiceMsg({
                    cmd: pingCmd,
                    isPingRequest: true
                }, targetWindow);
            }
        }

        function cleanTimeouts() {
            window.clearInterval(pingInterval);
            window.clearTimeout(pingTimeout);

            pingCallback = null;
            pingCmd = null;
            pingInterval = null;
            pingTimeout = null;
        }

        pingTimeout = NativeMethods.setTimeout.call(window, function () {
            cleanTimeouts();
            callback(true);
        }, shortWaiting ? exports.PING_IFRAME_MIN_TIMEOUT : exports.PING_IFRAME_TIMEOUT);

        if (typeof callback === 'function') {
            pingCallback = function () {
                cleanTimeouts();
                callback();
            };

            pingCmd = pingMessageCommand;

            sendPingRequest();
            pingInterval = NativeMethods.setInterval.call(window, sendPingRequest, PING_DELAY);
        }
    };

    function wrapMessage(type, message, targetUrl) {
        var parsedOrigin = UrlUtil.OriginLocation.getParsed(),
            originUrl = UrlUtil.formatUrl({
                protocol: parsedOrigin.protocol,
                host: parsedOrigin.host
            });

        var result = {
            isStringMessage: typeof message === 'string',
            message: message,
            originUrl: originUrl,
            targetUrl: targetUrl,
            type: type
        };

        // IE9 can send only string values
        return (Util.isIE && Util.browserVersion < 10) ? JSON.stringify(result) : result;
    }
});
HammerheadClient.define('DOMSandbox.NativeMethods', function (require, exports) {
    function refreshDocumentMeths(doc) {
        doc = doc || document;

        /* jshint ignore:start */
        // Dom
        exports.createDocumentFragment = doc.createDocumentFragment || Document.prototype.createDocumentFragment;
        exports.createElement = doc.createElement || Document.prototype.createElement;
        exports.createElementNS = doc.createElementNS || Document.prototype.createElementNS;
        exports.documentOpen = doc.open || Document.prototype.open;
        exports.documentClose = doc.close || Document.prototype.close;
        exports.documentWrite = doc.write || Document.prototype.write;
        exports.documentWriteLn = doc.writeln || Document.prototype.writeln;
        exports.elementFromPoint = doc.elementFromPoint || Document.prototype.elementFromPoint;
        exports.getElementById = doc.getElementById || Document.prototype.getElementById;
        exports.getElementsByClassName = doc.getElementsByClassName || Document.prototype.getElementsByClassName;
        exports.getElementsByName = doc.getElementsByName || Document.prototype.getElementsByName;

        exports.getElementsByTagName = doc.getElementsByTagName || Document.prototype.getElementsByTagName;
        exports.querySelector = doc.querySelector || Document.prototype.querySelector;
        exports.querySelectorAll = doc.querySelectorAll || Document.prototype.querySelectorAll;

        // Event
        exports.documentAddEventListener = doc.addEventListener || Document.prototype.addEventListener;
        exports.documentRemoveEventListener = doc.removeEventListener || Document.prototype.removeEventListener;
        /* jshint ignore:end */
    }

    function refreshElementMeths(doc) {
        var createElement = function (tagName) {
                return exports.createElement.call(doc || document, tagName);
            },
            nativeElement = createElement('div');

        // Dom
        exports.appendChild = nativeElement.appendChild;
        exports.cloneNode = nativeElement.cloneNode;
        exports.elementGetElementsByClassName = nativeElement.getElementsByClassName;
        exports.elementGetElementsByTagName = nativeElement.getElementsByTagName;
        exports.elementQuerySelector = nativeElement.querySelector;
        exports.elementQuerySelectorAll = nativeElement.querySelectorAll;
        exports.getAttribute = nativeElement.getAttribute;
        exports.getAttributeNS = nativeElement.getAttributeNS;
        exports.insertAdjacentHTML = nativeElement.insertAdjacentHTML;
        exports.insertBefore = nativeElement.insertBefore;
        exports.insertCell = createElement('tr').insertCell;
        exports.insertTableRow = createElement('table').insertRow;
        exports.insertTBodyRow = createElement('tbody').insertRow;
        exports.removeAttribute = nativeElement.removeAttribute;
        exports.removeAttributeNS = nativeElement.removeAttributeNS;
        exports.removeChild = nativeElement.removeChild;
        exports.setAttribute = nativeElement.setAttribute;
        exports.setAttributeNS = nativeElement.setAttributeNS;

        // Event
        exports.addEventListener = nativeElement.addEventListener;
        exports.attachEvent = nativeElement.attachEvent;
        exports.detachEvent = nativeElement.detachEvent;
        exports.blur = nativeElement.blur;
        exports.click = nativeElement.click;
        exports.dispatchEvent = nativeElement.dispatchEvent;
        exports.fireEvent = nativeElement.fireEvent;
        exports.focus = nativeElement.focus;
        exports.removeEventListener = nativeElement.removeEventListener;
        exports.select = window.TextRange ? createElement('body').createTextRange().select : null;
        exports.setSelectionRange = createElement('input').setSelectionRange;
        exports.textAreaSetSelectionRange = createElement('textarea').setSelectionRange;
    }

    function refreshWindowMeths(win) {
        win = win || window;
        /* jshint ignore:start */
        // Dom
        exports.eval = win.eval;
        exports.eventSourceCtor = win.EventSource;
        exports.formSubmit = win.HTMLFormElement.prototype.submit;
        exports.historyPushState = win.history ? win.history.pushState : null;
        exports.historyReplaceState = win.history ? win.history.replaceState : null;
        exports.imageCtor = win.Image;
        exports.mutationObserverCtor = win.MutationObserver;
        exports.postMessage = win.postMessage || Window.prototype.postMessage;
        exports.windowOpen = win.open || Window.prototype.open;
        exports.workerCtor = win.Worker;
        exports.setTimeout = win.setTimeout || Window.prototype.setTimeout;
        exports.setInterval = win.setInterval || Window.prototype.setInterval;
        exports.XMLHttpRequest = win.XMLHttpRequest;
        exports.registerProtocolHandler = win.navigator.registerProtocolHandler;
        exports.registerServiceWorker = (win.navigator && win.navigator.serviceWorker) ? win.navigator.serviceWorker.register : null; 

        // Event
        exports.windowAddEventListener = win.addEventListener || Window.prototype.addEventListener;
        exports.windowRemoveEventListener = win.removeEventListener || Window.prototype.removeEventListener;

        // Canvas
        exports.canvasContextDrawImage = win.CanvasRenderingContext2D.prototype.drawImage;
        /* jshint ignore:end */
    }

    exports.refreshDocument = refreshDocumentMeths;
    exports.refreshElementMeths = refreshElementMeths;
    exports.refreshWindowMeths = refreshWindowMeths;

    refreshDocumentMeths();
    refreshElementMeths();
    refreshWindowMeths();

    exports.restoreNativeDocumentMeth = function (document) {
        document.createDocumentFragment = exports.createDocumentFragment;
        document.createElement = exports.createElement;
        document.createElementNS = exports.createElementNS;
        document.open = exports.documentOpen;
        document.close = exports.documentClose;
        document.write = exports.documentWrite;
        document.writeln = exports.documentWriteLn;
        document.elementFromPoint = exports.elementFromPoint;
        document.getElementById = exports.getElementById;
        document.getElementsByClassName = exports.getElementsByClassName;
        document.getElementsByName = exports.getElementsByName;
        document.getElementsByTagName = exports.getElementsByTagName;
        document.querySelector = exports.querySelector;
        document.querySelectorAll = exports.querySelectorAll;

        // Event
        document.addEventListener = exports.documentAddEventListener;
        document.removeEventListener = exports.documentRemoveEventListener;
    };
});
HammerheadClient.define('DOMSandbox.ShadowUI', function (require, exports) {
    var $ = require('jQuery'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        PageProc = require('Shared.PageProc'),
        SharedConst = require('Shared.Const'),
        Util = require('Util');

    // Const
    var CLASSNAME_REGEX = /\.((?:\\.|[-\w]|[^\x00-\xa0])+)/g,
        ROOT_CLASS = 'root',
        ROOT_ID = 'root',
        HIDDEN_CLASS = 'hidden',
        BLIND_CLASS = 'blind';

    // Globals
    var $root = null,
        filter = true;

    function bringRootToWindowTopLeft() {
        if ($root.parents().filter(function () {
            return /fixed|relative|absolute/.test($(this).css('position'));
        }).length) {
            var rootOffset = Util.getOffsetPosition($root[0]);

            if (rootOffset.left !== 0 || rootOffset.top !== 0) {
                $root.css('left', ((parseFloat($root.css('left')) || 0) - rootOffset.left).toString() + 'px');
                $root.css('top', ((parseFloat($root.css('top')) || 0) - rootOffset.top).toString() + 'px');
            }
        }
    }

    function filterElement(element) {
        if (!filter || !element || element === document || element === window)
            return element;

        return Util.isShadowUIElement(element) ? null : element;
    }

    function filterNodeList(nodeList) {
        var filteredList = [],
            nlLength = nodeList.length;

        for (var i = 0; i < nlLength; i++) {
            var element = filterElement(nodeList[i]);

            if (element)
                filteredList.push(element);
        }

        filteredList.item = function (index) {
            return index >= filteredList.length ? null : filteredList[index];
        };

        filteredList.namedItem = function (name) {
            return nodeList.namedItem(name);
        };

        return filteredList.length === nlLength ? nodeList : filteredList;
    }

    //  --------- Move to the testcafe ------------
    exports.bind = function ($elem, event, handler) {
        $elem.each(function () {
            if ($.isWindow(this))
                NativeMethods.windowAddEventListener.call(this, event, handler, true);
            else
                NativeMethods.addEventListener.call(this, event, handler, true);
        });

        return $elem;
    };

    exports.unbind = function ($elem, event, handler) {
        $elem.each(function () {
            if ($.isWindow(this))
                NativeMethods.windowRemoveEventListener.call(this, event, handler, true);
            else
                NativeMethods.removeEventListener.call(this, event, handler, true);
        });

        return $elem;
    };
    //  ---------------------------------------------

    exports.getRoot = function () {
        if (!$root || /* T225944 */ !$.contains(document.body, $root[0])) {
            exports.overrideElement(document.body);

            if (!$root) {
                //B254893
                $root = $('<div>').attr('id', ROOT_ID).attr('contenteditable', 'false').appendTo(document.body);

                $root.attr('id', exports.patchClassNames(ROOT_ID));
                exports.addClass($root, ROOT_CLASS);

                var root = $root[0];

                for (var i = 0; i < PageProc.EVENTS.length; i++) {
                    if (root.addEventListener)
                        root.addEventListener(PageProc.EVENTS[i], Util.stopPropagation);
                    else
                        root.attachEvent(PageProc.EVENTS[i], Util.stopPropagation);
                }

                bringRootToWindowTopLeft();
                $(document).ready(bringRootToWindowTopLeft);
            }
            else
                $root.appendTo(document.body);
        }

        return $root;
    };

    exports.init = function (window, document) {
        (function overrideDocument() {
            document.elementFromPoint = function () {
                //T212974
                exports.addClass(exports.getRoot(), HIDDEN_CLASS);
                var res = filterElement(NativeMethods.elementFromPoint.apply(document, arguments));
                exports.removeClass(exports.getRoot(), HIDDEN_CLASS);
                return res;
            };

            document.getElementById = function () {
                return filterElement(NativeMethods.getElementById.apply(document, arguments));
            };

            document.getElementsByClassName = function () {
                return filterNodeList(NativeMethods.getElementsByClassName.apply(document, arguments));
            };

            document.getElementsByName = function () {
                return filterNodeList(NativeMethods.getElementsByName.apply(document, arguments));
            };

            document.getElementsByTagName = function () {
                return filterNodeList(NativeMethods.getElementsByTagName.apply(document, arguments));
            };

            document.querySelector = function () {
                return filterElement(NativeMethods.querySelector.apply(document, arguments));
            };

            document.querySelectorAll = function () {
                return filterNodeList(NativeMethods.querySelectorAll.apply(document, arguments));
            };

            // T195358
            document.querySelectorAll.toString = function () {
                return NativeMethods.querySelectorAll.toString();
            };

            document.getElementsByClassName.toString = function () {
                return NativeMethods.getElementsByClassName.toString();
            };
        })();
    };

    exports.onBodyContentChanged = function () {
        if ($root) {
            if (!$root.closest('html').length)
                $root.appendTo(document.body);
        }
    };

    //NOTE: fix for B239138 - unroll.me 'Cannot read property 'document' of null' error raised during recording
    //There were an issue then document.body was replaced, so we need to reattach UI to new body manually
    exports.onBodyElementMutation = function () {
        if ($root) {
            if ($root.parent()[0] !== document.body) {
                exports.overrideElement(document.body);
                $root.appendTo(document.body);
            }
        }
    };

    exports.overrideElement = function (el) {
        var tagName = el && el.tagName && el.tagName.toLowerCase();

        if (tagName && (tagName === 'body' || tagName === 'head')) {
            el.getElementsByClassName = function () {
                return filterNodeList(NativeMethods.elementGetElementsByClassName.apply(el, arguments));
            };

            el.getElementsByTagName = function () {
                return filterNodeList(NativeMethods.elementGetElementsByTagName.apply(el, arguments));
            };

            el.querySelector = function () {
                return filterElement(NativeMethods.elementQuerySelector.apply(el, arguments));
            };

            el.querySelectorAll = function () {
                return filterNodeList(NativeMethods.elementQuerySelectorAll.apply(el, arguments));
            };
        }
    };

    // Accessors
    exports.getFirstChild = function (el) {
        var childNodes = filterNodeList(el.childNodes);

        return (childNodes.length && childNodes[0]) ? childNodes[0] : null;
    };

    exports.getFirstElementChild = function (el) {
        var childNodes = filterNodeList(el.childNodes),
            cnLength = childNodes.length;

        for (var i = 0; i < cnLength; i++) {
            if (childNodes[i].nodeType === 1)
                return childNodes[i];
        }

        return null;
    };

    exports.getLastChild = function (el) {
        var childNodes = filterNodeList(el.childNodes),
            index = childNodes.length - 1;

        return index >= 0 ? childNodes[index] : null;
    };

    exports.getLastElementChild = function (el) {
        var childNodes = filterNodeList(el.childNodes),
            cnLength = childNodes.length;

        for (var i = cnLength - 1; i >= 0; i--) {
            if (childNodes[i].nodeType === 1)
                return childNodes[i];
        }

        return null;
    };

    // Utils
    exports.checkElementsPosition = function (collection) {
        if (collection.length) {
            var parent = collection[0].parentNode || collection[0].parentElement,
                shadowUIElements = [];

            if (parent) {
                for (var i = 0; i < collection.length; i++) {
                    if (Util.isShadowUIElement(collection[i]))
                        shadowUIElements.push(collection[i]);
                }

                for (var j = 0; j < shadowUIElements.length; j++)
                    NativeMethods.appendChild.call(parent, shadowUIElements[j]);
            }
        }
    };

    exports.isShadowContainer = function (el) {
        if (Util.isDomElement(el)) {
            var tagName = el.tagName.toLowerCase();

            return tagName === 'head' || tagName === 'body';
        }

        return false;
    };

    exports.isShadowContainerCollection = function (collection) {
        var parent = null;

        try {
            if (collection.length && !Util.isWindowInstance(collection) && collection[0] && collection[0].nodeType) {
                parent = collection[0].parentNode || collection[0].parentElement;

                if (parent && (parent.childNodes === collection || parent.children === collection))
                    return exports.isShadowContainer(parent);
            }
        } catch (e) {
        }

        return false;
    };

    exports.isShadowUIMutation = function (mutation) {
        if (mutation.removedNodes && mutation.removedNodes.length === 1) {
            if (Util.isShadowUIElement(mutation.removedNodes[0]))
                return true;
        }

        if (mutation.addedNodes && mutation.addedNodes.length === 1) {
            if (Util.isShadowUIElement(mutation.addedNodes[0]))
                return true;
        }

        return false;
    };

    // API
    exports.addClass = function ($elem, value) {
        $elem.addClass(exports.patchClassNames(value));
    };

    exports.hasClass = function ($elem, value) {
        return $elem.hasClass(exports.patchClassNames(value));
    };

    exports.patchClassNames = function (value) {
        var names = value.split(/\s+/);

        for (var i = 0; i < names.length; i++)
            names[i] += SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX;

        return names.join(' ');
    };

    exports.removeClass = function ($elem, value) {
        $elem.removeClass(exports.patchClassNames(value));
    };

    exports.select = function (selector, $parent) {
        filter = false;

        //NOTE: append UI unique postfix to classnames in selector
        var patchedSelector = selector.replace(CLASSNAME_REGEX, function (className) {
            return className + SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX;
        });

        var $res = $parent ? $parent.find(patchedSelector) : $(patchedSelector);

        filter = true;

        return $res;
    };

    exports.setBlind = function (value) {
        if (value)
            exports.addClass(exports.getRoot(), BLIND_CLASS);
        else
            exports.removeClass(exports.getRoot(), BLIND_CLASS);

    };
});
HammerheadClient.define('DOMSandbox.Util', function (require, exports) {
    var $ = require('jQuery'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        PageProc = require('Shared.PageProc'),
        SharedConst = require('Shared.Const'),
        UrlUtil = require('UrlUtil'),
        Util = require('Util');

    var TEXT_NODE_COMMENT_MARKER = '16c959db8754',
        INIT_SCRIPT_FOR_IFRAME_TEMPLATE =
            '<script class="' + SharedConst.TEST_CAFE_SCRIPT_CLASSNAME + '" type="text/javascript">' +
            'var parentHammerhead = null;' +
            'try {' +
            '   parentHammerhead = window.parent.Hammerhead;' +
            '} catch(e) {}' +
            'if (parentHammerhead) parentHammerhead._rebindDomSandboxToIframe(window.frameElement);' +
            'var script = document.currentScript || document.scripts[document.scripts.length - 1];' +
            'script.parentNode.removeChild(script);' +
            '<\/script>';

    exports.BROWSER_HAS_ELEMENT_PROTOTYPE = window.Element && Element.prototype && !$.browser.mozilla;
    exports.INIT_SCRIPT_FOR_IFRAME_TEMPLATE = INIT_SCRIPT_FOR_IFRAME_TEMPLATE;

    exports.isPageHtml = isPageHtml;

    var htmlDocument = document.implementation.createHTMLDocument('title'),
        htmlParser = htmlDocument.createDocumentFragment();

    PageProc.on(PageProc.HTML_PROCESSING_REQUIRED, function (html, callback) {
        if (!exports.isPageHtml(html))
            html = '<html><body>' + html + '</body></html>';

        callback(exports.processHtml(html));
    });

    function getHtmlDocument() {
        try {
            // IE bug: access denied
            if (htmlDocument.location)
                htmlDocument.location.toString();
        } catch (e) {
            htmlDocument = document.implementation.createHTMLDocument('title');
            htmlParser = htmlDocument.createDocumentFragment();
        }

        return htmlDocument;
    }

    function isPageHtml(html) {
        return /^\s*(<\s*(!doctype|html|head|body)[^>]*>)/i.test(html);
    }

    function processPageTag(pageTagHtml, process) {
        pageTagHtml = pageTagHtml.replace(/^(\s*<\s*)(head|body|html)/i, '$1fakeTagName_$2');

        return process(pageTagHtml).replace(/<\/fakeTagName_[\s\S]+$/i, '').replace(/fakeTagName_/i, '');
    }

    function processPageHtml(html, process) {
        var doctypeRegEx = /^(\s*<\s*!doctype[^>]*>)([\s\S]*)$/i,
            headBodyRegEx = /^(\s*<\s*(head|body)[^>]*>)([\s\S]*?)(<\s*\/(head|body)\s*>\s*)?$/i,
            htmlContentRegEx = /^(\s*<\s*head[^>]*>)([\s\S]*?)(<\s*\/head\s*>\s*<\s*body[^>]*>)([\s\S]*?)(<\s*\/body\s*>\s*)?$/i,
            htmlRegEx = /^(\s*<\s*html[^>]*>)([\s\S]*?)(<\s*\/html\s*>\s*)?$/i;

        var doctypeMatches = html.match(doctypeRegEx);

        if (doctypeMatches)
            return doctypeMatches[1] + process(doctypeMatches[2]);

        var htmlMatches = html.match(htmlRegEx);

        if (htmlMatches)
            return [processPageTag(htmlMatches[1], process), process(htmlMatches[2], 'html'), htmlMatches[3]].join('');

        var htmlContentMatches = html.match(htmlContentRegEx);

        if (htmlContentMatches) {
            return [htmlContentMatches[1], process(htmlContentMatches[2], 'head'), htmlContentMatches[3],
                process(htmlContentMatches[4], 'body'), htmlContentMatches[5]].join('');
        }

        var headBodyMatches = html.match(headBodyRegEx);

        if (headBodyMatches)
            return [processPageTag(headBodyMatches[1], process), process(headBodyMatches[3], headBodyMatches[2]), headBodyMatches[4]].join('');
    }

    function wrapTextNodes(html) {
        var textNodeRegEx = /(<\s*(table|tbody|\/tbody|\/tfoot|\/thead|\/tr|tfoot|thead|tr|\/td)[^>]*>)(\s*[^<\s]+[^<]*)(?=<)/ig,
            index = 0;

        return html.replace(textNodeRegEx, function (str, p1, p2, p3) {
            var marker = TEXT_NODE_COMMENT_MARKER + (index++).toString();

            return p1 + '<!--' + marker + p3 + marker + '-->';
        });
    }

    function unwrapTextNodes(html) {
        var i = 0,
            marker = '';

        do {
            marker = TEXT_NODE_COMMENT_MARKER + i;
            html = html.replace('<!--' + marker, '').replace(marker + '-->', '');
        } while (html.indexOf(TEXT_NODE_COMMENT_MARKER + (++i)) !== -1);

        return html;
    }

    function processHtml(html, parentTag, process) {
        html = wrapTextNodes(html);

        var container = getHtmlDocument().createElement('div');

        htmlParser.innerHTML = '';
        NativeMethods.appendChild.call(htmlParser, container);

        parentTag = parentTag ? parentTag.toLowerCase() : '';

        var isRow = parentTag === 'tr',
            isTable = parentTag === 'table' || parentTag === 'tbody',
            isScript = parentTag === 'script';

        if (isTable)
            html = '<table>' + html + '</table>';
        else if (isRow)
            html = '<table><tr>' + html + '</tr></table>';
        else if (isScript)
            html = '<script>' + html + '</script>';

        container.innerHTML = html;

        if (process(container))
            html = container.innerHTML;

        if (isTable)
            html = html.replace(/^<table>(<tbody>)?|(<\/tbody>)?<\/table>$/ig, '');
        else if (isRow)
            html = html.replace(/^<table>(<tbody>)?<tr>|<\/tr>(<\/tbody>)?<\/table>$/ig, '');
        else if (isScript)
            html = html.replace(/^<script>|<\/script>$/ig, '');

        return unwrapTextNodes(html);
    }

    function AttributesWrapper(attributes) {
        var length = 0;

        for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];

            if (!Util.isHammerheadAttr(attr.name)) {
                var storedAttrName = attributes[PageProc.getStoredAttrName(attr.name)];

                if (storedAttrName) {
                    attr = attr.cloneNode();
                    attr.value = storedAttrName.value;
                    Object.defineProperty(this, attr.name, {value: attr});
                }

                Object.defineProperty(this, length, {value: attr});
                length++;
            }
        }

        Object.defineProperty(this, 'length', {value: length});

        this.item = function (index) {
            return this[index];
        };

        for (var funcName in attributes) {
            if (typeof this[funcName] === 'function' && funcName !== 'item')
                this[funcName] = attributes[funcName].bind(attributes);
        }
    }

    exports.cleanUpHtml = function (html, parentTag) {
        if (isPageHtml(html))
            return processPageHtml(html, exports.cleanUpHtml);

        return processHtml(html, parentTag, function (container) {
            var changed = false;

            for (var i = 0; i < PageProc.URL_ATTRS.length; i++) {
                var attr = PageProc.URL_ATTRS[i],
                    storedAttr = PageProc.getStoredAttrName(attr),
                    $els = $(container).find('[' + storedAttr + ']');

                for (var j = 0; j < $els.length; j++) {
                    var el = $els[j];

                    if (el.hasAttribute(attr)) {
                        NativeMethods.setAttribute.call(el, attr, NativeMethods.getAttribute.call(el, storedAttr));
                        NativeMethods.removeAttribute.call(el, storedAttr);

                        changed = true;
                    }
                }
            }

            var $container = $(container);

            $container.find('[class*="' + SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX + '"]').each(function () {
                $(this).remove();

                changed = true;
            });

            $container.find('script').each(function () {
                var innerHTML = this.innerHTML;

                if (PageProc.SCRIPT_HEADER_REG_EX.test(innerHTML)) {
                    this.innerHTML = innerHTML.replace(PageProc.SCRIPT_HEADER_REG_EX, '');

                    changed = true;
                }
            });

            $container.find('[' + SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR + ']').each(function () {
                NativeMethods.removeAttribute.call(this, SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR);

                changed = true;
            });

            if (parentTag === 'head' || parentTag === 'body') {
                if (container.innerHTML.indexOf(INIT_SCRIPT_FOR_IFRAME_TEMPLATE) !== -1) {
                    container.innerHTML = container.innerHTML.replace(INIT_SCRIPT_FOR_IFRAME_TEMPLATE, '');

                    changed = true;
                }
            }

            return changed;
        });
    };

    exports.processHtml = function (html, parentTag) {
        if (isPageHtml(html))
            return processPageHtml(html, exports.processHtml);

        return processHtml(html, parentTag, function (container) {
            //NOTE: we check this condition to avoid unnecessary calling the querySelectorAll function
            if (container.children.length === 1 && container.children[0].children && !container.children[0].children.length)
                PageProc.processElement(container.children[0], UrlUtil.convertToProxyUrl);
            else {
                var children = container.querySelectorAll('*');

                for (var i = 0; i < children.length; i++)
                    PageProc.processElement(children[i], UrlUtil.convertToProxyUrl);
            }

            if (parentTag === 'head' || parentTag === 'body')
                container.innerHTML = INIT_SCRIPT_FOR_IFRAME_TEMPLATE + container.innerHTML;

            return true;
        });
    };

    exports.createPropertyDesc = function (descBase) {
        descBase.configurable = true;
        descBase.enumerable = true;
        return descBase;
    };

    exports.getAttributesProperty = function (el) {
        for (var i = 0; i < el.attributes.length; i++) {
            if (Util.isHammerheadAttr(el.attributes[i].name)) {
                AttributesWrapper.prototype = el.attributes;

                return new AttributesWrapper(el.attributes);
            }
        }

        return el.attributes;
    };

    exports.isWellFormattedHtml = function (html) {
        Array.prototype.last = function () {
            return this[this.length - 1];
        };

        Array.prototype.contains = function (item) {
            return this.indexOf(item) !== -1;
        };

        var parseStartTag = function (tag, tagName, attributes, unary) {
            if (!voidElements.contains(tagName)) {
                if (!unary) {
                    tagName = tagName.toLowerCase();
                    tagStack.push(tagName);
                }
            }
        };

        var parseEndTag = function (tag, tagName) {
            tagName = tagName.toLowerCase();

            if (tagName === tagStack.last()) {
                tagStack.pop();
            } else if (selfClosedTags.contains(tagStack.last())) {
                tagStack.pop();
                parseEndTag(tag, tagName);
            } else if (voidElements.contains(tagName)) {
                throw new Error('Empty tags cannot have end-closed tag part');
            } else {
                throw new Error('Cannot find open tag for ' + tagStack.last());
            }
        };

        var startTagReg = /^<(\w+)([\s\S]*?)(\/?)>/,
            endTagReg = /^<\/(\w+)[^>]*>/,
            doctypeReg = /^<!doctype[^>]*>/i;

        //http://www.w3.org/TR/html5/syntax.html#void-elements
        var voidElements = ['area', 'base', 'basefont', 'br', 'col', 'embed', 'frame', 'hr', 'img', 'input', 'keygen', 'isindex', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

        //http://www.w3.org/TR/html5/syntax.html#raw-text-elements
        var rawTextElements = ['script', 'style'];

        //Real cases are very hard - http://www.w3.org/TR/html5/syntax.html#optional-tags
        //Use a simplified algorithm
        //Also not check self-closed elements for SVG(http://www.w3.org/TR/SVG/struct.html) and MathML(http://www.w3.org/wiki/MathML/Elements)
        var selfClosedTags = ['colgroup', 'dd', 'dt', 'li', 'options', 'p', 'td', 'tfoot', 'th', 'thead', 'tr'];

        var BEGIN_COMMENT = '<!--',
            END_COMMENT = '-->',
            BEGIN_TAG = '<',
            END_TAG = '</',
            DOCTYPE_DECLARATION = '<!';

        var charIndex,
            isPlanText,
            match,
            tagStack = [],
            previousStepHtml = html,
            wellFormatted = true;

        try {
            while (html) {
                isPlanText = true;

                // Not in a script or style element
                if (!tagStack.last() || !rawTextElements.contains(tagStack.last())) {
                    // html comment
                    if (html.indexOf(BEGIN_COMMENT) === 0) {
                        charIndex = html.indexOf(END_COMMENT);
                        html = html.substring(charIndex + 3);
                        isPlanText = false;
                    }
                    // doctype declaration
                    else if (html.indexOf(DOCTYPE_DECLARATION) === 0) {
                        match = html.match(doctypeReg);

                        if (match) {
                            html = html.substring(match[0].length);
                            isPlanText = false;
                        }
                    }
                    // end tag
                    else if (html.indexOf(END_TAG) === 0) {
                        match = html.match(endTagReg);

                        if (match) {
                            html = html.substring(match[0].length);
                            match[0].replace(endTagReg, parseEndTag);
                            isPlanText = false;
                        }

                        // start tag
                    } else if (html.indexOf(BEGIN_TAG) === 0) {
                        match = html.match(startTagReg);

                        if (match) {
                            html = html.substring(match[0].length);
                            match[0].replace(startTagReg, parseStartTag);
                            isPlanText = false;
                        }
                    }

                    if (isPlanText) {
                        charIndex = html.indexOf(BEGIN_TAG);
                        html = charIndex === -1 ? '' : html.substring(charIndex);
                    }

                } else {
                    var tagContentReg = new RegExp('^([\\s\\S]*?)<\/' + tagStack.last() + '[^>]*>');

                    match = html.match(tagContentReg);

                    if (match) {
                        html = html.substring(match[0].length);
                        parseEndTag('', tagStack.last());
                    } else
                        throw new Error('Cannot process rawTextElement content');
                }

                if (html === previousStepHtml)
                    throw new Error('Html parser error');

                previousStepHtml = html;
            }
            if (tagStack.last())
                throw new Error('There are non closed tag -' + tagStack.last());
        } catch (err) {
            wellFormatted = false;
        }

        delete Array.prototype.last;
        delete Array.prototype.contains;

        return wellFormatted;
    };
});

HammerheadClient.define('DOMSandbox.Xhr', function (require, exports) {
    var NativeMethods = require('DOMSandbox.NativeMethods'),
        Settings = require('Settings'),
        SharedConst = require('Shared.Const'),
        UrlUtil = require('UrlUtil'),
        Util = require('Util');

    var TEST_CAFE_SERVICE_MSG_REQUEST_FLAG = 'is_tc_req-c8f5bd4f',
        XHR_PROPERTY_ACCESS_ERROR = "INVALID_STATE_ERR";

    var corsSupported = false;

    //Event
    exports.XHR_COMPLETED = 'xhrCompleted';
    exports.XHR_ERROR = 'xhrError';
    exports.XHR_SEND = 'xhrSend';

    exports.eventEmitter = exports.eventEmitter || new Util.EventEmitter();

    exports.on = exports.eventEmitter.on.bind(exports.eventEmitter);

    // NOTE: We should wrap xhr response (B236741)
    function XMLHttpRequestWrapper(xhr) {
        var eventHandlers = [];

        function wrapFunc(xhr, xhrWrapper, funcName) {
            xhrWrapper[funcName] = function () {
                var args = Array.prototype.slice.call(arguments),
                    isFunc = typeof args[1] === 'function';

                if (funcName === 'addEventListener' && isFunc) {
                    var originHandler = args[1],
                        wrappedHandler = function () {
                            originHandler.apply(xhrWrapper, arguments);
                        };

                    args[1] = wrappedHandler;

                    eventHandlers.push({
                        origin: originHandler,
                        wrapped: wrappedHandler
                    });
                } else if (funcName === 'removeEventListener' && isFunc) {
                    for (var i = 0; i < eventHandlers.length; i++) {
                        if (eventHandlers[i].origin === args[1]) {
                            args[1] = eventHandlers[i].wrapped;
                            eventHandlers.splice(i, 1);

                            break;
                        }
                    }
                }

                return xhr[funcName].apply(xhr, args);
            };
        }

        function wrapProp(xhr, xhrWrapper, propName) {
            Object.defineProperty(xhrWrapper, propName, {
                get: function () {
                    if (propName.indexOf('on') === 0)
                        return typeof xhr[propName] === 'function' ? xhr[propName]('get') : xhr[propName];
                    else
                        return xhr[propName];
                },
                set: function (value) {
                    if (propName.indexOf('on') === 0) {
                        xhr[propName] = typeof value !== 'function' ? value : (function (func) {
                            return function () {
                                return arguments[0] === 'get' ? func : func.apply(xhrWrapper, arguments);
                            };
                        })(value);
                    } else
                        xhr[propName] = value;

                    return xhr[propName];
                }
            });
        }

        for (var prop in xhr) {
            if (!Object.prototype.hasOwnProperty(prop)) {
                var isFunction = false;

                //in some cases xhr properties reading leads to error throwing (B253550, T177746)
                //if it happens we wrap these properties without reading them
                try {
                    isFunction = typeof xhr[prop] === 'function';
                }
                catch (e) {
                    if (e.message.indexOf(XHR_PROPERTY_ACCESS_ERROR) < 0)
                        throw e;
                }

                if (isFunction)
                    wrapFunc(xhr, this, prop);
                else
                    wrapProp(xhr, this, prop);
            }
        }
    }

    //Barrier
    function proxyXhrMethods(xhr) {
        var open = xhr.open,
            send = xhr.send;

        //NOTE: redirect all requests to TestCafe proxy and ensure that request don't violate Same Origin Policy
        xhr.open = function (method, url, async, user, password) {
            if (url === Settings.SERVICE_MSG_URL)
                xhr[TEST_CAFE_SERVICE_MSG_REQUEST_FLAG] = true;
            else {
                try {
                    url = UrlUtil.getProxyUrl(url);
                } catch (err) {
                    exports.eventEmitter.emit(exports.XHR_ERROR, {
                        err: err,
                        xhr: xhr
                    });

                    return;
                }
            }

            //NOTE: the 'async' argument is true by default. But when you send 'undefined' as the 'async' argument
            // a browser (Chrome, FF) casts it to 'false', and request becomes synchronous (B238528).
            if (arguments.length === 2)
                open.call(xhr, method, url);
            else
                open.call(xhr, method, url, async, user, password);
        };

        xhr.send = function () {
            if (!xhr[TEST_CAFE_SERVICE_MSG_REQUEST_FLAG]) {
                exports.eventEmitter.emit(exports.XHR_SEND, {
                    xhr: xhr
                });

                var orscHandler = function () {
                    if (xhr.readyState === 4)
                        exports.eventEmitter.emit(exports.XHR_COMPLETED, { xhr: xhr });
                };

                //NOTE: if we're in sync mode or it's in cache and has been retrieved directly (IE6 & IE7)
                //we need to manually fire the callback
                if (xhr.readyState === 4)
                    orscHandler();
                else {
                    //NOTE: get out of current execution tick and when proxy onreadystatechange.
                    //Because e.g. jQuery assigns handler after send() was called.
                    NativeMethods.setTimeout.call(window, function () {
                        //NOTE: if state already changed we just call handler without onreadystatechange proxying
                        if (xhr.readyState === 4)
                            orscHandler();
                        else if (typeof xhr.onreadystatechange === 'function') {
                            var originalHandler = xhr.onreadystatechange;

                            xhr.onreadystatechange = function (progress) {
                                orscHandler();
                                originalHandler.call(xhr, progress);
                            };
                        } else if (xhr.addEventListener)
                            xhr.addEventListener('readystatechange', orscHandler, false);
                        else
                            xhr.attachEvent('onreadystatechange', orscHandler);

                    }, 0);
                }
            }

            /*jshint bitwise: false*/
            //NOTE: add XHR request mark, so proxy can recognize it as XHR request.
            //Due to the fact that all requests are passed to the proxy we need to perform all Same Origin Policy
            //compliance checks on server side. So we pass CORS support flag as well to inform proxy that it can
            //analyze Access-Control_Allow_Origin flag and skip "preflight" requests.
            xhr.setRequestHeader(SharedConst.XHR_REQUEST_MARKER_HEADER,
                (corsSupported ? SharedConst.XHR_CORS_SUPPORTED_FLAG : 0) |
                    (!!xhr.withCredentials ? SharedConst.XHR_WITH_CREDENTIALS_FLAG : 0)
            );
            /*jshint bitwise: true*/

            send.apply(xhr, arguments);
        };
    }

    exports.init = function (window) {
        window.XMLHttpRequest = function () {
            var xhr = new NativeMethods.XMLHttpRequest();

            proxyXhrMethods(xhr);

            corsSupported = typeof xhr.withCredentials !== 'undefined';

            //NOTE: emulate CORS, so 3rd party libs (e.g. jQuery) will allow requests with proxy host and
            //origin page host as well
            if (!corsSupported)
                xhr.withCredentials = false;

            XMLHttpRequestWrapper.prototype = xhr;

            return new XMLHttpRequestWrapper(xhr);
        };
    };
});
HammerheadClient.define('Util.Browser', function (require) {
    var $ = require('jQuery');

    var userAgent = navigator.userAgent,
        isIE11 = !!(navigator.appCodeName === 'Mozilla' && /Trident\/7.0/i.test(userAgent)),
        isIE = !!$.browser.msie || isIE11;

    this.exports = {
        isAndroid: /android/i.test(userAgent),
        isIE11: isIE11,
        isIE: isIE,
        isIOS: /(iphone|ipod|ipad)/i.test(userAgent),
        isMozilla: !!$.browser.mozilla && !isIE11,
        isOpera: $.browser.opera,
        isOperaWithWebKit: /OPR/.test(navigator.userAgent),
        isSafari: /Safari/i.test(userAgent) && !/Chrome/i.test(userAgent),
        isWebKit: /WebKit/i.test(userAgent),
        hasTouchEvents: !!('ontouchstart' in window),
        //NOTE: we need check of touch points only for IE, because it has PointerEvent and MSPointerEvent (IE10, IE11) instead TouchEvent (T109295)
        isTouchDevice: !!('ontouchstart' in window) || (isIE && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0)),

        browserVersion: parseInt($.browser.version, 10)
    };
});
HammerheadClient.define('Util.DOM', function (require, exports) {
    var $ = require('jQuery'),
        Browser = require('Util.Browser'),
        SharedConst = require('Shared.Const'),
        UrlUtil = require('UrlUtil');

    var scrollbarSize = null;

    exports.getActiveElement = function (currentDocument) {
        var doc = currentDocument || document,
            activeElement = doc.activeElement && doc.activeElement.tagName ? doc.activeElement : $('body')[0];

        if (activeElement.tagName.toLowerCase() === 'iframe') {
            try {
                return exports.getActiveElement($(activeElement).contents()[0]);
            } catch (e) {
            }
        }

        return activeElement;
    };

    exports.getChildIndex = function ($select, child) {
        var $allChildren = child.tagName.toLowerCase() === 'option' ? $select.find('option') : $select.find('optgroup');

        return $.inArray(child, $allChildren);
    };

    exports.getChildVisibleIndex = function ($select, child) {
        return $.inArray(child, exports.getSelectVisibleChildren($select));
    };

    exports.getIFrameByElement = function (el) {
        var currentDocument = el.documentElement ? el : exports.findDocument(el),
            currentWindow = window !== window.top && exports.isCrossDomainWindows(window.top, window) ? window : window.top;

        var $iframe = $(currentWindow.document).find('iframe').filter(function () {
            //crossDomain iframes throw error here
            try {
                return this.contentWindow.document === currentDocument;
            } catch (e) {
                return false;
            }
        });

        return $iframe.length ? $iframe[0] : null;
    };

    exports.getIFrameByWindow = function (win) {
        var $iframe = $(window.top.document).find('iframe').filter(function () {
            return this.contentWindow === win;
        });

        return $iframe.length ? $iframe[0] : null;
    };

    exports.getMapContainer = function (el) {
        var $container = $('[usemap=#' + $(el).closest('map').attr('name') + ']', exports.findDocument(el));

        return $container.length ? $container[0] : null;
    };

    exports.getScrollbarSize = function () {
        if (!scrollbarSize) {
            var $scrollDiv = $('<div>').css({
                height: '100px',
                overflow: 'scroll',
                position: 'absolute',
                top: '-9999px',
                width: '100px'
            }).appendTo($('body'));

            var scrollbarWidth = $scrollDiv[0].offsetWidth - $scrollDiv[0].clientWidth;

            $scrollDiv.remove();
            scrollbarSize = scrollbarWidth;
        }

        return scrollbarSize;
    };

    exports.getSelectParent = function ($child) {
        var $select = $child.parents('select:first');

        return !$select.length ? null : $select[0];
    };

    exports.getSelectVisibleChildren = function ($select) {
        var $children = $select.find('optgroup, option');

        if (Browser.isMozilla) {
            //NOTE: Mozilla does not display group without label and with empty label
            $children = $children.filter(function (index, item) {
                return  item.tagName.toLowerCase() !== 'optgroup' || item.label;
            });
        }

        return $children;
    };

    exports.getTextareaIndentInLine = function (textarea, position) {
        if (!textarea.value)
            return 0;

        var topPart = textarea.value.substring(0, position),
            linePosition = topPart.lastIndexOf('\n') === -1 ? 0 : (topPart.lastIndexOf('\n') + 1);

        return position - linePosition;
    };

    exports.getTextareaLineNumberByPosition = function (textarea, position) {
        var lines = textarea.value.split('\n'),
            topPartLength = 0,
            line = 0;

        for (var i = 0; topPartLength <= position; i++) {
            if (position <= topPartLength + lines[i].length) {
                line = i;

                break;
            }

            topPartLength += lines[i].length + 1;
        }

        return line;
    };

    exports.getTextareaPositionByLineAndOffset = function (textarea, line, offset) {
        var lines = textarea.value.split('\n'),
            lineIndex = 0;

        for (var i = 0; i < line; i++)
            lineIndex += lines[i].length + 1;

        return lineIndex + offset;
    };

    exports.getTopSameDomainWindow = function (window) {
        try {
            if ((window !== window.top) && UrlUtil.isIframeWithoutSrc(window.frameElement))
                return exports.getTopSameDomainWindow(window.parent);
        } catch (e) {
        }

        return window;
    };

    exports.findDocument = function (el) {
        if (el.documentElement)
            return el;

        return el.parentNode ? exports.findDocument(el.parentNode) : document;
    };

    exports.isAnchor = function (el) {
        return exports.isDomElement(el) && el.tagName.toLowerCase() === 'a';
    };

    exports.isContentEditableElement = function (el) {
        var isAlwaysNotEditableElement = function (el) {
            var tagName = el.tagName.toLowerCase(),
                notContentEditableElementsRegExp = /select|option|applet|area|audio|canvas|datalist|keygen|map|meter|object|progress|source|track|video|img/;

            return tagName && (notContentEditableElementsRegExp.test(tagName) || $(el).is(':input'));
        };

        var isContentEditable = false,
            element = null;

        if (exports.isTextNode(el))
            element = el.parentElement || $(el).parent()[0];
        else
            element = el;

        if (element)
            isContentEditable = element.isContentEditable && !isAlwaysNotEditableElement(element) && !exports.isTextEditableElement(element);

        return exports.isRenderedNode(element) && (isContentEditable || exports.findDocument(el).designMode === 'on');
    };

    exports.isCrossDomainIframe = function (iframe, bySrc) {
        var iframeLocation = UrlUtil.getIframeLocation(iframe);

        if (!bySrc && iframeLocation.documentLocation === null)
            return true;

        var currentLocation = bySrc ? iframeLocation.srcLocation : iframeLocation.documentLocation;

        if (currentLocation && UrlUtil.isSupportedProtocol(currentLocation))
            return !UrlUtil.sameOriginCheck(location.toString(), currentLocation);

        return false;
    };

    exports.isCrossDomainWindows = function (window1, window2) {
        try {
            if (window1 === window2)
                return false;

            var window1Location = window1.location.toString(),
                window2Location = window2.location.toString();

            if (window1Location === 'about:blank' || window2Location === 'about:blank')
                return false;

            return !UrlUtil.sameOriginCheck(window1Location, window2Location);
        } catch (e) {
            return true;
        }
    };

    exports.isDocumentInstance = function (instance) {
        return instance && typeof instance === 'object' && typeof instance.referrer !== 'undefined' && instance.toString &&
            (instance.toString() === '[object HTMLDocument]' || instance.toString() === '[object Document]');
    };

    exports.isDomElement = function (el) {
        // T184805
        if (el && typeof el.toString === 'function' && el.toString.toString().indexOf('[native code]') !== -1 && el.constructor &&
            (el.constructor.toString().indexOf(' Element') !== -1 || el.constructor.toString().indexOf(' Node') !== -1))
                return false;

        //B252941
        return el && (typeof el === 'object' || (Browser.isMozilla && typeof el === 'function')) &&
            el.nodeType !== 11 && typeof el.nodeName === 'string' && el.tagName;
    };

    exports.isEditableElement = function (el, checkEditingAllowed) {
        return checkEditingAllowed ? exports.isTextEditableElementAndEditingAllowed(el) || exports.isContentEditableElement(el) :
            exports.isTextEditableElement(el) || exports.isContentEditableElement(el);
    };

    exports.isElementContainsNode = function (el, node) {
        var contains = false;

        function checkChildNodes(el, node) {
            var childNodes = el.childNodes;

            if (contains || exports.isTheSameNode(node, el))
                contains = true;

            $.each(childNodes, function (index, value) {
                if (!contains)
                    contains = checkChildNodes(value, node);
                else
                    return false;
            });

            return contains;
        }

        return checkChildNodes(el, node);
    };

    exports.isElementInDocument = function (el, currentDocument) {
        var doc = currentDocument || document,
            curElement = el.parentNode;

        while (curElement) {
            if (curElement === doc)
                return true;

            curElement = curElement.parentNode;
        }

        return false;
    };

    exports.isElementInIframe = function (el, currentDocument) {
        var doc = currentDocument || exports.findDocument(el);

        return window.document !== doc;
    };

    exports.isFileInput = function (el) {
        return exports.isInputElement(el) && el.type.toLowerCase() === 'file';
    };

    exports.isHammerheadAttr = function (attr) {
        return attr === SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR || attr.indexOf(SharedConst.DOM_SANDBOX_STORED_ATTR_POSTFIX) !== -1;
    };

    exports.isHTMLCollection = function (collection) {
        try {
            return collection.toString() === '[object HTMLCollection]';
        } catch (e) {
            return false;
        }
    };

    exports.isIframe = function (el) {
        return exports.isDomElement(el) && el.tagName.toLowerCase() === 'iframe';
    };

    exports.isInputElement = function (el) {
        return exports.isDomElement(el) && el.tagName.toLowerCase() === 'input';
    };

    exports.isInputWithoutSelectionPropertiesInMozilla = function (el) {
        //T101195, T133144, T101195
        return Browser.isMozilla && Browser.browserVersion >= 29 && $(el).is('input[type=number]');
    };

    exports.isLocationInstance = function (instance) {
        return instance && typeof instance === 'object' && typeof instance.href !== 'undefined' &&
            typeof instance.assign !== 'undefined';
    };

    exports.isMapElement = function (el) {
        return /^map$|^area$/i.test(el.tagName);
    };

    exports.isNodeList = function (collection) {
        try {
            return collection.toString() === '[object NodeList]';
        } catch (e) {
            return false;
        }
    };

    exports.isRenderedNode = function (node) {
        return !(node.nodeType === 7 || node.nodeType === 8 || /^(script|style)$/i.test(node.nodeName));
    };

    exports.isSelectElement = function (el) {
        return el.tagName && el.tagName.toLowerCase() === 'select';
    };

    exports.isShadowUIElement = function (element) {
        while (element) {
            if (element.tagName === 'BODY' || element.tagName === 'HEAD')
                return false;

            //NOTE: check className type to avoid issues with SVG elements className property
            if (typeof element.className === 'string' && element.className.indexOf(SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX) > -1)
                return true;

            element = element.parentNode;
        }

        return false;
    };

    exports.isStyleInstance = function (instance) {
        return instance && typeof instance === 'object' && typeof instance.border !== 'undefined' &&
            (instance.toString() === '[object CSSStyleDeclaration]' || instance.toString() === '[object CSS2Properties]' ||
                instance.toString() === '[object MSStyleCSSProperties]');
    };

    exports.isSvgElement = function (el) {
        return $(el).closest('svg').length > 0;
    };

    exports.isTextEditableInput = function (el) {
        var editableInputTypesRegEx = /^(datetime|email|number|password|search|tel|text|url)$/,
            tagName = el.tagName ? el.tagName.toLowerCase() : '';

        return tagName === 'input' && editableInputTypesRegEx.test(el.type);
    };

    exports.isTextEditableElement = function (el) {
        var tagName = el.tagName ? el.tagName.toLowerCase() : '';

        return exports.isTextEditableInput(el) || tagName === 'textarea';
    };

    exports.isTextEditableElementAndEditingAllowed = function (el) {
        var isElementEditingAllowed = function () {
            return !el.readOnly && el.getAttribute('readonly') !== 'readonly';
        };

        return exports.isTextEditableElement(el) && isElementEditingAllowed();
    };

    exports.isTextNode = function (node) {
        return node && typeof node === 'object' && node.nodeType === 3 && typeof node.nodeName === 'string';
    };

    exports.isTheSameNode = function (node1, node2) {
        //NOTE: Mozilla has not isSameNode method
        if (node1 && node2 && node1.isSameNode)
            return node1.isSameNode(node2);
        else
            return node1 === node2;
    };

    exports.isWindowInstance = function (instance) {
        var result = instance && typeof instance === 'object' && typeof instance.top !== 'undefined' &&
            ($.browser.mozilla ? true : (instance.toString && (instance.toString() === '[object Window]' ||
                instance.toString() === '[object global]')));

        if (result && instance.top !== instance)
            return exports.isWindowInstance(instance.top);

        return result;
    };

    exports.setUnselectableAttributeRecursive = function (el) {
        if (el.nodeType === 1)
            el.setAttribute("unselectable", "on");

        var child = el.firstChild;

        while (child) {
            exports.setUnselectableAttributeRecursive(child);

            child = child.nextSibling;
        }
    };
});
HammerheadClient.define('Util.Event', function (require, exports) {
    // TODO: move to testcafe?
    exports.RECORDING_LISTENED_EVENTS = [
        'click', 'mousedown', 'mouseup', 'dblclick', 'contextmenu', 'mousemove', 'mouseover', 'mouseout',
        'touchstart', 'touchmove', 'touchend', 'keydown', 'keypress', 'keyup', 'change', 'focus', 'blur',
        'MSPointerDown', 'MSPointerMove','MSPointerOver', 'MSPointerOut', 'MSPointerUp', 'pointerdown',
        'pointermove', 'pointerover', 'pointerout', 'pointerup'];

    exports.DOM_EVENTS = exports.RECORDING_LISTENED_EVENTS.concat(['focusin', 'focusout', 'mouseenter', 'mouseleave', 'pointerenter', 'pointerleave']);

    exports.preventDefault = function(ev, allowBubbling) {
        if (ev.preventDefault)
            ev.preventDefault();
        else
            ev.returnValue = false;

        if (!allowBubbling)
            exports.stopPropagation(ev);
    };

    exports.stopPropagation = function(ev) {
        if (ev.stopImmediatePropagation)
            ev.stopImmediatePropagation();
        else if (ev.stopPropagation)
            ev.stopPropagation();

        ev.cancelBubble = true;
    };
});
HammerheadClient.define('Util.EventEmitter', function (require) {
    var $ = require('jQuery');

    var EventEmitter = function () {
        this.eventsListeners = {};
    };

    EventEmitter.prototype.emit = function (evt) {
        var listeners = this.eventsListeners[evt];

        if (listeners) {
            for (var i = 0; i < listeners.length; i++) {
                try {
                    if (listeners[i])
                        listeners[i].apply(this, Array.prototype.slice.apply(arguments, [1]));
                } catch (e) {
                    // Hack for IE: after document.write calling IFrameSandbox event handlers
                    // rises 'Can't execute code from a freed script' exception because document has been
                    // recreated
                    if (e.message && e.message.indexOf('freed script') > -1)
                        listeners[i] = null;
                    else
                        throw e;
                }
            }
        }
    };

    EventEmitter.prototype.off = function (evt, listener) {
        var listeners = this.eventsListeners[evt];

        if (listeners) {
            this.eventsListeners[evt] = $.grep(listeners, function (item) {
                return item !== listener;
            });
        }
    };

    EventEmitter.prototype.on = function (evt, listener) {
        if (!this.eventsListeners[evt])
            this.eventsListeners[evt] = [];

        this.eventsListeners[evt].push(listener);
    };

    this.exports = EventEmitter;
});
HammerheadClient.define('Util.KeyChar', function (require, exports) {
    var $ = require('jQuery'),
        Browser = require('Util.Browser'),
        DOM = require('Util.DOM');

    var KEYS_MAPS = {
        MODIFIERS: {
            alt: 18,
            ctrl: 17,
            meta: 91,
            shift: 16
        },

        MODIFIERS_MAP: {
            option: 'alt'
        },

        SHIFT_MAP: {
            '~': '`',
            '!': '1',
            '@': '2',
            '#': '3',
            '$': '4',
            '%': '5',
            '^': '6',
            '&': '7',
            '*': '8',
            '(': '9',
            ')': '0',
            '_': '-',
            '+': '=',
            '{': '[',
            '}': ']',
            ':': ';',
            '"': '\'',
            '|': '\\',
            '<': ',',
            '>': '.',
            '?': '/'
        },

        SPECIAL_KEYS: {
            backspace: 8,
            capslock: 20,
            delete: 46,
            down: 40,
            end: 35,
            enter: 13,
            esc: 27,
            home: 36,
            ins: 45,
            left: 37,
            pagedown: 34,
            pageup: 33,
            right: 39,
            space: 32,
            tab: 9,
            up: 38
        },

        SYMBOL_CHAR_CODE_TO_KEY_CODE: {
            96: 192,    // `
            91: 219,    // [
            93: 221,    // ]
            92: 220,    // \
            59: 186,    // ;
            39: 222,    // '
            44: 188,    // ,
            45: Browser.isMozilla ? 173 : 189,    // -
            46: 190,    // .
            47: 191     // /
        },

        SYMBOLS_KEYS_CHAR_CODES: {
            109: 45,
            173: 45,
            186: 59,
            187: 61,
            188: 44,
            189: 45,
            190: 46,
            191: 47,
            192: 96,
            219: 91,
            220: 92,
            221: 93,
            222: 39,

            110: 46,
            96: 48,
            97: 49,
            98: 50,
            99: 51,
            100: 52,
            101: 53,
            102: 54,
            103: 55,
            104: 56,
            105: 57,
            107: 43,
            106: 42,
            111: 47
        }
    };

    function reverseMap(map) {
        var reversed = {};

        for (var key in map) {
            if (map.hasOwnProperty(key))
                reversed[map[key]] = key;
        }

        return reversed;
    }

    KEYS_MAPS.REVERSED_MODIFIERS = reverseMap(KEYS_MAPS.MODIFIERS);
    KEYS_MAPS.REVERSED_SHIFT_MAP = reverseMap(KEYS_MAPS.SHIFT_MAP);
    KEYS_MAPS.REVERSED_SPECIAL_KEYS = reverseMap(KEYS_MAPS.SPECIAL_KEYS);

    exports.KEYS_MAPS = KEYS_MAPS;

    exports.changeLetterCase = function (letter) {
        var isLowCase = letter === letter.toLowerCase();

        return isLowCase ? letter.toUpperCase() : letter.toLowerCase();
    };

    exports.getArrayByKeyCombination = function (keysCombination) {
        //NOTE: we should separate symbol '+' that concats other keys and key '+' to support commands like the 'ctrl++'
        var keys = keysCombination.replace(/^\+/g, 'plus').replace(/\+\+/g, '+plus').split('+');

        $.map(keys, function (key, index) {
            keys[index] = key.replace('plus', '+');
        });

        return keys;
    };

    exports.getKeyCodeByChar = function (keyChar) {
        if (exports.isLetter(keyChar))
            return keyChar.toUpperCase().charCodeAt(0);

        var res = KEYS_MAPS.SHIFT_MAP[keyChar] ? KEYS_MAPS.SHIFT_MAP[keyChar].charCodeAt(0) : keyChar.charCodeAt(0);

        return KEYS_MAPS.SYMBOL_CHAR_CODE_TO_KEY_CODE[res] || res;
    };

    exports.getShortcutHandlerByKeyCombination = function (shortcutHandlers, keysCombination) {
        var keys = exports.getArrayByKeyCombination(keysCombination.toLowerCase());

        while (keys.length) {
            var combination = keys.join('+');

            if (shortcutHandlers[combination])
                return shortcutHandlers[combination];

            keys.shift();
        }

        return null;
    };

    exports.getShortcutsByKeyCombination = function (shortcutHandlers, keysCombination) {
        var keys = exports.getArrayByKeyCombination(keysCombination.toLowerCase()),
            shortcuts = [],
            curFullCombination = [];

        for (var i = 0; i < keys.length; i++) {
            curFullCombination.push(keys[i]);

            var curCombination = curFullCombination.concat();

            while (curCombination.length) {
                var keyString = curCombination.join('+');

                if (shortcutHandlers[keyString]) {
                    shortcuts.push(keyString);
                    curFullCombination = curCombination = [];
                } else
                    curCombination.shift();
            }
        }

        return shortcuts;
    };

    exports.isArrowKey = function (keyCode) {
        return keyCode === KEYS_MAPS.SPECIAL_KEYS.right || keyCode === KEYS_MAPS.SPECIAL_KEYS.left ||
            keyCode === KEYS_MAPS.SPECIAL_KEYS.up || keyCode === KEYS_MAPS.SPECIAL_KEYS.down;
    };

    exports.isCharByKeyCode = function (keyCode) {
        if (KEYS_MAPS.SYMBOLS_KEYS_CHAR_CODES[keyCode])
            return true;

        var activeElement = DOM.getActiveElement(),
            isLetter = ((keyCode >= 48 && keyCode <= 57) || (keyCode >= 65 && keyCode <= 90) || keyCode === 32), //digits, letters and space
            isNumPadKey = (keyCode === 42 || keyCode === 43 || (keyCode >= 47 && keyCode <= 57) || keyCode === 78),
            isSymbol = (keyCode === 59 || keyCode === 61),
            isEnterKeyInTextArea = activeElement && activeElement.tagName.toLowerCase() === 'textarea' && !DOM.isShadowUIElement(activeElement) && keyCode === KEYS_MAPS.SPECIAL_KEYS.enter;

        return isLetter || isNumPadKey || isSymbol || isEnterKeyInTextArea;
    };

    exports.isLetter = function (key) {
        return key.length === 1 && (key >= 'a' && key <= 'z') || (key >= 'A' && key <= 'Z');
    };

    exports.parseKeysString = function (keysString) {
        var error = false,
            keyStringLength = keysString.length;

        keysString = $.trim(keysString).replace(/\s+/g, ' ');

        //NOTE: trim last connecting '+'
        if (keyStringLength > 1 && keysString.charAt(keyStringLength - 1) === '+' && !(/[\+ ]/.test(keysString.charAt(keyStringLength - 2))))
            keysString = keysString.substring(0, keysString.length - 1);

        var commands = keysString.split(' ');

        $.map(commands, function (command) {
            var keys = exports.getArrayByKeyCombination(command);

            $.map(keys, function (key) {
                var isChar = key.length === 1 || key === 'space',
                    sanitizedKey = isChar ? key : key.toLowerCase();

                if (exports.KEYS_MAPS.MODIFIERS_MAP[sanitizedKey])
                    sanitizedKey = exports.KEYS_MAPS.MODIFIERS_MAP[sanitizedKey];

                var modifierKeyCode = exports.KEYS_MAPS.MODIFIERS[sanitizedKey],
                    specialKeyCode = exports.KEYS_MAPS.SPECIAL_KEYS[sanitizedKey];

                if (!(isChar || modifierKeyCode || specialKeyCode)) {
                    error = true;

                    return false;
                }
            });

            if (error)
                return false;
        });

        return {
            commands: commands,
            error: error,
            keys: keysString
        };
    };
});
/* global isIFrameWithoutSrc:true */
HammerheadClient.define('Util.Position', function (require, exports) {
    var $ = require('jQuery'),
        Browser = require('Util.Browser'),
        DOM = require('Util.DOM'),
        Style = require('Util.Style');

    function getAreaElementRectangle(el, mapContainer) {
        var shape = el.getAttribute('shape'),
            coords = el.getAttribute('coords'),
            i = 0;

        if (shape === 'default')
            return exports.getElementRectangle(mapContainer);

        if (!shape || !coords)
            return null;

        coords = coords.split(',');

        if (!coords.length)
            return null;

        for (i = 0; i < coords.length; i++) {
            coords[i] = parseInt(coords[i]);

            if (typeof coords[i] !== 'number')
                return null;
        }

        var rectangle = {};

        switch (shape) {
            case 'rect':
                if (coords.length === 4) {
                    rectangle.height = coords[3] - coords[1];
                    rectangle.left = coords[0];
                    rectangle.top = coords[1];
                    rectangle.width = coords[2] - coords[0];
                }

                break;

            case 'circle':
                if (coords.length === 3) {
                    rectangle.height = coords[2] * 2;
                    rectangle.left = coords[0] - coords[2];
                    rectangle.top = coords[1] - coords[2];
                    rectangle.width = coords[2] * 2;
                }

                break;

            case 'poly':
                if (coords.length >= 6 && coords.length % 2 === 0) {
                    rectangle.left = rectangle.right = coords[0];
                    rectangle.top = rectangle.bottom = coords[1];

                    for (i = 2; i < coords.length; i = i + 2) {
                        rectangle.left = coords[i] < rectangle.left ? coords[i] : rectangle.left;
                        rectangle.right = coords[i] > rectangle.right ? coords[i] : rectangle.right;
                    }

                    for (i = 3; i < coords.length; i = i + 2) {
                        rectangle.top = coords[i] < rectangle.top ? coords[i] : rectangle.top;
                        rectangle.bottom = coords[i] > rectangle.bottom ? coords[i] : rectangle.bottom;
                    }

                    rectangle.height = rectangle.bottom - rectangle.top;
                    rectangle.width = rectangle.right - rectangle.left;
                }

                break;
        }

        if (!$.isEmptyObject(rectangle)) {
            var containerOffset = exports.getOffsetPosition(mapContainer);

            rectangle.left += containerOffset.left;
            rectangle.top += containerOffset.top;

            return rectangle;
        }

        return null;
    }

    function getMapElementRectangle(el) {
        var mapContainer = DOM.getMapContainer(el);

        if (mapContainer) {
            if (/^map$/i.test(el.tagName))
                return exports.getElementRectangle(mapContainer);
            else if (/^area$/i.test(el.tagName)) {
                var areaElementRectangle = getAreaElementRectangle(el, mapContainer);

                if (areaElementRectangle)
                    return areaElementRectangle;
            }
        }

        return {
            height: 0,
            left: 0,
            top: 0,
            width: 0
        };
    }

    exports.checkPresenceInRectangle = function (point, rectangle) {
        return point.x >= rectangle.left && point.x <= rectangle.right && point.y >= rectangle.top && point.y <= rectangle.bottom;
    };

    // TODO: equal to offsetToClientCoords
    exports.clientToOffsetCoord = function (coords, currentDocument) {
        var $doc = $(currentDocument || document);

        return {
            x: coords.x + $doc.scrollLeft(),
            y: coords.y + $doc.scrollTop()
        };
    };

    exports.getClientDimensions = function (target) {
        if (!DOM.isDomElement(target)) {
            var clientPoint = exports.offsetToClientCoords(target);

            return {
                border: {
                    bottom: 0,
                    left: 0,
                    right: 0,
                    top: 0
                },
                bottom: clientPoint.y,
                height: 0,
                left: clientPoint.x,
                right: clientPoint.x,
                scroll: {
                    left: 0,
                    top: 0
                },
                top: clientPoint.y,
                width: 0
            };
        }

        var $target = $(target),
            isHtmlElement = /html/i.test(target.tagName),
            body = isHtmlElement ? $target.find('body')[0] : null,
            elementBorders = Style.getBordersWidth($target),
            elementRect = target.getBoundingClientRect(),
            elementScroll = Style.getElementScroll($target),
            isElementInIFrame = DOM.isElementInIframe(target),
            elementLeftPosition = isHtmlElement ? 0 : elementRect.left,
            elementTopPosition = isHtmlElement ? 0 : elementRect.top,
            elementHeight = isHtmlElement ? target.clientHeight : elementRect.height,
            elementWidth = isHtmlElement ? target.clientWidth : elementRect.width;

        if (isHtmlElement && isIFrameWithoutSrc && body) {
            elementHeight = body.clientHeight;
            elementWidth = body.clientWidth;
        }

        if (isElementInIFrame) {
            var iFrameElement = DOM.getIFrameByElement(target);

            if (iFrameElement) {
                var iFrameOffset = exports.getOffsetPosition(iFrameElement),
                    clientOffset = exports.offsetToClientCoords({
                        x: iFrameOffset.left,
                        y: iFrameOffset.top
                    }),
                    iFrameBorders = Style.getBordersWidth($(iFrameElement));

                elementLeftPosition += clientOffset.x + iFrameBorders.left;
                elementTopPosition += clientOffset.y + iFrameBorders.top;

                if (isHtmlElement) {
                    elementBorders.bottom = elementBorders.bottom + iFrameBorders.bottom;
                    elementBorders.left = elementBorders.left + iFrameBorders.left;
                    elementBorders.right = elementBorders.right + iFrameBorders.right;
                    elementBorders.top = elementBorders.top + iFrameBorders.top;
                }
            }
        }

        return {
            border: elementBorders,
            bottom: elementTopPosition + elementHeight,
            height: elementHeight,
            left: elementLeftPosition,
            right: elementLeftPosition + elementWidth,
            scroll: {
                left: elementScroll.left,
                top: elementScroll.top
            },
            scrollbar: {
                right: isHtmlElement || $target.innerWidth() === target.clientWidth ? 0 : DOM.getScrollbarSize(),
                bottom: isHtmlElement || $target.innerHeight() === target.clientHeight ? 0 : DOM.getScrollbarSize()
            },
            top: elementTopPosition,
            width: elementWidth
        };
    };

    exports.getElementClientRectangle = function (el) {
        var rect = exports.getElementRectangle(el),
            clientPos = exports.offsetToClientCoords({
                x: rect.left,
                y: rect.top
            });

        return {
            height: rect.height,
            left: clientPos.x,
            top: clientPos.y,
            width: rect.width
        };
    };

    //TODO: remove the skipIFramesDeeping flag
    exports.getElementFromPoint = function (x, y, currentDocument, skipIFramesDeeping) {
        var el = null;

        currentDocument = currentDocument || document;

        try {
            // Permission denied to access property 'getElementFromPoint' error in iFrame
            el = (currentDocument.getElementFromPoint || currentDocument.elementFromPoint).call(currentDocument, x, y);
        } catch (ex) {
            return null;
        }

        //NOTE: elementFromPoint returns null when is's a border of an iframe
        if (el === null)
            el = (currentDocument.getElementFromPoint || currentDocument.elementFromPoint).call(currentDocument, x - 1, y - 1);

        if (el && el.tagName.toLowerCase() === 'iframe' && !skipIFramesDeeping) {
            var iframeDocument = null;

            try {
                iframeDocument = $(el).contents()[0];
            } catch (e) {
                //cross-domain iframe
            }

            if (iframeDocument) {
                var iframePosition = exports.getOffsetPosition(el),
                    iframeClientPosition = exports.offsetToClientCoords({
                        x: iframePosition.left,
                        y: iframePosition.top
                    }, currentDocument),
                    iframeBorders = Style.getBordersWidth($(el)),
                    iframePadding = Style.getElementPadding($(el));

                el = exports.getElementFromPoint(
                    x - iframeClientPosition.x - iframeBorders.left - iframePadding.left,
                    y - iframeClientPosition.y - iframeBorders.top - iframePadding.top,
                    iframeDocument
                ) || el;
            }
        }

        return el;
    };

    exports.getElementRectangle = function (el) {
        var rectangle = {};

        if (DOM.isMapElement(el))
            rectangle = getMapElementRectangle(el);
        else if (Style.isVisibleChild(el))
            rectangle = exports.getSelectChildRectangle(el);
        else {
            var elementOffset = exports.getOffsetPosition(el),
                relativeRectangle = DOM.isSvgElement(el) ? exports.getSvgElementRelativeRectangle(el) : el.getBoundingClientRect();

            rectangle = {
                height: relativeRectangle.height,
                left: elementOffset.left,
                top: elementOffset.top,
                width: relativeRectangle.width
            };
        }

        rectangle.height = Math.round(rectangle.height);
        rectangle.left = Math.round(rectangle.left);
        rectangle.top = Math.round(rectangle.top);
        rectangle.width = Math.round(rectangle.width);

        return rectangle;
    };

    exports.getElementRectangleForMarking = function (element, padding, borderWidth) {
        var elementRectangle = exports.getElementRectangle(element),
            rectPadding = padding || 0,
            top = elementRectangle.top - rectPadding < 0 ? borderWidth / 2 : elementRectangle.top - rectPadding,
            left = elementRectangle.left - rectPadding < 0 ? borderWidth / 2 : elementRectangle.left - rectPadding,

            width = Math.min(
                elementRectangle.left - rectPadding < 0 ?
                    Math.max(elementRectangle.width + elementRectangle.left + rectPadding - left, 0) :
                    elementRectangle.width + rectPadding * 2,
                Style.getDocumentElementWidth() - borderWidth <= 1 ? 1 : Style.getDocumentElementWidth() - borderWidth),

            height = Math.min(
                elementRectangle.top - rectPadding < 0 ?
                    Math.max(elementRectangle.height + elementRectangle.top + rectPadding - top, 0) :
                    elementRectangle.height + rectPadding * 2,
                Style.getDocumentElementHeight() - borderWidth <= 1 ? 1 : Style.getDocumentElementHeight() - borderWidth);

        return {
            height: height,
            left: left,
            top: top,
            width: width
        };
    };

    exports.getEventAbsoluteCoordinates = function (ev) {
        var el = ev.target || ev.srcElement,
            pageCoordinates = exports.getEventPageCoordinates(ev),
            curDocument = DOM.findDocument(el),
            xOffset = 0,
            yOffset = 0;

        if (DOM.isElementInIframe(curDocument.documentElement)) {
            var currentIFrame = DOM.getIFrameByElement(curDocument);

            if (currentIFrame) {
                var iFrameOffset = exports.getOffsetPosition(currentIFrame),
                    iFrameBorders = Style.getBordersWidth($(currentIFrame));

                xOffset = iFrameOffset.left + iFrameBorders.left;
                yOffset = iFrameOffset.top + iFrameBorders.top;
            }
        }

        return {
            x: pageCoordinates.x + xOffset,
            y: pageCoordinates.y + yOffset
        };
    };

    exports.getEventPageCoordinates = function (ev) {
        var curCoordObject = /^touch/.test(ev.type) && ev.targetTouches ? (ev.targetTouches[0] || ev.changedTouches[0]) : ev;

        if ((curCoordObject.pageX === null || (curCoordObject.pageX === 0 && curCoordObject.pageY === 0 &&
            (curCoordObject.clientX !== 0 || curCoordObject.clientY !== 0))) && curCoordObject.clientX !== null) {

            var currentDocument = DOM.findDocument(ev.target || ev.srcElement),
                html = currentDocument.documentElement,
                body = currentDocument.body;

            return {
                x: Math.round(curCoordObject.clientX + (html && html.scrollLeft || body && body.scrollLeft || 0) - (html.clientLeft || 0)),
                y: Math.round(curCoordObject.clientY + (html && html.scrollTop || body && body.scrollTop || 0) - (html.clientTop || 0))
            };
        }
        return {
            x: Math.round(curCoordObject.pageX),
            y: Math.round(curCoordObject.pageY)
        };
    };

    exports.getFixedPosition = function (pos, iFrameWin, convertToClient) {
        if (!iFrameWin)
            return pos;

        var iFrame = DOM.getIFrameByWindow(iFrameWin),
            iFrameOffset = exports.getOffsetPosition(iFrame),
            iFrameBorders = Style.getBordersWidth($(iFrame)),
            iFramePadding = Style.getElementPadding($(iFrame)),
            documentScroll = Style.getElementScroll($(document));

        return {
            x: pos.x + iFrameOffset.left + iFrameBorders.left + iFramePadding.left - (convertToClient ? documentScroll.left : 0),
            y: pos.y + iFrameOffset.top + iFrameBorders.top + iFramePadding.top - (convertToClient ? documentScroll.top : 0)
        };
    };

    exports.getFixedPositionForIFrame = function (pos, iFrameWin) {
        var iFrame = DOM.getIFrameByWindow(iFrameWin),
            iFrameOffset = exports.getOffsetPosition(iFrame),
            iFrameBorders = Style.getBordersWidth($(iFrame)),
            iFramePadding = Style.getElementPadding($(iFrame));

        return {
            x: pos.x - iFrameOffset.left - iFrameBorders.left - iFramePadding.left,
            y: pos.y - iFrameOffset.top - iFrameBorders.top - iFramePadding.top
        };
    };

    exports.getIFrameCoordinates = function (iFrameWin) {
        var iFrame = DOM.getIFrameByWindow(iFrameWin),
            $IFrame = $(iFrame),
            iFrameOffset = exports.getOffsetPosition(iFrame),
            iFrameBorders = Style.getBordersWidth($IFrame),
            iFramePadding = Style.getElementPadding($IFrame),
            iFrameRectangleLeft = iFrameOffset.left + iFrameBorders.left + iFramePadding.left,
            iFrameRectangleTop = iFrameOffset.top + iFrameBorders.top + iFramePadding.top;

        return {
            bottom: iFrameRectangleTop + $IFrame.height(),
            left: iFrameRectangleLeft,
            right: iFrameRectangleLeft + $IFrame.width(),
            top: iFrameRectangleTop
        };
    };

    exports.getOffsetPosition = function (el) {
        if (DOM.isMapElement(el)) {
            var rectangle = getMapElementRectangle(el);

            return {
                left: rectangle.left,
                top: rectangle.top
            };
        }

        var doc = DOM.findDocument(el),
            isInIFrame = DOM.isElementInIframe(el, doc),
            currentIFrame = isInIFrame ? DOM.getIFrameByElement(doc) : null,
            offsetPosition = doc === el ? $(doc.documentElement).offset() : $(el).offset(),
            relativeRectangle = null;

        // NOTE: jquery .offset() function doesn't take body's border into account (except IE7)
        // http://bugs.jquery.com/ticket/7948

        //NOTE: Sometimes in IE method getElementFromPoint returns cross-domain iframe's documentElement, but we can't get his body
        var borders = doc.body ? Style.getBordersWidth($(doc.body)) : {
            left: 0,
            top: 0
        };

        if (!isInIFrame || !currentIFrame) {
            var isSvg = DOM.isSvgElement(el);

            relativeRectangle = isSvg ? exports.getSvgElementRelativeRectangle(el) : null;

            return {
                left: Math.round(isSvg ? relativeRectangle.left + borders.left : offsetPosition.left + borders.left),
                top: Math.round(isSvg ? relativeRectangle.top + borders.top : offsetPosition.top + borders.top)
            };
        }

        var iframeBorders = Style.getBordersWidth($(currentIFrame));

        borders.left += iframeBorders.left;
        borders.top += iframeBorders.top;

        var iframeOffset = exports.getOffsetPosition(currentIFrame),
            iframePadding = Style.getElementPadding($(currentIFrame)),
            clientPosition = null;

        if (DOM.isSvgElement(el)) {
            relativeRectangle = exports.getSvgElementRelativeRectangle(el);

            clientPosition = {
                x: relativeRectangle.left - (document.body.scrollLeft || document.documentElement.scrollLeft) + borders.left,
                y: relativeRectangle.top - (document.body.scrollTop || document.documentElement.scrollTop) + borders.top
            };
        } else {
            clientPosition = exports.offsetToClientCoords({
                    x: offsetPosition.left + borders.left,
                    y: offsetPosition.top + borders.top},
                doc);
        }

        return {
            left: Math.round(iframeOffset.left + clientPosition.x + iframePadding.left),
            top: Math.round(iframeOffset.top + clientPosition.y + iframePadding.top)
        };
    };

    exports.getSelectChildRectangle = function (el) {
        var select = DOM.getSelectParent($(el));

        if (select) {
            var $select = $(select),
                selectRectangle = exports.getElementRectangle(select),
                selectBorders = Style.getBordersWidth($select),
                selectRightScrollbar = $select.innerWidth() === select.clientWidth ? 0 : DOM.getScrollbarSize(),
                optionHeight = Style.getOptionHeight($select),
                optionRealIndex = DOM.getChildVisibleIndex($select, el),
                optionVisibleIndex = Math.max(optionRealIndex - $select.scrollTop() / optionHeight, 0);

            return {
                height: optionHeight,
                left: selectRectangle.left + selectBorders.left,
                top: selectRectangle.top + selectBorders.top + Style.getElementPadding($select).top + optionVisibleIndex * optionHeight,
                width: selectRectangle.width - (selectBorders.left + selectBorders.right) - selectRightScrollbar
            };
        }

        return exports.getElementRectangle(el);
    };

    exports.getSvgElementRelativeRectangle = function (el) {
        var $el = $(el),
            isSvgTextElement = $el.is('tspan') || $el.is('tref') || (el.tagName && el.tagName.toLowerCase() === 'textpath'),
            boundingClientRect = el.getBoundingClientRect(),
            elementRect = {
                height: !isSvgTextElement ? boundingClientRect.height : $el.outerHeight(),
                left: boundingClientRect.left + (document.body.scrollLeft || document.documentElement.scrollLeft),
                top: boundingClientRect.top + (document.body.scrollTop || document.documentElement.scrollTop),
                width: !isSvgTextElement ? boundingClientRect.width : $el.outerWidth()
            };

        if (isSvgTextElement) {
            var $offsetParent = $el.offsetParent(),
                elOffset = $el.offset(),
                offsetParentOffset = $offsetParent.offset(),
                offsetParentIsBody = $offsetParent.is('body');

            return {
                height: elementRect.height || boundingClientRect.height,
                left: offsetParentIsBody ? (el.offsetLeft || elOffset.left) : offsetParentOffset.left + el.offsetLeft,
                top: offsetParentIsBody ? (el.offsetTop || elOffset.top) : offsetParentOffset.top + el.offsetTop,
                width: elementRect.width || boundingClientRect.width
            };
        }


        if (Browser.isMozilla || Browser.isIE)
            return elementRect;

        var strokeWidth = $el.attr('stroke-width') || $el.css('stroke-width');

        //NOTE: we think that 'stroke-width' attribute can only be set in pixels
        strokeWidth = strokeWidth ? +strokeWidth.replace(/px|em|ex|pt|pc|cm|mm|in/, '') : 1;

        if (strokeWidth && +(strokeWidth) % 2 !== 0)
            strokeWidth = +strokeWidth + 1;

        if (($el.is('line') || $el.is('polyline') || $el.is('polygon') || $el.is('path')) && (!elementRect.width || !elementRect.height)) {
            if (!elementRect.width && elementRect.height) {
                elementRect.left -= strokeWidth / 2;
                elementRect.width = strokeWidth;
            } else if (elementRect.width && !elementRect.height) {
                elementRect.height = strokeWidth;
                elementRect.top -= strokeWidth / 2;
            }
        } else {
            if ($el.is('polygon')) {
                elementRect.height += 2 * strokeWidth;
                elementRect.left -= strokeWidth;
                elementRect.top -= strokeWidth;
                elementRect.width += 2 * strokeWidth;
            }

            elementRect.height += strokeWidth;
            elementRect.left -= strokeWidth / 2;
            elementRect.top -= strokeWidth / 2;
            elementRect.width += strokeWidth;
        }

        return elementRect;
    };

    exports.findCenter = function (el) {
        var rectangle = exports.getElementRectangle(el);

        return {
            x: Math.round(rectangle.left + rectangle.width / 2),
            y: Math.round(rectangle.top + rectangle.height / 2)
        };
    };

    exports.findClientCenter = function (el) {
        return exports.offsetToClientCoords(exports.findCenter(el));
    };

    exports.findLineAndRectangelIntersection = function (pointStart, pointEnd, rectangle) {
        var points = [];

        var getLineYByXCoord = function (x) {
            if (pointEnd.x - pointStart.x === 0)
                return null;

            return pointStart.y + (x * (pointEnd.y - pointStart.y) + pointStart.x * (pointStart.y - pointEnd.y)) / (pointEnd.x - pointStart.x);
        };

        var getLineXByYCoord = function (y) {
            if (pointEnd.y - pointStart.y === 0)
                return null;

            return pointStart.x + (y * (pointEnd.x - pointStart.x) + pointStart.y * (pointStart.x - pointEnd.x)) / (pointEnd.y - pointStart.y);
        };

        var getDistanceBetweenPoints = function (start, end) {
            return Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        };

        var findTransfer = function (coord, isHorizontalSide) {
            var intersection = isHorizontalSide ? getLineXByYCoord(coord) : getLineYByXCoord(coord),
                hasTransfer = intersection && (isHorizontalSide ? (intersection >= rectangle.left && intersection <= rectangle.right) :
                    (intersection >= rectangle.top && intersection <= rectangle.bottom));

            if (hasTransfer) {
                points.push({
                    x: isHorizontalSide ? Math.round(intersection) : Math.round(coord),
                    y: isHorizontalSide ? Math.round(coord) : Math.round(intersection)
                });
            }
        };

        for (var prop in rectangle) {
            if (rectangle.hasOwnProperty(prop))
                findTransfer(rectangle[prop], /top|bottom/.test(prop));
        }

        return points.length === 1 || getDistanceBetweenPoints(pointStart, points[0]) < getDistanceBetweenPoints(pointStart, points[1]) ?
            points[0] : points[1];
    };

    exports.isContainOffset = function (el, offsetX, offsetY) {
        var dimensions = exports.getClientDimensions(el),
            maxX = dimensions.scrollbar.right + dimensions.border.left + dimensions.border.right + el.scrollWidth,
            maxY = dimensions.scrollbar.bottom + dimensions.border.top + dimensions.border.bottom + el.scrollHeight;

        return (typeof offsetX === 'undefined' || (offsetX >= 0 && maxX >= offsetX)) &&
            (typeof offsetY === 'undefined' || ( offsetY >= 0 && maxY >= offsetY));
    };

    exports.isElementVisible = function (el) {
        if (DOM.isTextNode(el))
            return !exports.isNotVisibleNode(el);

        var $el = $(el),
            elementRectangle = exports.getElementRectangle(el);

        if (!DOM.isContentEditableElement(el)) {
            if (elementRectangle.width === 0 || elementRectangle.height === 0)
                return false;
        }

        if (DOM.isMapElement(el)) {
            var mapContainer = DOM.getMapContainer($el.closest('map')[0]);

            return mapContainer ? exports.isElementVisible(mapContainer) : false;
        } else if (Style.isVisibleChild(el)) {
            var $select = $(DOM.getSelectParent($(el))),
                childRealIndex = DOM.getChildVisibleIndex($select, el),
                realSelectSizeValue = Style.getSelectElementSize($select),
                topVisibleIndex = Math.max($select.scrollTop() / Style.getOptionHeight($select), 0),
                bottomVisibleIndex = topVisibleIndex + realSelectSizeValue - 1,
                optionVisibleIndex = Math.max(childRealIndex - topVisibleIndex, 0);

            return optionVisibleIndex >= topVisibleIndex && optionVisibleIndex <= bottomVisibleIndex;
        } else if (DOM.isSvgElement(el))
            return $el.css('visibility') !== 'hidden' && $el.css('display') !== 'none';
        else
            return $el.is(':visible') && $el.css('visibility') !== 'hidden';
    };

    exports.offsetToClientCoords = function (coords, currentDocument) {
        var $doc = $(currentDocument || document);

        return {
            x: coords.x - $doc.scrollLeft(),
            y: coords.y - $doc.scrollTop()
        };
    };
});
HammerheadClient.define('Util.Style', function (require, exports) {
    var $ = require('jQuery'),
        Browser = require('Util.Browser'),
        DOM = require('Util.DOM');

    // NOTE: In IE8 jquery returns 'medium' border value in two cases:
    // when border is not set and when border is set to 'medium' value.
    // But in this cases real border values are different (0px and 3px). But we can't determine it.
    // And we take value 0px.
    var BORDER_WIDTH_KEYWORDS = {
        medium: 4,
        thick: 6,
        thin: 2
    };

    //NOTE: for Chrome
    var MIN_SELECT_SIZE_VALUE = 4;

    exports.getBordersWidth = function ($el) {
        //otherwise IE raises error
        var $elem = $el[0].documentElement ? $($el[0].documentElement) : $el,

            bottomBorderString = $elem.css('borderBottomWidth'),
            leftBorderString = $elem.css('borderLeftWidth'),
            rightBorderString = $elem.css('borderRightWidth'),
            topBorderString = $elem.css('borderTopWidth'),

            topBorder = !isNaN(parseInt(BORDER_WIDTH_KEYWORDS[topBorderString])) ?
                BORDER_WIDTH_KEYWORDS[topBorderString] :
                topBorderString.replace('px', ''),

            leftBorder = !isNaN(parseInt(BORDER_WIDTH_KEYWORDS[leftBorderString])) ?
                BORDER_WIDTH_KEYWORDS[leftBorderString] :
                leftBorderString.replace('px', ''),

            bottomBorder = !isNaN(parseInt(BORDER_WIDTH_KEYWORDS[bottomBorderString])) ?
                BORDER_WIDTH_KEYWORDS[bottomBorderString] :
                bottomBorderString.replace('px', ''),

            rightBorder = !isNaN(parseInt(BORDER_WIDTH_KEYWORDS[rightBorderString])) ?
                BORDER_WIDTH_KEYWORDS[rightBorderString] :
                rightBorderString.replace('px', '');

        return {
            bottom: bottomBorder ? parseInt(bottomBorder) : 0,
            left: leftBorder ? parseInt(leftBorder) : 0,
            right: rightBorder ? parseInt(rightBorder) : 0,
            top: topBorder ? parseInt(topBorder) : 0
        };
    };

    exports.getComputedStyle = function (el, doc) {
        return doc.defaultView && doc.defaultView.getComputedStyle ? doc.defaultView.getComputedStyle(el, null) : el.currentStyle;
    };

    exports.getCssStyleValue = function (el, property, doc) {
        var computedStyle = exports.getComputedStyle(el, doc || DOM.findDocument(el));

        return computedStyle ? computedStyle.getPropertyValue(property) : null;
    };

    exports.getDocumentElementHeight = function () {
        var $window = $(window);

        return Math.round(Math.max($(document).height(), $window.height() + $window.scrollTop()));
    };

    exports.getDocumentElementWidth = function () {
        var $window = $(window);

        return Math.round(Math.max($(document).width(), $window.width() + $window.scrollLeft()));
    };

    exports.getElementMargin = function ($el) {
        return {
            bottom: parseInt($el.css('margin-bottom').replace('px', '')),
            left: parseInt($el.css('margin-left').replace('px', '')),
            right: parseInt($el.css('margin-right').replace('px', '')),
            top: parseInt($el.css('margin-top').replace('px', ''))
        };
    };

    exports.getElementPadding = function ($el) {
        var padding = {
            bottom: parseInt($el.css('padding-bottom').replace('px', '')),
            left: parseInt($el.css('padding-left').replace('px', '')),
            right: parseInt($el.css('padding-right').replace('px', '')),
            top: parseInt($el.css('padding-top').replace('px', ''))
        };

        return {
            bottom: !isNaN(padding.bottom) ? padding.bottom : 0,
            left: !isNaN(padding.left) ? padding.left : 0,
            right: !isNaN(padding.right) ? padding.right : 0,
            top: !isNaN(padding.top) ? padding.top : 0
        };
    };

    exports.getOptionHeight = function ($select) {
        var realSizeValue = exports.getSelectElementSize($select),
            selectPadding = exports.getElementPadding($select),
            selectScrollHeight = $select[0].scrollHeight - (selectPadding.top + selectPadding.bottom),
            childrenCount = DOM.getSelectVisibleChildren($select).length;

        if (realSizeValue === 1)
            return $select.height();

        return Browser.isIE && realSizeValue > childrenCount ?
            Math.round(selectScrollHeight / childrenCount) :
            Math.round(selectScrollHeight / Math.max(childrenCount, realSizeValue));
    };

    exports.getScrollableParents = function (el, doc) {
        var currentDocument = doc || document,
            $parentsArray = $.makeArray($(el).parents());

        if (DOM.isElementInIframe(el)) {
            var $iFrameParents = $(DOM.getIFrameByElement(el)).parents();

            $.each($iFrameParents, function (index, el) {
                $parentsArray.push(el);
            });
        }

        return $.grep($parentsArray, function (el) {
            return el.tagName.toLowerCase() !== 'body' && exports.hasScroll(el, currentDocument);
        });
    };

    exports.hasScroll = function (el, doc) {
        var currentDocument = doc || document,
            styles = exports.getComputedStyle(el, currentDocument),
            scrollRegEx = /auto|scroll/i,
            overflowX = scrollRegEx.test(styles.overflowX),
            overflowY = scrollRegEx.test(styles.overflowY),
            isHtmlElement = /html/i.test(el.tagName),
            body = isHtmlElement ? $(el).find('body')[0] : null;

        if (!overflowX && !overflowY && !isHtmlElement)
            return false;

        var hasScroll = ((overflowY || isHtmlElement) && el.scrollHeight > el.clientHeight) || ((overflowX || isHtmlElement) && el.scrollWidth > el.clientWidth);

        if (hasScroll)
            return hasScroll;

        //T174562 - wrong scrolling in iframes without src and others iframes
        if (isHtmlElement && body)
            return body.scrollHeight > body.clientHeight || body.scrollWidth > body.clientWidth;
    };

    exports.getElementScroll = function ($el) {
        var isHtmlElement = /html/i.test($el[0].tagName),
            $currentWindow = $(window);

        if (isHtmlElement && DOM.isElementInIframe($el[0])) {
            var currentIFrame = DOM.getIFrameByElement($el[0]);

            if (currentIFrame)
                $currentWindow = $(currentIFrame.contentWindow);
        }

        var targetEl = isHtmlElement ? $currentWindow : $el;

        return {
            left: targetEl.scrollLeft(),
            top: targetEl.scrollTop()
        };
    };

    exports.getSelectElementSize = function ($select) {
        var sizeAttr = $select.attr('size'),
            multipleAttr = $select.attr('multiple'),
            size = !sizeAttr ? 1 : parseInt(sizeAttr);

        if(multipleAttr && (!sizeAttr || size < 1))
            size = MIN_SELECT_SIZE_VALUE;

        return size;
    };

    exports.isNotVisibleNode = function (node) {
        var isHiddenNode = function (node) {
            var getAncestors = function (node) {
                var ancestors = [];

                while (node.parentNode) {
                    ancestors.unshift(node.parentNode);
                    node = node.parentNode;
                }

                return ancestors;
            };

            var getAncestorsAndSelf = function (node) {
                return getAncestors(node).concat([node]);
            };

            var ancestors = getAncestorsAndSelf(node),
                isHidden = false;

            $.each(ancestors, function (index, value) {
                if (value.nodeType === 1 &&
                    exports.getCssStyleValue(value, 'display') === "none") {
                    isHidden = true;

                    return false;
                }
            });

            return isHidden;
        };

        var isVisibilityHiddenTextNode = function (textNode) {
            var el = textNode.nodeType === 3 ? textNode.parentNode : null;

            return el && exports.getCssStyleValue(el, "visibility") === "hidden";
        };

        return !DOM.isRenderedNode(node) || isHiddenNode(node) || isVisibilityHiddenTextNode(node);
    };

    exports.isVisibleChild = function (el) {
        var $el = $(el),
            select = DOM.getSelectParent($el),
            tagName = el.tagName.toLowerCase();

        return select && select.tagName.toLowerCase() === 'select' && exports.getSelectElementSize($(select)) > 1 &&
            (tagName === 'option' || tagName === 'optgroup') &&
                //NOTE: Mozilla does not display group without label and with empty label
            (!Browser.isMozilla || el.label);
    };
});
HammerheadClient.define('Util', function (require, exports) {
    //TODO: split utils to separate
    var $ = require('jQuery'),
        Browser = require('Util.Browser'),
        DOM = require('Util.DOM'),
        Event = require('Util.Event'),
        EventEmitter = require('Util.EventEmitter'),
        KeyChar = require('Util.KeyChar'),
        Position = require('Util.Position'),
        Style = require('Util.Style');


    // Uses in the TestCafe Only
    exports.MAX_OPTION_LIST_LENGTH = Browser.isIE ? 30 : 20;
    exports.BUTTON = {
        LEFT: 0,
        MIDDLE: 1,
        RIGHT: 2
    };
    exports.WHICH_PARAMETER = {
        NO_BUTTON: 0,
        LEFT_BUTTON: 1,
        MIDDLE_BUTTON: 2,
        RIGHT_BUTTON: 3
    };
    exports.BUTTONS_PARAMETER = {
        NO_BUTTON: 0,
        LEFT_BUTTON: 1,
        RIGHT_BUTTON: 2
    };
    exports.POINTER_EVENT_BUTTON = {
        NO_BUTTON: -1,
        LEFT_BUTTON: 0,
        RIGHT_BUTTON: 2
    };

    exports.RESERVED_WORDS = /^(break|case|catch|continue|default|delete|do|else|false|finally|for|function|if|in|instanceof|new|null|return|switch|this|throw|true|try|typeof|var|void|while|with)$/;

    exports.checkPresenceInRectangle = Position.checkPresenceInRectangle;
    exports.clientToOffsetCoord = Position.clientToOffsetCoord;
    exports.findCenter = Position.findCenter;
    exports.findClientCenter = Position.findClientCenter;
    exports.findLineAndRectangelIntersection = Position.findLineAndRectangelIntersection;
    exports.getClientDimensions = Position.getClientDimensions;
    exports.getElementClientRectangle = Position.getElementClientRectangle;
    exports.getElementRectangle = Position.getElementRectangle;
    exports.getElementRectangleForMarking = Position.getElementRectangleForMarking;
    exports.getIFrameCoordinates = Position.getIFrameCoordinates;
    exports.isContainOffset = Position.isContainOffset;
    exports.isElementVisible = Position.isElementVisible;
    exports.getFixedPositionForIFrame = Position.getFixedPositionForIFrame;
    exports.getFixedPosition = Position.getFixedPosition;
    exports.getElementFromPoint = Position.getElementFromPoint;
    exports.getEventPageCoordinates = Position.getEventPageCoordinates;
    exports.getEventAbsoluteCoordinates = Position.getEventAbsoluteCoordinates;

    exports.getCssStyleValue = Style.getCssStyleValue;
    exports.getDocumentElementHeight = Style.getDocumentElementHeight;
    exports.getDocumentElementWidth = Style.getDocumentElementWidth;
    exports.getElementMargin = Style.getElementMargin;
    exports.getElementPadding = Style.getElementPadding;
    exports.getOptionHeight = Style.getOptionHeight;
    exports.getSelectElementSize = Style.getSelectElementSize;
    exports.hasScroll = Style.hasScroll;
    exports.isVisibleChild = Style.isVisibleChild;
    exports.isNotVisibleNode = Style.isNotVisibleNode;
    exports.getScrollableParents = Style.getScrollableParents;

    exports.changeLetterCase = KeyChar.changeLetterCase;
    exports.getKeyCodeByChar = KeyChar.getKeyCodeByChar;
    exports.isArrowKey = KeyChar.isArrowKey;
    exports.isCharByKeyCode = KeyChar.isCharByKeyCode;
    exports.isLetter = KeyChar.isLetter;
    exports.KEYS_MAPS = KeyChar.KEYS_MAPS;
    exports.getArrayByKeyCombination = KeyChar.getArrayByKeyCombination;
    exports.getShortcutsByKeyCombination = KeyChar.getShortcutsByKeyCombination;
    exports.getShortcutHandlerByKeyCombination = KeyChar.getShortcutHandlerByKeyCombination;
    exports.parseKeysString = KeyChar.parseKeysString;
    exports.getChildVisibleIndex = DOM.getChildVisibleIndex;
    exports.getIFrameByWindow = DOM.getIFrameByWindow;
    exports.getScrollbarSize = DOM.getScrollbarSize;
    exports.getSelectParent = DOM.getSelectParent;
    exports.getSelectVisibleChildren = DOM.getSelectVisibleChildren;
    exports.isContentEditableElement = DOM.isContentEditableElement;
    exports.isEditableElement = DOM.isEditableElement;
    exports.isElementContainsNode = DOM.isElementContainsNode;
    exports.isRenderedNode = DOM.isRenderedNode;
    exports.isSelectElement = DOM.isSelectElement;
    exports.isSvgElement = DOM.isSvgElement;
    exports.isTextNode = DOM.isTextNode;
    exports.isTheSameNode = DOM.isTheSameNode;
    exports.setUnselectableAttributeRecursive = DOM.setUnselectableAttributeRecursive;
    exports.getChildIndex = DOM.getChildIndex;
    exports.getTextareaLineNumberByPosition = DOM.getTextareaLineNumberByPosition;
    exports.getTextareaIndentInLine = DOM.getTextareaIndentInLine;
    exports.getTextareaPositionByLineAndOffset = DOM.getTextareaPositionByLineAndOffset;
    exports.getTopSameDomainWindow = DOM.getTopSameDomainWindow;
    // --------------------

    // Uses in the Hammerhead
    exports.getOffsetPosition = Position.getOffsetPosition;
    exports.offsetToClientCoords = Position.offsetToClientCoords;

    exports.getBordersWidth = Style.getBordersWidth;
    exports.getElementScroll = Style.getElementScroll;

    exports.preventDefault = Event.preventDefault;
    exports.RECORDING_LISTENED_EVENTS = Event.RECORDING_LISTENED_EVENTS;
    exports.DOM_EVENTS = Event.DOM_EVENTS;
    exports.stopPropagation = Event.stopPropagation;

    exports.EventEmitter = EventEmitter;

    exports.findDocument = DOM.findDocument;
    exports.getActiveElement = DOM.getActiveElement;
    exports.getIFrameByElement = DOM.getIFrameByElement;
    exports.isAnchor = DOM.isAnchor;
    exports.isCrossDomainIframe = DOM.isCrossDomainIframe;
    exports.isCrossDomainWindows = DOM.isCrossDomainWindows;
    exports.isDocumentInstance = DOM.isDocumentInstance;
    exports.isDomElement = DOM.isDomElement;
    exports.isElementInDocument = DOM.isElementInDocument;
    exports.isElementInIframe = DOM.isElementInIframe;
    exports.isFileInput = DOM.isFileInput;
    exports.isHammerheadAttr = DOM.isHammerheadAttr;
    exports.isHTMLCollection = DOM.isHTMLCollection;
    exports.isIframe = DOM.isIframe;
    exports.isInputElement = DOM.isInputElement;
    exports.isInputWithoutSelectionPropertiesInMozilla = DOM.isInputWithoutSelectionPropertiesInMozilla;
    exports.isLocationInstance = DOM.isLocationInstance;
    exports.isNodeList = DOM.isNodeList;
    exports.isShadowUIElement = DOM.isShadowUIElement;
    exports.isStyleInstance = DOM.isStyleInstance;
    exports.isTextEditableElement = DOM.isTextEditableElement;
    exports.isTextEditableElementAndEditingAllowed = DOM.isTextEditableElementAndEditingAllowed;
    exports.isTextEditableInput = DOM.isTextEditableInput;
    exports.isWindowInstance = DOM.isWindowInstance;

    // We can't use 'obj instanceof $' check because it depends on instance of the jQuery.
    exports.isJQueryObj = function (obj) {
        return obj && !!obj.jquery;
    };
    //-------------------------------------------

    exports.browserVersion = Browser.browserVersion;
    exports.hasTouchEvents = Browser.hasTouchEvents;
    exports.isAndroid = Browser.isAndroid;
    exports.isIE = Browser.isIE;
    exports.isIE11 = Browser.isIE11;
    exports.isIOS = Browser.isIOS;
    exports.isMozilla = Browser.isMozilla;
    exports.isOpera = Browser.isOpera;
    exports.isOperaWithWebKit = Browser.isOperaWithWebKit;
    exports.isSafari = Browser.isSafari;
    exports.isTouchDevice = Browser.isTouchDevice;
    exports.isWebKit = Browser.isWebKit;

    exports.getElementDescription = function (el) {
        var attributes = {
                id: 'id',
                name: 'name',
                class: 'className'
            },
            res = [];

        res.push('<');
        res.push(el.tagName.toLowerCase());

        for (var attr in attributes) {
            if (attributes.hasOwnProperty(attr)) {
                var val = el[attributes[attr]];

                if (val)
                    res.push(' ' + attr + '="' + val + '"');
            }
        }

        res.push('>');

        return res.join('');
    };

    exports.storeElementAttributes = function (propName, el) {
        el[propName] = {};

        $.each(el.attributes, function (index, attribute) {
            el[propName][attribute.nodeName] = attribute.nodeValue;
        });
    };

    exports.ensureArray = function (target) {
        return target instanceof Array ? target : [target];
    };

    exports.isStringOrStringArray = function (target, forbidEmptyArray) {
        if (typeof target === 'string')
            return true;

        if (target instanceof Array && (!forbidEmptyArray || target.length)) {
            for (var i = 0; i < target.length; i++) {
                if (typeof target[i] !== 'string')
                    return false;
            }

            return true;
        }

        return false;
    };

    exports.parseActionArgument = function (item, actionName) {
        var elements = [];

        if (DOM.isDomElement(item))
            return [item];
        else if (actionName && actionName === 'select' && DOM.isTextNode(item))
            return [item];
        else if (typeof item === 'string') {
            $(item).each(function () {
                elements.push(this);
            });

            return elements;
        }
        else if (exports.isJQueryObj(item)) {
            item.each(function () {
                elements.push(this);
            });

            return elements;
        }
        else
            return null;
    };

    // TODO: replace to 'return window !== window.top'
    exports.hasIFrameParent = function (el) {
        var findDocument = function (el) {
            if (el.documentElement)
                return el;

            return el.parentNode ? findDocument(el.parentNode) : document;
        };

        try {
            return window.top.document !== findDocument(el);
        } catch (e) {
            return true;
        }
    };

    var NativeDate = window.Date,
        nativeDateNow = NativeDate.now;

    exports.dateNow = function () {
        return nativeDateNow ? nativeDateNow() : +(new NativeDate());
    };

    //helpers
    //TODO move to separate file
    (function () {
        function sortElementsByFocusingIndex($elements) {
            if (!$elements || !$elements.length)
                return [];

            var $withTabIndex = $elements.filter(function (item, el) {
                return el.tabIndex > 0;
            });

            //iFrames
            var $iFrames = $elements.filter('iframe');

            if (!$withTabIndex.length) {
                var elementsArray = $elements.toArray();

                if ($iFrames.length)
                    elementsArray = insertIFramesContentElements(elementsArray, $iFrames);

                return elementsArray;
            }

            var withTabIndexArray = $withTabIndex.toArray().sort(sortBy('tabIndex')),
                withoutTabIndexArray = $elements.not($withTabIndex).toArray();

            if ($iFrames.length)
                return insertIFramesContentElements(withTabIndexArray, $iFrames).concat(insertIFramesContentElements(withoutTabIndexArray, $iFrames));

            return withTabIndexArray.concat(withoutTabIndexArray);
        }

        function insertIFramesContentElements(elementsArray, $iFrames) {
            var results = [],
                sortedIFrames = sortElementsByTabIndex($iFrames),
                iFramesElements = [];

            for (var i = 0; i < sortedIFrames.length; i++)
                iFramesElements.push(sortElementsByFocusingIndex(getAllFocusableElements($(sortedIFrames[i]))));

            var elementWithTabIndexFilter = function (item, el) {
                return el.tabIndex > 0;
            };

            for (var j = 0; j < elementsArray.length; j++) {
                results.push(elementsArray[j]);

                if (elementsArray[j].tagName.toLowerCase() === 'iframe') {
                    if (Browser.isIE) {
                        results.pop();

                        var $iFramesElements = $(iFramesElements[$.inArray(elementsArray[j], $iFrames)]),
                            $withTabIndex = $iFramesElements.filter(elementWithTabIndexFilter),
                            withTabIndexArray = $withTabIndex.toArray().sort(sortBy('tabIndex')),
                            withoutTabIndexArray = $iFramesElements.not($withTabIndex).toArray();

                        results = results.concat(withTabIndexArray);
                        results.push(elementsArray[j]);
                        results = results.concat(withoutTabIndexArray);
                    }
                    else {
                        if ($.browser.webkit && iFramesElements[$.inArray(elementsArray[j], $iFrames)].length)
                            results.pop();

                        results = results.concat(iFramesElements[$.inArray(elementsArray[j], $iFrames)]);
                    }
                }
            }

            return results;
        }

        function sortElementsByTabIndex($elements) {
            var $withTabIndex = $elements.filter(function (item, el) {
                return el.tabIndex > 0;
            });

            if (!$withTabIndex.length)
                return $elements.toArray();

            return $withTabIndex.toArray().sort(sortBy('tabIndex')).concat($elements.not($withTabIndex).toArray());
        }

        function sortBy(property) {
            return function (a, b) {
                if (a[property] < b[property])
                    return -1;
                if (a[property] > b[property])
                    return 1;

                return 0;
            };
        }

        function getAllFocusableElements($iframe) {
            var $allFocusable = $();

            if ($iframe) {
                //NOTE: We can get elements of the same domain iframe only
                try {
                    $allFocusable = $iframe.contents(0).find(getFocusableSelector());
                } catch (e) {
                    return $allFocusable;
                }
            } else
                $allFocusable = $(getFocusableSelector());

            $allFocusable = $allFocusable
                .not(":disabled")
                .filter(function () {
                    return $(this).attr("tabIndex") !== -1;
                });

            //NOTE: <option> element visible/ hidden in all browser differently
            // http://api.jquery.com/hidden-selector/
            if ($.browser.webkit || $.browser.opera) {
                var $hidden = $allFocusable.filter(function () {
                    return ($(this).is(":hidden") && !($(this).is("option")));
                });

                $allFocusable = $allFocusable.not($hidden);
            }
            else
                $allFocusable = $allFocusable.not(':hidden');

            $allFocusable = $allFocusable.filter(function () {
                var $this = $(this);

                return !($this.is("a") && $this.attr("href") === '' && !$this.attr("tabIndex")) && $this.css('visibility') !== 'hidden';
            });

            return $allFocusable;
        }

        function getFocusableSelector() {
            //NOTE: We don't take into account the case of embedded contentEditable elements and specify the contentEditable attribute for focusable elements
            var selectorPostfix = ', [contenteditable="true"], [contenteditable=""], [tabIndex]';

            if (Browser.isIE)
                return ':input, a[href][href != ""], iframe' + selectorPostfix;

            if ($.browser.opera)
                return ':input' + selectorPostfix;

            return ':input, a[href], iframe' + selectorPostfix;
        }

        exports.getNextFocusableElement = function (element, reverse) {
            var offset = reverse ? -1 : 1,
                allFocusable = sortElementsByFocusingIndex(getAllFocusableElements());

            //NOTE: in all browsers except Mozilla and Opera focus sets on one radio set from group only.
            // in Mozilla and Opera focus sets on any radio set.
            if (element.tagName === "INPUT" && element.type === "radio" && element.name !== "" && !(Browser.isMozilla || $.browser.opera)) {
                allFocusable = $.grep(allFocusable, function (item) {
                    return !item.name || item === element || item.name !== element.name;
                });
            }

            var currentIndex = -1;

            $.each(allFocusable, function (index, item) {
                if (item === element) {
                    currentIndex = index;
                    return false;
                }
            });

            if ((!reverse && currentIndex === allFocusable.length - 1) || (reverse && currentIndex === 0))
                return $('body')[0];

            if (reverse && currentIndex === -1)
                return allFocusable[allFocusable.length - 1];

            return allFocusable[currentIndex + offset];
        };

        exports.isElementFocusable = function ($element) {
            var isFocusable = $element.is(getFocusableSelector() + ', body') && !$element.is(':disabled') && $element.attr("tabIndex") !== -1;

            if ($.browser.webkit || $.browser.opera)
                isFocusable = isFocusable && (!$element.is(':hidden') || $element.is('option'));
            else
                isFocusable = isFocusable && !$element.is(':hidden');


            return (isFocusable && !($element.is("a") && $element.attr("href") === '' && !$element.attr("tabIndex")) && $element.css('visibility') !== 'hidden');
        };

    })();

    //Inherit
    exports.inherit = function (Child, Parent) {
        var Func = function () {
        };

        Func.prototype = Parent.prototype;

        $.extend(Child.prototype, new Func());
        Child.prototype.constructor = Child;
        Child.base = Parent.prototype;
    };

    exports.forEachKey = function(obj, func) {
        for(var key in obj) {
            if(obj.hasOwnProperty(key))
                func(key);
        }
    };

    exports.arrForEach = function(arr, func) {
        for(var i = 0; i < arr.length; i++)
            func(arr[i], i);
    };
});
HammerheadClient.define('DOMSandbox.Upload.HiddenInfo', function (require, exports) {
    var SharedConst = require('Shared.Const');

    function createInput(form) {
        var hiddenInput = document.createElement('input');

        hiddenInput.type = 'hidden';
        hiddenInput.name = SharedConst.UPLOAD_SANDBOX_HIDDEN_INPUT_NAME;
        hiddenInput.value = '[]';
        form.appendChild(hiddenInput);

        return hiddenInput;
    }

    function getInput(form) {
        return form.querySelector('[name="' + SharedConst.UPLOAD_SANDBOX_HIDDEN_INPUT_NAME + '"]') ||
            createInput(form);
    }

    function indexOf(info, input) {
        for (var index = 0; index < info.length; index++) {
            if (info[index].id === input.id || info[index].name === input.name)
                return index;
        }

        return -1;
    }

    exports.addInputInfo = function (input, fileList, value) {
        var formInfo = exports.getFormInfo(input);

        if (formInfo) {
            var files = [];

            Array.prototype.slice.call(fileList).forEach(function (file) {
                files.push({
                    name: file.name,
                    type: file.type,
                    data: file.base64
                });
            });

            var inputInfoIndex = indexOf(formInfo, input),
                inputInfo = {
                    id: input.id,
                    name: input.name,
                    files: files,
                    value: value
                };

            if (inputInfoIndex === -1)
                formInfo.push(inputInfo);
            else
                formInfo[inputInfoIndex] = inputInfo;

            exports.setFormInfo(input, formInfo);
        }
    };

    exports.getFormInfo = function (input) {
        return input.form ? JSON.parse(getInput(input.form).value) : null;
    };

    exports.setFormInfo = function (input, info) {
        if (input.form) {
            var hiddenInput = getInput(input.form);

            hiddenInput.value = JSON.stringify(info);
        }
    };

    exports.removeInputInfo = function (input) {
        var uploadInfo = exports.getFormInfo(input);

        if (uploadInfo) {
            var inputInfoIndex = indexOf(uploadInfo, input);

            if (inputInfoIndex !== -1) {
                uploadInfo.splice(inputInfoIndex, 1);
                exports.setFormInfo(input, uploadInfo);

                return true;
            }
        }

        return false;
    };
});
HammerheadClient.define('DOMSandbox.Upload.InfoManager', function (require, exports) {
    var $ = require('jQuery'),
        HiddenInfo = require('DOMSandbox.Upload.HiddenInfo'),
        ServiceCommands = require('Shared.ServiceCommands'),
        Transport = require('Transport'),
        Settings = require('Settings'),
        NativeMethods = require('DOMSandbox.NativeMethods'),
        Util = require('Util'),
        SharedConst = require('Shared.Const');

    var FAKE_PATH_STRING = 'C:\\fakepath\\',
        UPLOAD_IFRAME_FOR_IE9_ID = 'uploadIFrameForIE9' + SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX;

    var uploadInfo = [];

    function FileListWrapper(length) {
        this.length = length;
        this.item = function (index) {
            return this[index];
        };
    }

    function base64ToBlob(base64Data, mimeType, sliceSize) {
        mimeType = mimeType || '';
        sliceSize = sliceSize || 512;

        var byteCharacters = atob(base64Data),
            byteArrays = [];

        for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            var slice = byteCharacters.slice(offset, offset + sliceSize),
                byteNumbers = new Array(slice.length);

            for (var i = 0; i < slice.length; i++)
                byteNumbers[i] = slice.charCodeAt(i);

            byteArrays.push(new Uint8Array(byteNumbers));
        }

        return new Blob(byteArrays, {type: mimeType});
    }

    function createFileListWrapper(fileList) {
        var fileListWrapper = new FileListWrapper(fileList.length);

        for (var i = 0; i < fileList.length; i++)
            fileListWrapper[i] = createFileWrapper(fileList[i]);

        return fileListWrapper;
    }

    function createFileWrapper(fileInfo) {
        var wrapper = null;

        if (!window.Blob) {
            wrapper = {
                size: fileInfo.info.size,
                type: fileInfo.info.type
            };
        } else if (fileInfo.blob) {
            wrapper = new Blob([fileInfo.blob], {type: fileInfo.info.type});
        } else
            wrapper = base64ToBlob(fileInfo.data, fileInfo.info.type);

        wrapper.name = fileInfo.info.name;
        wrapper.lastModifiedDate = new Date(fileInfo.info.lastModifiedDate);
        wrapper.base64 = fileInfo.data;

        return wrapper;
    }

    function getFileListData(fileList) {
        var data = [];

        for (var i = 0; i < fileList.length; i++)
            data.push(fileList[i].base64);

        return data;
    }

    function getUploadIFrameForIE9() {
        var uploadIFrame = NativeMethods.querySelector.call(document, '#' + UPLOAD_IFRAME_FOR_IE9_ID);

        if (!uploadIFrame) {
            uploadIFrame = NativeMethods.createElement.call(document, 'iframe');

            NativeMethods.setAttribute.call(uploadIFrame, 'id', UPLOAD_IFRAME_FOR_IE9_ID);
            NativeMethods.setAttribute.call(uploadIFrame, 'name', UPLOAD_IFRAME_FOR_IE9_ID);
            uploadIFrame.style.display = 'none';

            NativeMethods.querySelector.call(document, '#root' + SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX).appendChild(uploadIFrame);
        }

        return uploadIFrame;
    }

    function loadFileListDataForIE9(input, callback) {
        var form = input.form;

        if (form && input.value) {
            var sourceTarget = form.target,
                sourceActionString = form.action,
                sourceMethod = form.method,
                uploadIFrame = getUploadIFrameForIE9();

            uploadIFrame.addEventListener('load', function () {
                var fileListWrapper = new FileListWrapper(1);

                fileListWrapper[0] = createFileWrapper(JSON.parse(uploadIFrame.contentWindow.document.body.innerHTML));
                uploadIFrame.removeEventListener('load', arguments.callee);
                callback(fileListWrapper);
            });

            form.action = Settings.IE9_FILE_READER_SHIM_URL + '?input-name=' + input.name + '&filename=' + input.value;
            form.target = UPLOAD_IFRAME_FOR_IE9_ID;
            form.method = 'post';

            form.submit();

            form.action = sourceActionString;
            form.target = sourceTarget;
            form.method = sourceMethod;
        } else
            callback(new FileListWrapper(0));
    }


    exports.clearUploadInfo = function (input) {
        var inputInfo = exports.getUploadInfo(input);

        if(inputInfo) {
            inputInfo.files = createFileListWrapper([]);
            inputInfo.value = '';

            return HiddenInfo.removeInputInfo(input);
        }
    };

    exports.formatValue = function (fileNames) {
        var value = '';

        fileNames = typeof fileNames === 'string' ? [fileNames] : fileNames;

        if (fileNames && fileNames.length) {
            if ($.browser.webkit) {
                value = FAKE_PATH_STRING + fileNames[0].split('/').pop();
            } else if ($.browser.msie) {
                var filePaths = [];

                for (var i = 0; i < fileNames.length; i++)
                    filePaths.push(FAKE_PATH_STRING + fileNames[i].split('/').pop());

                value = filePaths.join(', ');
            } else
                return fileNames[0].split('/').pop();
        }

        return value;
    };

    exports.getFileNames = function (fileList, value) {
        var result = [];

        if (fileList) {
            for (var i = 0; i < fileList.length; i++)
                result.push(fileList[i].name);
        } else if (value.lastIndexOf('\\') !== -1)
            result.push(value.substr(value.lastIndexOf('\\') + 1));

        return result;
    };

    exports.getFiles = function (input) {
        var inputInfo = exports.getUploadInfo(input);

        return inputInfo ? inputInfo.files : createFileListWrapper([]);
    };

    exports.getUploadInfo = function (input) {
        for (var i = 0; i < uploadInfo.length; i++) {
            if (uploadInfo[i].input === input)
                return uploadInfo[i];
        }

        return null;
    };

    exports.getValue = function (input) {
        var inputInfo = exports.getUploadInfo(input);

        return inputInfo ? inputInfo.value : '';
    };

    exports.loadFileListData = function (input, fileList, callback) {
        if (Util.isIE && Util.browserVersion === 9)
            loadFileListDataForIE9(input, callback);
        else if (!fileList.length)
            callback(new FileListWrapper(0));
        else {
            var index = 0,
                fileReader = new FileReader(),
                file = fileList[index],
                fileListWrapper = new FileListWrapper(fileList.length);

            fileReader.addEventListener('load', function (e) {
                fileListWrapper[index] = createFileWrapper({
                    data: e.target.result.substr(e.target.result.indexOf(',') + 1),
                    blob: file.slice(0, file.size),
                    info: {
                        type: file.type,
                        name: file.name,
                        lastModifiedDate: file.lastModifiedDate
                    }
                });

                if (fileList[++index]) {
                    file = fileList[index];
                    fileReader.readAsDataURL(file);
                } else
                    callback(fileListWrapper);
            });
            fileReader.readAsDataURL(file);
        }
    };

    exports.loadFilesInfoFromServer = function (filePaths, callback) {
        Transport.asyncServiceMsg({
            cmd: ServiceCommands.GET_UPLOADED_FILES,
            filePaths: typeof filePaths === 'string' ? [filePaths] : filePaths
        }, callback);
    };

    exports.prepareFileListWrapper = function (filesInfo, callback) {
        var errs = [],
            validFilesInfo = [];

        for (var i = 0; i < filesInfo.length; i++)
            (filesInfo[i].code ? errs : validFilesInfo).push(filesInfo[i]);

        callback(errs, createFileListWrapper(validFilesInfo));
    };

    exports.setUploadInfo = function (input, fileList, value) {
        var inputInfo = exports.getUploadInfo(input);

        if (!inputInfo) {
            inputInfo = { input: input };
            uploadInfo.push(inputInfo);
        }

        inputInfo.files = fileList;
        inputInfo.value = value;

        HiddenInfo.addInputInfo(input, fileList, value);
    };

    exports.sendFilesInfoToServer = function (fileList, fileNames, callback) {
        Transport.asyncServiceMsg({
            cmd: ServiceCommands.UPLOAD_FILES,
            data: getFileListData(fileList),
            fileNames: fileNames
        }, callback);
    };
});
HammerheadClient.define('DOMSandbox.Upload', function (require, exports) {
    var EventSandbox = require('DOMSandbox.Event'),
        SharedConst  = require('Shared.Const'),
        Util         = require('Util');

    var eventEmitter = new Util.EventEmitter();

    exports.FILE_UPLOADING_EVENT = 'fileUploading';

    exports.on  = eventEmitter.on.bind(eventEmitter);
    exports.off = eventEmitter.off.bind(eventEmitter);

    function riseChangeEvent (input) {
        EventSandbox.Simulator.change(input);
    }

    function getCurrentInfoManager (input) {
        var contextWindow = input[SharedConst.DOM_SANDBOX_PROCESSED_CONTEXT];

        return contextWindow.Hammerhead._UploadManager;
    }

    exports.init = function (window) {
        EventSandbox.addInternalEventListener(window, ['change'], function (e, dispatched) {
            var input              = e.target || e.srcElement,
                currentInfoManager = getCurrentInfoManager(input);

            if (Util.isFileInput(input) && !dispatched) {
                Util.stopPropagation(e);
                Util.preventDefault(e);

                if (!!input.value || !!currentInfoManager.getValue(input)) {
                    var fileNames = currentInfoManager.getFileNames(input.files, input.value);

                    eventEmitter.emit(exports.FILE_UPLOADING_EVENT, fileNames, input, function (complete) {
                        currentInfoManager.loadFileListData(input, input.files, function (fileList) {
                            currentInfoManager.setUploadInfo(input, fileList, input.value);
                            currentInfoManager.sendFilesInfoToServer(fileList, fileNames, function (errs) {
                                riseChangeEvent(input);
                                complete(errs);
                            });
                        });
                    });
                }
            }
        });
    };

    exports.getFiles = function (input) {
        return input.files !== void 0 ? getCurrentInfoManager(input).getFiles(input) : void 0;
    };

    exports.getUploadElementValue = function (input) {
        return getCurrentInfoManager(input).getValue(input);
    };

    exports.setUploadElementValue = function (input, value) {
        if (value === '') {
            if (getCurrentInfoManager(input).clearUploadInfo(input) && Util.isIE && Util.browserVersion === 11)
                riseChangeEvent(input);
        }

        return value;
    };

    exports.upload = function (input, filePaths, callback) {
        var currentInfoManager = getCurrentInfoManager(input);

        filePaths = filePaths || [];

        currentInfoManager.loadFilesInfoFromServer(filePaths, function (filesInfo) {
            currentInfoManager.prepareFileListWrapper(filesInfo, function (errs, fileList) {
                if (!errs.length) {
                    var value = currentInfoManager.formatValue(filePaths);

                    currentInfoManager.setUploadInfo(input, fileList, value);
                    riseChangeEvent(input);
                }

                callback(errs);
            });
        });
    };
});

(function () {
    var Errors = typeof module !== 'undefined' && module.exports ? exports : HammerheadClient;

    Errors.URL_UTIL_PROTOCOL_IS_NOT_SUPPORTED = 'CLIENT_URL_UTIL_PROTOCOL_IS_NOT_SUPPORTED';

    Errors.hasErrorStepName = function(err){
      return err.code !== Errors.URL_UTIL_PROTOCOL_IS_NOT_SUPPORTED;
    };

    if (typeof module !== 'undefined' && module.exports)
        module.exports = Errors;
    else {
        HammerheadClient.define('Shared.Errors', function () {
            this.exports = Errors;
        });
    }
})();
(function () {
    var Const = {};

    Const.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME = 'tc_odm_e01a2ff5';
    Const.DOM_SANDBOX_PROCESSED_CONTEXT = 'tc-spc-c1208da2';
    Const.DOM_SANDBOX_STORED_ATTR_POSTFIX = '_e01a2f_stored';
    Const.EVENT_SANDBOX_WHICH_PROPERTY_WRAPPER = 'tc-e01a2f-which';

    Const.IS_STYLESHEET_PROCESSED_RULE = '.style-processed-c1208da2 {}';

    Const.UPLOAD_SANDBOX_HIDDEN_INPUT_NAME = 'upload-89fc3-info';

    Const.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR = "data-1b082a6cec-hover";

    Const.XHR_CORS_SUPPORTED_FLAG = 0x10;
    Const.XHR_REQUEST_MARKER_HEADER = 'x-tc-xm-cd46977f';
    Const.XHR_WITH_CREDENTIALS_FLAG = 0x01;

    Const.PROPERTY_PREFIX = "tc-1b082a6cec-51966-";
    Const.TEST_CAFE_UI_CLASSNAME_POSTFIX = '-TC2b9a6d';
    Const.TEST_CAFE_SCRIPT_CLASSNAME = 'script' + Const.TEST_CAFE_UI_CLASSNAME_POSTFIX;
    Const.TEST_CAFE_UI_STYLESHEET_CLASSNAME = 'ui-stylesheet';
    Const.TEST_CAFE_UI_STYLESHEET_FULL_CLASSNAME = Const.TEST_CAFE_UI_STYLESHEET_CLASSNAME + Const.TEST_CAFE_UI_CLASSNAME_POSTFIX;

    if (typeof module !== 'undefined' && module.exports)
        module.exports = Const;
    else {
        HammerheadClient.define('Shared.Const', function () {
            this.exports = Const;
        });
    }
})();
(function () {
    var JSParsingTools = {};

    // ---------------- Acorn -------------------
    var acornExports = {};

    (function (exports) {
        // Acorn is a tiny, fast JavaScript parser written in JavaScript.
//
// Acorn was written by Marijn Haverbeke and released under an MIT
// license. The Unicode regexps (for identifiers and whitespace) were
// taken from [Esprima](http://esprima.org) by Ariya Hidayat.
//
// Git repositories for Acorn are available at
//
//     http://marijnhaverbeke.nl/git/acorn
//     https://github.com/marijnh/acorn.git
//
// Please use the [github bug tracker][ghbt] to report issues.
//
// [ghbt]: https://github.com/marijnh/acorn/issues
//
// This file defines the main parser interface. The library also comes
// with a [error-tolerant parser][dammit] and an
// [abstract syntax tree walker][walk], defined in other files.
//
// [dammit]: acorn_loose.js
// [walk]: util/walk.js

        (function (root, mod) {
            if (typeof exports == "object" && typeof module == "object") return mod(exports); // CommonJS
            if (typeof define == "function" && define.amd) return define(["exports"], mod); // AMD
            mod(root.acorn || (root.acorn = {})); // Plain browser env
        })(this, function (exports) {
            "use strict";

            exports.version = "0.4.1";

            // The main exported interface (under `self.acorn` when in the
            // browser) is a `parse` function that takes a code string and
            // returns an abstract syntax tree as specified by [Mozilla parser
            // API][api], with the caveat that the SpiderMonkey-specific syntax
            // (`let`, `yield`, inline XML, etc) is not recognized.
            //
            // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

            var options, input, inputLen, sourceFile;

            exports.parse = function (inpt, opts) {
                input = String(inpt);
                inputLen = input.length;
                setOptions(opts);
                initTokenState();
                return parseTopLevel(options.program);
            };

            // A second optional argument can be given to further configure
            // the parser process. These options are recognized:

            var defaultOptions = exports.defaultOptions = {
                // `ecmaVersion` indicates the ECMAScript version to parse. Must
                // be either 3 or 5. This
                // influences support for strict mode, the set of reserved words, and
                // support for getters and setter.
                ecmaVersion: 5,
                // Turn on `strictSemicolons` to prevent the parser from doing
                // automatic semicolon insertion.
                strictSemicolons: false,
                // When `allowTrailingCommas` is false, the parser will not allow
                // trailing commas in array and object literals.
                allowTrailingCommas: true,
                // By default, reserved words are not enforced. Enable
                // `forbidReserved` to enforce them.
                forbidReserved: false,
                // When `locations` is on, `loc` properties holding objects with
                // `start` and `end` properties in `{line, column}` form (with
                // line being 1-based and column 0-based) will be attached to the
                // nodes.
                locations: false,
                // A function can be passed as `onComment` option, which will
                // cause Acorn to call that function with `(block, text, start,
                // end)` parameters whenever a comment is skipped. `block` is a
                // boolean indicating whether this is a block (`/* */`) comment,
                // `text` is the content of the comment, and `start` and `end` are
                // character offsets that denote the start and end of the comment.
                // When the `locations` option is on, two more parameters are
                // passed, the full `{line, column}` locations of the start and
                // end of the comments.
                onComment: null,
                // Nodes have their start and end characters offsets recorded in
                // `start` and `end` properties (directly on the node, rather than
                // the `loc` object, which holds line/column data. To also add a
                // [semi-standardized][range] `range` property holding a `[start,
                // end]` array with the same numbers, set the `ranges` option to
                // `true`.
                //
                // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
                ranges: false,
                // It is possible to parse multiple files into a single AST by
                // passing the tree produced by parsing the first file as
                // `program` option in subsequent parses. This will add the
                // toplevel forms of the parsed file to the `Program` (top) node
                // of an existing parse tree.
                program: null,
                // When `location` is on, you can pass this to record the source
                // file in every node's `loc` object.
                sourceFile: null,
                // This value, if given, is stored in every node, whether
                // `location` is on or off.
                directSourceFile: null
            };

            function setOptions(opts) {
                options = opts || {};
                for (var opt in defaultOptions) if (!Object.prototype.hasOwnProperty.call(options, opt))
                    options[opt] = defaultOptions[opt];
                sourceFile = options.sourceFile || null;
            }

            // The `getLineInfo` function is mostly useful when the
            // `locations` option is off (for performance reasons) and you
            // want to find the line/column position for a given character
            // offset. `input` should be the code string that the offset refers
            // into.

            var getLineInfo = exports.getLineInfo = function (input, offset) {
                for (var line = 1, cur = 0; ;) {
                    lineBreak.lastIndex = cur;
                    var match = lineBreak.exec(input);
                    if (match && match.index < offset) {
                        ++line;
                        cur = match.index + match[0].length;
                    } else break;
                }
                return {line: line, column: offset - cur};
            };

            // Acorn is organized as a tokenizer and a recursive-descent parser.
            // The `tokenize` export provides an interface to the tokenizer.
            // Because the tokenizer is optimized for being efficiently used by
            // the Acorn parser itself, this interface is somewhat crude and not
            // very modular. Performing another parse or call to `tokenize` will
            // reset the internal state, and invalidate existing tokenizers.

            exports.tokenize = function (inpt, opts) {
                input = String(inpt);
                inputLen = input.length;
                setOptions(opts);
                initTokenState();

                var t = {};

                function getToken(forceRegexp) {
                    readToken(forceRegexp);
                    t.start = tokStart;
                    t.end = tokEnd;
                    t.startLoc = tokStartLoc;
                    t.endLoc = tokEndLoc;
                    t.type = tokType;
                    t.value = tokVal;
                    return t;
                }

                getToken.jumpTo = function (pos, reAllowed) {
                    tokPos = pos;
                    if (options.locations) {
                        tokCurLine = 1;
                        tokLineStart = lineBreak.lastIndex = 0;
                        var match;
                        while ((match = lineBreak.exec(input)) && match.index < pos) {
                            ++tokCurLine;
                            tokLineStart = match.index + match[0].length;
                        }
                    }
                    tokRegexpAllowed = reAllowed;
                    skipSpace();
                };
                return getToken;
            };

            // State is kept in (closure-)global variables. We already saw the
            // `options`, `input`, and `inputLen` variables above.

            // The current position of the tokenizer in the input.

            var tokPos;

            // The start and end offsets of the current token.

            var tokStart, tokEnd;

            // When `options.locations` is true, these hold objects
            // containing the tokens start and end line/column pairs.

            var tokStartLoc, tokEndLoc;

            // The type and value of the current token. Token types are objects,
            // named by variables against which they can be compared, and
            // holding properties that describe them (indicating, for example,
            // the precedence of an infix operator, and the original name of a
            // keyword token). The kind of value that's held in `tokVal` depends
            // on the type of the token. For literals, it is the literal value,
            // for operators, the operator name, and so on.

            var tokType, tokVal;

            // Interal state for the tokenizer. To distinguish between division
            // operators and regular expressions, it remembers whether the last
            // token was one that is allowed to be followed by an expression.
            // (If it is, a slash is probably a regexp, if it isn't it's a
            // division operator. See the `parseStatement` function for a
            // caveat.)

            var tokRegexpAllowed;

            // When `options.locations` is true, these are used to keep
            // track of the current line, and know when a new line has been
            // entered.

            var tokCurLine, tokLineStart;

            // These store the position of the previous token, which is useful
            // when finishing a node and assigning its `end` position.

            var lastStart, lastEnd, lastEndLoc;

            // This is the parser's state. `inFunction` is used to reject
            // `return` statements outside of functions, `labels` to verify that
            // `break` and `continue` have somewhere to jump to, and `strict`
            // indicates whether strict mode is on.

            var inFunction, labels, strict;

            // This function is used to raise exceptions on parse errors. It
            // takes an offset integer (into the current `input`) to indicate
            // the location of the error, attaches the position to the end
            // of the error message, and then raises a `SyntaxError` with that
            // message.

            function raise(pos, message) {
                var loc = getLineInfo(input, pos);
                message += " (" + loc.line + ":" + loc.column + ")";
                var err = new SyntaxError(message);
                err.pos = pos;
                err.loc = loc;
                err.raisedAt = tokPos;
                throw err;
            }

            // Reused empty array added for node fields that are always empty.

            var empty = [];

            // ## Token types

            // The assignment of fine-grained, information-carrying type objects
            // allows the tokenizer to store the information it has about a
            // token in a way that is very cheap for the parser to look up.

            // All token type variables start with an underscore, to make them
            // easy to recognize.

            // These are the general types. The `type` property is only used to
            // make them recognizeable when debugging.

            var _num = {type: "num"}, _regexp = {type: "regexp"}, _string = {type: "string"};
            var _name = {type: "name"}, _eof = {type: "eof"};

            // Keyword tokens. The `keyword` property (also used in keyword-like
            // operators) indicates that the token originated from an
            // identifier-like word, which is used when parsing property names.
            //
            // The `beforeExpr` property is used to disambiguate between regular
            // expressions and divisions. It is set on all token types that can
            // be followed by an expression (thus, a slash after them would be a
            // regular expression).
            //
            // `isLoop` marks a keyword as starting a loop, which is important
            // to know when parsing a label, in order to allow or disallow
            // continue jumps to that label.

            var _break = {keyword: "break"}, _case = {keyword: "case", beforeExpr: true}, _catch = {keyword: "catch"};
            var _continue = {keyword: "continue"}, _debugger = {keyword: "debugger"}, _default = {keyword: "default"};
            var _do = {keyword: "do", isLoop: true}, _else = {keyword: "else", beforeExpr: true};
            var _finally = {keyword: "finally"}, _for = {
                keyword: "for",
                isLoop: true
            }, _function = {keyword: "function"};
            var _if = {keyword: "if"}, _return = {keyword: "return", beforeExpr: true}, _switch = {keyword: "switch"};
            var _throw = {keyword: "throw", beforeExpr: true}, _try = {keyword: "try"}, _var = {keyword: "var"};
            var _while = {keyword: "while", isLoop: true}, _with = {keyword: "with"}, _new = {
                keyword: "new",
                beforeExpr: true
            };
            var _this = {keyword: "this"};

            // The keywords that denote values.

            var _null = {keyword: "null", atomValue: null}, _true = {keyword: "true", atomValue: true};
            var _false = {keyword: "false", atomValue: false};

            // Some keywords are treated as regular operators. `in` sometimes
            // (when parsing `for`) needs to be tested against specifically, so
            // we assign a variable name to it for quick comparing.

            var _in = {keyword: "in", binop: 7, beforeExpr: true};

            // Map keyword names to token types.

            var keywordTypes = {
                "break": _break, "case": _case, "catch": _catch,
                "continue": _continue, "debugger": _debugger, "default": _default,
                "do": _do, "else": _else, "finally": _finally, "for": _for,
                "function": _function, "if": _if, "return": _return, "switch": _switch,
                "throw": _throw, "try": _try, "var": _var, "while": _while, "with": _with,
                "null": _null, "true": _true, "false": _false, "new": _new, "in": _in,
                "instanceof": {keyword: "instanceof", binop: 7, beforeExpr: true}, "this": _this,
                "typeof": {keyword: "typeof", prefix: true, beforeExpr: true},
                "void": {keyword: "void", prefix: true, beforeExpr: true},
                "delete": {keyword: "delete", prefix: true, beforeExpr: true}
            };

            // Punctuation token types. Again, the `type` property is purely for debugging.

            var _bracketL = {type: "[", beforeExpr: true}, _bracketR = {type: "]"}, _braceL = {
                type: "{",
                beforeExpr: true
            };
            var _braceR = {type: "}"}, _parenL = {type: "(", beforeExpr: true}, _parenR = {type: ")"};
            var _comma = {type: ",", beforeExpr: true}, _semi = {type: ";", beforeExpr: true};
            var _colon = {type: ":", beforeExpr: true}, _dot = {type: "."}, _question = {type: "?", beforeExpr: true};

            // Operators. These carry several kinds of properties to help the
            // parser use them properly (the presence of these properties is
            // what categorizes them as operators).
            //
            // `binop`, when present, specifies that this operator is a binary
            // operator, and will refer to its precedence.
            //
            // `prefix` and `postfix` mark the operator as a prefix or postfix
            // unary operator. `isUpdate` specifies that the node produced by
            // the operator should be of type UpdateExpression rather than
            // simply UnaryExpression (`++` and `--`).
            //
            // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
            // binary operators with a very low precedence, that should result
            // in AssignmentExpression nodes.

            var _slash = {binop: 10, beforeExpr: true}, _eq = {isAssign: true, beforeExpr: true};
            var _assign = {isAssign: true, beforeExpr: true};
            var _incDec = {postfix: true, prefix: true, isUpdate: true}, _prefix = {prefix: true, beforeExpr: true};
            var _logicalOR = {binop: 1, beforeExpr: true};
            var _logicalAND = {binop: 2, beforeExpr: true};
            var _bitwiseOR = {binop: 3, beforeExpr: true};
            var _bitwiseXOR = {binop: 4, beforeExpr: true};
            var _bitwiseAND = {binop: 5, beforeExpr: true};
            var _equality = {binop: 6, beforeExpr: true};
            var _relational = {binop: 7, beforeExpr: true};
            var _bitShift = {binop: 8, beforeExpr: true};
            var _plusMin = {binop: 9, prefix: true, beforeExpr: true};
            var _multiplyModulo = {binop: 10, beforeExpr: true};

            // Provide access to the token types for external users of the
            // tokenizer.

            exports.tokTypes = {
                bracketL: _bracketL, bracketR: _bracketR, braceL: _braceL, braceR: _braceR,
                parenL: _parenL, parenR: _parenR, comma: _comma, semi: _semi, colon: _colon,
                dot: _dot, question: _question, slash: _slash, eq: _eq, name: _name, eof: _eof,
                num: _num, regexp: _regexp, string: _string
            };
            for (var kw in keywordTypes) exports.tokTypes["_" + kw] = keywordTypes[kw];

            // This is a trick taken from Esprima. It turns out that, on
            // non-Chrome browsers, to check whether a string is in a set, a
            // predicate containing a big ugly `switch` statement is faster than
            // a regular expression, and on Chrome the two are about on par.
            // This function uses `eval` (non-lexical) to produce such a
            // predicate from a space-separated string of words.
            //
            // It starts by sorting the words by length.

            function makePredicate(words) {
                words = words.split(" ");
                var f = "", cats = [];
                out: for (var i = 0; i < words.length; ++i) {
                    for (var j = 0; j < cats.length; ++j)
                        if (cats[j][0].length == words[i].length) {
                            cats[j].push(words[i]);
                            continue out;
                        }
                    cats.push([words[i]]);
                }
                function compareTo(arr) {
                    if (arr.length == 1) return f += "return str === " + JSON.stringify(arr[0]) + ";";
                    f += "switch(str){";
                    for (var i = 0; i < arr.length; ++i) f += "case " + JSON.stringify(arr[i]) + ":";
                    f += "return true}return false;";
                }

                // When there are more than three length categories, an outer
                // switch first dispatches on the lengths, to save on comparisons.

                if (cats.length > 3) {
                    cats.sort(function (a, b) {
                        return b.length - a.length;
                    });
                    f += "switch(str.length){";
                    for (var i = 0; i < cats.length; ++i) {
                        var cat = cats[i];
                        f += "case " + cat[0].length + ":";
                        compareTo(cat);
                    }
                    f += "}";

                    // Otherwise, simply generate a flat `switch` statement.

                } else {
                    compareTo(words);
                }
                return new Function("str", f);
            }

            // The ECMAScript 3 reserved word list.

            var isReservedWord3 = makePredicate("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile");

            // ECMAScript 5 reserved words.

            var isReservedWord5 = makePredicate("class enum extends super const export import");

            // The additional reserved words in strict mode.

            var isStrictReservedWord = makePredicate("implements interface let package private protected public static yield");

            // The forbidden variable names in strict mode.

            var isStrictBadIdWord = makePredicate("eval arguments");

            // And the keywords.

            var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this");

            // ## Character categories

            // Big ugly regular expressions that match characters in the
            // whitespace, identifier, and identifier-start categories. These
            // are only applied when a character is found to actually have a
            // code point above 128.

            var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
            var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
            var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
            var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
            var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

            // Whether a single character denotes a newline.

            var newline = /[\n\r\u2028\u2029]/;

            // Matches a whole line break (where CRLF is considered a single
            // line break). Used to count lines.

            var lineBreak = /\r\n|[\n\r\u2028\u2029]/g;

            // Test whether a given character code starts an identifier.

            var isIdentifierStart = exports.isIdentifierStart = function (code) {
                if (code < 65) return code === 36;
                if (code < 91) return true;
                if (code < 97) return code === 95;
                if (code < 123)return true;
                return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
            };

            // Test whether a given character is part of an identifier.

            var isIdentifierChar = exports.isIdentifierChar = function (code) {
                if (code < 48) return code === 36;
                if (code < 58) return true;
                if (code < 65) return false;
                if (code < 91) return true;
                if (code < 97) return code === 95;
                if (code < 123)return true;
                return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
            };

            // ## Tokenizer

            // These are used when `options.locations` is on, for the
            // `tokStartLoc` and `tokEndLoc` properties.

            function line_loc_t() {
                this.line = tokCurLine;
                this.column = tokPos - tokLineStart;
            }

            // Reset the token state. Used at the start of a parse.

            function initTokenState() {
                tokCurLine = 1;
                tokPos = tokLineStart = 0;
                tokRegexpAllowed = true;
                skipSpace();
            }

            // Called at the end of every token. Sets `tokEnd`, `tokVal`, and
            // `tokRegexpAllowed`, and skips the space after the token, so that
            // the next one's `tokStart` will point at the right position.

            function finishToken(type, val) {
                tokEnd = tokPos;
                if (options.locations) tokEndLoc = new line_loc_t;
                tokType = type;
                skipSpace();
                tokVal = val;
                tokRegexpAllowed = type.beforeExpr;
            }

            function skipBlockComment() {
                var startLoc = options.onComment && options.locations && new line_loc_t;
                var start = tokPos, end = input.indexOf("*/", tokPos += 2);
                if (end === -1) raise(tokPos - 2, "Unterminated comment");
                tokPos = end + 2;
                if (options.locations) {
                    lineBreak.lastIndex = start;
                    var match;
                    while ((match = lineBreak.exec(input)) && match.index < tokPos) {
                        ++tokCurLine;
                        tokLineStart = match.index + match[0].length;
                    }
                }
                if (options.onComment)
                    options.onComment(true, input.slice(start + 2, end), start, tokPos,
                        startLoc, options.locations && new line_loc_t);
            }

            function skipLineComment() {
                var start = tokPos;
                var startLoc = options.onComment && options.locations && new line_loc_t;
                var ch = input.charCodeAt(tokPos += 2);
                while (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
                    ++tokPos;
                    ch = input.charCodeAt(tokPos);
                }
                if (options.onComment)
                    options.onComment(false, input.slice(start + 2, tokPos), start, tokPos,
                        startLoc, options.locations && new line_loc_t);
            }

            // Called at the start of the parse and after every token. Skips
            // whitespace and comments, and.

            function skipSpace() {
                while (tokPos < inputLen) {
                    var ch = input.charCodeAt(tokPos);
                    if (ch === 32) { // ' '
                        ++tokPos;
                    } else if (ch === 13) {
                        ++tokPos;
                        var next = input.charCodeAt(tokPos);
                        if (next === 10) {
                            ++tokPos;
                        }
                        if (options.locations) {
                            ++tokCurLine;
                            tokLineStart = tokPos;
                        }
                    } else if (ch === 10 || ch === 8232 || ch === 8233) {
                        ++tokPos;
                        if (options.locations) {
                            ++tokCurLine;
                            tokLineStart = tokPos;
                        }
                    } else if (ch > 8 && ch < 14) {
                        ++tokPos;
                    } else if (ch === 47) { // '/'
                        var next = input.charCodeAt(tokPos + 1);
                        if (next === 42) { // '*'
                            skipBlockComment();
                        } else if (next === 47) { // '/'
                            skipLineComment();
                        } else break;
                    } else if (ch === 160) { // '\xa0'
                        ++tokPos;
                    } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                        ++tokPos;
                    } else {
                        break;
                    }
                }
            }

            // ### Token reading

            // This is the function that is called to fetch the next token. It
            // is somewhat obscure, because it works in character codes rather
            // than characters, and because operator parsing has been inlined
            // into it.
            //
            // All in the name of speed.
            //
            // The `forceRegexp` parameter is used in the one case where the
            // `tokRegexpAllowed` trick does not work. See `parseStatement`.

            function readToken_dot() {
                var next = input.charCodeAt(tokPos + 1);
                if (next >= 48 && next <= 57) return readNumber(true);
                ++tokPos;
                return finishToken(_dot);
            }

            function readToken_slash() { // '/'
                var next = input.charCodeAt(tokPos + 1);
                if (tokRegexpAllowed) {
                    ++tokPos;
                    return readRegexp();
                }
                if (next === 61) return finishOp(_assign, 2);
                return finishOp(_slash, 1);
            }

            function readToken_mult_modulo() { // '%*'
                var next = input.charCodeAt(tokPos + 1);
                if (next === 61) return finishOp(_assign, 2);
                return finishOp(_multiplyModulo, 1);
            }

            function readToken_pipe_amp(code) { // '|&'
                var next = input.charCodeAt(tokPos + 1);
                if (next === code) return finishOp(code === 124 ? _logicalOR : _logicalAND, 2);
                if (next === 61) return finishOp(_assign, 2);
                return finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);
            }

            function readToken_caret() { // '^'
                var next = input.charCodeAt(tokPos + 1);
                if (next === 61) return finishOp(_assign, 2);
                return finishOp(_bitwiseXOR, 1);
            }

            function readToken_plus_min(code) { // '+-'
                var next = input.charCodeAt(tokPos + 1);
                if (next === code) {
                    if (next == 45 && input.charCodeAt(tokPos + 2) == 62 &&
                        newline.test(input.slice(lastEnd, tokPos))) {
                        // A `-->` line comment
                        tokPos += 3;
                        skipLineComment();
                        skipSpace();
                        return readToken();
                    }
                    return finishOp(_incDec, 2);
                }
                if (next === 61) return finishOp(_assign, 2);
                return finishOp(_plusMin, 1);
            }

            function readToken_lt_gt(code) { // '<>'
                var next = input.charCodeAt(tokPos + 1);
                var size = 1;
                if (next === code) {
                    size = code === 62 && input.charCodeAt(tokPos + 2) === 62 ? 3 : 2;
                    if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);
                    return finishOp(_bitShift, size);
                }
                if (next == 33 && code == 60 && input.charCodeAt(tokPos + 2) == 45 &&
                    input.charCodeAt(tokPos + 3) == 45) {
                    // `<!--`, an XML-style comment that should be interpreted as a line comment
                    tokPos += 4;
                    skipLineComment();
                    skipSpace();
                    return readToken();
                }
                if (next === 61)
                    size = input.charCodeAt(tokPos + 2) === 61 ? 3 : 2;
                return finishOp(_relational, size);
            }

            function readToken_eq_excl(code) { // '=!'
                var next = input.charCodeAt(tokPos + 1);
                if (next === 61) return finishOp(_equality, input.charCodeAt(tokPos + 2) === 61 ? 3 : 2);
                return finishOp(code === 61 ? _eq : _prefix, 1);
            }

            function getTokenFromCode(code) {
                switch (code) {
                    // The interpretation of a dot depends on whether it is followed
                    // by a digit.
                    case 46: // '.'
                        return readToken_dot();

                    // Punctuation tokens.
                    case 40:
                        ++tokPos;
                        return finishToken(_parenL);
                    case 41:
                        ++tokPos;
                        return finishToken(_parenR);
                    case 59:
                        ++tokPos;
                        return finishToken(_semi);
                    case 44:
                        ++tokPos;
                        return finishToken(_comma);
                    case 91:
                        ++tokPos;
                        return finishToken(_bracketL);
                    case 93:
                        ++tokPos;
                        return finishToken(_bracketR);
                    case 123:
                        ++tokPos;
                        return finishToken(_braceL);
                    case 125:
                        ++tokPos;
                        return finishToken(_braceR);
                    case 58:
                        ++tokPos;
                        return finishToken(_colon);
                    case 63:
                        ++tokPos;
                        return finishToken(_question);

                    // '0x' is a hexadecimal number.
                    case 48: // '0'
                        var next = input.charCodeAt(tokPos + 1);
                        if (next === 120 || next === 88) return readHexNumber();
                    // Anything else beginning with a digit is an integer, octal
                    // number, or float.
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57: // 1-9
                        return readNumber(false);

                    // Quotes produce strings.
                    case 34:
                    case 39: // '"', "'"
                        return readString(code);

                    // Operators are parsed inline in tiny state machines. '=' (61) is
                    // often referred to. `finishOp` simply skips the amount of
                    // characters it is given as second argument, and returns a token
                    // of the type given by its first argument.

                    case 47: // '/'
                        return readToken_slash(code);

                    case 37:
                    case 42: // '%*'
                        return readToken_mult_modulo();

                    case 124:
                    case 38: // '|&'
                        return readToken_pipe_amp(code);

                    case 94: // '^'
                        return readToken_caret();

                    case 43:
                    case 45: // '+-'
                        return readToken_plus_min(code);

                    case 60:
                    case 62: // '<>'
                        return readToken_lt_gt(code);

                    case 61:
                    case 33: // '=!'
                        return readToken_eq_excl(code);

                    case 126: // '~'
                        return finishOp(_prefix, 1);
                }

                return false;
            }

            function readToken(forceRegexp) {
                if (!forceRegexp) tokStart = tokPos;
                else tokPos = tokStart + 1;
                if (options.locations) tokStartLoc = new line_loc_t;
                if (forceRegexp) return readRegexp();
                if (tokPos >= inputLen) return finishToken(_eof);

                var code = input.charCodeAt(tokPos);
                // Identifier or keyword. '\uXXXX' sequences are allowed in
                // identifiers, so '\' also dispatches to that.
                if (isIdentifierStart(code) || code === 92 /* '\' */) return readWord();

                var tok = getTokenFromCode(code);

                if (tok === false) {
                    // If we are here, we either found a non-ASCII identifier
                    // character, or something that's entirely disallowed.
                    var ch = String.fromCharCode(code);
                    if (ch === "\\" || nonASCIIidentifierStart.test(ch)) return readWord();
                    raise(tokPos, "Unexpected character '" + ch + "'");
                }
                return tok;
            }

            function finishOp(type, size) {
                var str = input.slice(tokPos, tokPos + size);
                tokPos += size;
                finishToken(type, str);
            }

            // Parse a regular expression. Some context-awareness is necessary,
            // since a '/' inside a '[]' set does not end the expression.

            function readRegexp() {
                var content = "", escaped, inClass, start = tokPos;
                for (; ;) {
                    if (tokPos >= inputLen) raise(start, "Unterminated regular expression");
                    var ch = input.charAt(tokPos);
                    if (newline.test(ch)) raise(start, "Unterminated regular expression");
                    if (!escaped) {
                        if (ch === "[") inClass = true;
                        else if (ch === "]" && inClass) inClass = false;
                        else if (ch === "/" && !inClass) break;
                        escaped = ch === "\\";
                    } else escaped = false;
                    ++tokPos;
                }
                var content = input.slice(start, tokPos);
                ++tokPos;
                // Need to use `readWord1` because '\uXXXX' sequences are allowed
                // here (don't ask).
                var mods = readWord1();
                if (mods && !/^[gmsiy]*$/.test(mods)) raise(start, "Invalid regexp flag");
                return finishToken(_regexp, new RegExp(content, mods));
            }

            // Read an integer in the given radix. Return null if zero digits
            // were read, the integer value otherwise. When `len` is given, this
            // will return `null` unless the integer has exactly `len` digits.

            function readInt(radix, len) {
                var start = tokPos, total = 0;
                for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
                    var code = input.charCodeAt(tokPos), val;
                    if (code >= 97) val = code - 97 + 10; // a
                    else if (code >= 65) val = code - 65 + 10; // A
                    else if (code >= 48 && code <= 57) val = code - 48; // 0-9
                    else val = Infinity;
                    if (val >= radix) break;
                    ++tokPos;
                    total = total * radix + val;
                }
                if (tokPos === start || len != null && tokPos - start !== len) return null;

                return total;
            }

            function readHexNumber() {
                tokPos += 2; // 0x
                var val = readInt(16);
                if (val == null) raise(tokStart + 2, "Expected hexadecimal number");
                if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");
                return finishToken(_num, val);
            }

            // Read an integer, octal integer, or floating-point number.

            function readNumber(startsWithDot) {
                var start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;
                if (!startsWithDot && readInt(10) === null) raise(start, "Invalid number");
                if (input.charCodeAt(tokPos) === 46) {
                    ++tokPos;
                    readInt(10);
                    isFloat = true;
                }
                var next = input.charCodeAt(tokPos);
                if (next === 69 || next === 101) { // 'eE'
                    next = input.charCodeAt(++tokPos);
                    if (next === 43 || next === 45) ++tokPos; // '+-'
                    if (readInt(10) === null) raise(start, "Invalid number");
                    isFloat = true;
                }
                if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");

                var str = input.slice(start, tokPos), val;
                if (isFloat) val = parseFloat(str);
                else if (!octal || str.length === 1) val = parseInt(str, 10);
                else if (/[89]/.test(str) || strict) raise(start, "Invalid number");
                else val = parseInt(str, 8);
                return finishToken(_num, val);
            }

            // Read a string value, interpreting backslash-escapes.

            function readString(quote) {
                tokPos++;
                var out = "";
                for (; ;) {
                    if (tokPos >= inputLen) raise(tokStart, "Unterminated string constant");
                    var ch = input.charCodeAt(tokPos);
                    if (ch === quote) {
                        ++tokPos;
                        return finishToken(_string, out);
                    }
                    if (ch === 92) { // '\'
                        ch = input.charCodeAt(++tokPos);
                        var octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));
                        if (octal) octal = octal[0];
                        while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);
                        if (octal === "0") octal = null;
                        ++tokPos;
                        if (octal) {
                            if (strict) raise(tokPos - 2, "Octal literal in strict mode");
                            out += String.fromCharCode(parseInt(octal, 8));
                            tokPos += octal.length - 1;
                        } else {
                            switch (ch) {
                                case 110:
                                    out += "\n";
                                    break; // 'n' -> '\n'
                                case 114:
                                    out += "\r";
                                    break; // 'r' -> '\r'
                                case 120:
                                    out += String.fromCharCode(readHexChar(2));
                                    break; // 'x'
                                case 117:
                                    out += String.fromCharCode(readHexChar(4));
                                    break; // 'u'
                                case 85:
                                    out += String.fromCharCode(readHexChar(8));
                                    break; // 'U'
                                case 116:
                                    out += "\t";
                                    break; // 't' -> '\t'
                                case 98:
                                    out += "\b";
                                    break; // 'b' -> '\b'
                                case 118:
                                    out += "\u000b";
                                    break; // 'v' -> '\u000b'
                                case 102:
                                    out += "\f";
                                    break; // 'f' -> '\f'
                                case 48:
                                    out += "\0";
                                    break; // 0 -> '\0'
                                case 13:
                                    if (input.charCodeAt(tokPos) === 10) ++tokPos; // '\r\n'
                                case 10: // ' \n'
                                    if (options.locations) {
                                        tokLineStart = tokPos;
                                        ++tokCurLine;
                                    }
                                    break;
                                default:
                                    out += String.fromCharCode(ch);
                                    break;
                            }
                        }
                    } else {
                        if (ch === 13 || ch === 10 || ch === 8232 ||
                            ch === 8233) raise(tokStart, "Unterminated string constant");
                        out += String.fromCharCode(ch); // '\'
                        ++tokPos;
                    }
                }
            }

            // Used to read character escape sequences ('\x', '\u', '\U').

            function readHexChar(len) {
                var n = readInt(16, len);
                if (n === null) raise(tokStart, "Bad character escape sequence");
                return n;
            }

            // Used to signal to callers of `readWord1` whether the word
            // contained any escape sequences. This is needed because words with
            // escape sequences must not be interpreted as keywords.

            var containsEsc;

            // Read an identifier, and return it as a string. Sets `containsEsc`
            // to whether the word contained a '\u' escape.
            //
            // Only builds up the word character-by-character when it actually
            // containeds an escape, as a micro-optimization.

            function readWord1() {
                containsEsc = false;
                var word, first = true, start = tokPos;
                for (; ;) {
                    var ch = input.charCodeAt(tokPos);
                    if (isIdentifierChar(ch)) {
                        if (containsEsc) word += input.charAt(tokPos);
                        ++tokPos;
                    } else if (ch === 92) { // "\"
                        if (!containsEsc) word = input.slice(start, tokPos);
                        containsEsc = true;
                        if (input.charCodeAt(++tokPos) != 117) // "u"
                            raise(tokPos, "Expecting Unicode escape sequence \\uXXXX");
                        ++tokPos;
                        var esc = readHexChar(4);
                        var escStr = String.fromCharCode(esc);
                        if (!escStr) raise(tokPos - 1, "Invalid Unicode escape");
                        if (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))
                            raise(tokPos - 4, "Invalid Unicode escape");
                        word += input.substr(tokPos - 6, 6);
                    } else {
                        break;
                    }
                    first = false;
                }
                return containsEsc ? word : input.slice(start, tokPos);
            }

            // Read an identifier or keyword token. Will check for reserved
            // words when necessary.

            function readWord() {
                var word = readWord1();
                var type = _name;
                if (!containsEsc) {
                    if (isKeyword(word)) type = keywordTypes[word];
                    else if (options.forbidReserved &&
                             (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(word) ||
                             strict && isStrictReservedWord(word))
                        raise(tokStart, "The keyword '" + word + "' is reserved");
                }
                return finishToken(type, word);
            }

            // ## Parser

            // A recursive descent parser operates by defining functions for all
            // syntactic elements, and recursively calling those, each function
            // advancing the input stream and returning an AST node. Precedence
            // of constructs (for example, the fact that `!x[1]` means `!(x[1])`
            // instead of `(!x)[1]` is handled by the fact that the parser
            // function that parses unary prefix operators is called first, and
            // in turn calls the function that parses `[]` subscripts — that
            // way, it'll receive the node for `x[1]` already parsed, and wraps
            // *that* in the unary operator node.
            //
            // Acorn uses an [operator precedence parser][opp] to handle binary
            // operator precedence, because it is much more compact than using
            // the technique outlined above, which uses different, nesting
            // functions to specify precedence, for all of the ten binary
            // precedence levels that JavaScript defines.
            //
            // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

            // ### Parser utilities

            // Continue to the next token.

            function next() {
                lastStart = tokStart;
                lastEnd = tokEnd;
                lastEndLoc = tokEndLoc;
                readToken();
            }

            // Enter strict mode. Re-reads the next token to please pedantic
            // tests ("use strict"; 010; -- should fail).

            function setStrict(strct) {
                strict = strct;
                tokPos = lastEnd;
                if (options.locations) {
                    while (tokPos < tokLineStart) {
                        tokLineStart = input.lastIndexOf("\n", tokLineStart - 2) + 1;
                        --tokCurLine;
                    }
                }
                skipSpace();
                readToken();
            }

            // Start an AST node, attaching a start offset.

            function node_t() {
                this.type = null;
                this.start = tokStart;
                this.end = null;
            }

            function node_loc_t() {
                this.start = tokStartLoc;
                this.end = null;
                if (sourceFile !== null) this.source = sourceFile;
            }

            function startNode() {
                var node = new node_t();
                if (options.locations)
                    node.loc = new node_loc_t();
                if (options.directSourceFile)
                    node.sourceFile = options.directSourceFile;
                if (options.ranges)
                    node.range = [tokStart, 0];
                return node;
            }

            // Start a node whose start offset information should be based on
            // the start of another node. For example, a binary operator node is
            // only started after its left-hand side has already been parsed.

            function startNodeFrom(other) {
                var node = new node_t();
                node.start = other.start;
                if (options.locations) {
                    node.loc = new node_loc_t();
                    node.loc.start = other.loc.start;
                }
                if (options.ranges)
                    node.range = [other.range[0], 0];

                return node;
            }

            // Finish an AST node, adding `type` and `end` properties.

            function finishNode(node, type) {
                node.type = type;
                node.end = lastEnd;
                if (options.locations)
                    node.loc.end = lastEndLoc;
                if (options.ranges)
                    node.range[1] = lastEnd;
                return node;
            }

            // Test whether a statement node is the string literal `"use strict"`.

            function isUseStrict(stmt) {
                return options.ecmaVersion >= 6 && stmt.type === "ExpressionStatement" &&
                       stmt.expression.type === "Literal" && stmt.expression.value === "use strict";
            }

            // Predicate that tests whether the next token is of the given
            // type, and if yes, consumes it as a side effect.

            function eat(type) {
                if (tokType === type) {
                    next();
                    return true;
                }
            }

            // Test whether a semicolon can be inserted at the current position.

            function canInsertSemicolon() {
                return !options.strictSemicolons &&
                       (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));
            }

            // Consume a semicolon, or, failing that, see if we are allowed to
            // pretend that there is a semicolon at this position.

            function semicolon() {
                if (!eat(_semi) && !canInsertSemicolon()) unexpected();
            }

            // Expect a token of a given type. If found, consume it, otherwise,
            // raise an unexpected token error.

            function expect(type) {
                if (tokType === type) next();
                else unexpected();
            }

            // Raise an unexpected token error.

            function unexpected() {
                raise(tokStart, "Unexpected token");
            }

            // Verify that a node is an lval — something that can be assigned
            // to.

            function checkLVal(expr) {
                if (expr.type !== "Identifier" && expr.type !== "MemberExpression")
                    raise(expr.start, "Assigning to rvalue");
                if (strict && expr.type === "Identifier" && isStrictBadIdWord(expr.name))
                    raise(expr.start, "Assigning to " + expr.name + " in strict mode");
            }

            // ### Statement parsing

            // Parse a program. Initializes the parser, reads any number of
            // statements, and wraps them in a Program node.  Optionally takes a
            // `program` argument.  If present, the statements will be appended
            // to its body instead of creating a new node.

            function parseTopLevel(program) {
                lastStart = lastEnd = tokPos;
                if (options.locations) lastEndLoc = new line_loc_t;
                inFunction = strict = null;
                labels = [];
                readToken();

                var node = program || startNode(), first = true;
                if (!program) node.body = [];
                while (tokType !== _eof) {
                    var stmt = parseStatement();
                    node.body.push(stmt);
                    if (first && isUseStrict(stmt)) setStrict(true);
                    first = false;
                }
                return finishNode(node, "Program");
            }

            var loopLabel = {kind: "loop"}, switchLabel = {kind: "switch"};

            // Parse a single statement.
            //
            // If expecting a statement and finding a slash operator, parse a
            // regular expression literal. This is to handle cases like
            // `if (foo) /blah/.exec(foo);`, where looking at the previous token
            // does not help.

            function parseStatement() {
                if (tokType === _slash || tokType === _assign && tokVal == "/=")
                    readToken(true);

                var starttype = tokType, node = startNode();

                // Most types of statements are recognized by the keyword they
                // start with. Many are trivial to parse, some require a bit of
                // complexity.

                switch (starttype) {
                    case _break:
                    case _continue:
                        next();
                        var isBreak = starttype === _break;
                        if (eat(_semi) || canInsertSemicolon()) node.label = null;
                        else if (tokType !== _name) unexpected();
                        else {
                            node.label = parseIdent();
                            semicolon();
                        }

                        // Verify that there is an actual destination to break or
                        // continue to.
                        for (var i = 0; i < labels.length; ++i) {
                            var lab = labels[i];
                            if (node.label == null || lab.name === node.label.name) {
                                if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
                                if (node.label && isBreak) break;
                            }
                        }
                        if (i === labels.length) raise(node.start, "Unsyntactic " + starttype.keyword);
                        return finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");

                    case _debugger:
                        next();
                        semicolon();
                        return finishNode(node, "DebuggerStatement");

                    case _do:
                        next();
                        labels.push(loopLabel);
                        node.body = parseStatement();
                        labels.pop();
                        expect(_while);
                        node.test = parseParenExpression();
                        semicolon();
                        return finishNode(node, "DoWhileStatement");

                    // Disambiguating between a `for` and a `for`/`in` loop is
                    // non-trivial. Basically, we have to parse the init `var`
                    // statement or expression, disallowing the `in` operator (see
                    // the second parameter to `parseExpression`), and then check
                    // whether the next token is `in`. When there is no init part
                    // (semicolon immediately after the opening parenthesis), it is
                    // a regular `for` loop.

                    case _for:
                        next();
                        labels.push(loopLabel);
                        expect(_parenL);
                        if (tokType === _semi) return parseFor(node, null);
                        if (tokType === _var) {
                            var init = startNode();
                            next();
                            parseVar(init, true);
                            finishNode(init, "VariableDeclaration");
                            if (init.declarations.length === 1 && eat(_in))
                                return parseForIn(node, init);
                            return parseFor(node, init);
                        }
                        var init = parseExpression(false, true);
                        if (eat(_in)) {
                            checkLVal(init);
                            return parseForIn(node, init);
                        }
                        return parseFor(node, init);

                    case _function:
                        next();
                        return parseFunction(node, true);

                    case _if:
                        next();
                        node.test = parseParenExpression();
                        node.consequent = parseStatement();
                        node.alternate = eat(_else) ? parseStatement() : null;
                        return finishNode(node, "IfStatement");

                    case _return:
                        if (!inFunction) raise(tokStart, "'return' outside of function");
                        next();

                        // In `return` (and `break`/`continue`), the keywords with
                        // optional arguments, we eagerly look for a semicolon or the
                        // possibility to insert one.

                        if (eat(_semi) || canInsertSemicolon()) node.argument = null;
                        else {
                            node.argument = parseExpression();
                            semicolon();
                        }
                        return finishNode(node, "ReturnStatement");

                    case _switch:
                        next();
                        node.discriminant = parseParenExpression();
                        node.cases = [];
                        expect(_braceL);
                        labels.push(switchLabel);

                        // Statements under must be grouped (by label) in SwitchCase
                        // nodes. `cur` is used to keep the node that we are currently
                        // adding statements to.

                        for (var cur, sawDefault; tokType != _braceR;) {
                            if (tokType === _case || tokType === _default) {
                                var isCase = tokType === _case;
                                if (cur) finishNode(cur, "SwitchCase");
                                node.cases.push(cur = startNode());
                                cur.consequent = [];
                                next();
                                if (isCase) cur.test = parseExpression();
                                else {
                                    if (sawDefault) raise(lastStart, "Multiple default clauses");
                                    sawDefault = true;
                                    cur.test = null;
                                }
                                expect(_colon);
                            } else {
                                if (!cur) unexpected();
                                cur.consequent.push(parseStatement());
                            }
                        }
                        if (cur) finishNode(cur, "SwitchCase");
                        next(); // Closing brace
                        labels.pop();
                        return finishNode(node, "SwitchStatement");

                    case _throw:
                        next();
                        if (newline.test(input.slice(lastEnd, tokStart)))
                            raise(lastEnd, "Illegal newline after throw");
                        node.argument = parseExpression();
                        semicolon();
                        return finishNode(node, "ThrowStatement");

                    case _try:
                        next();
                        node.block = parseBlock();
                        node.handler = null;
                        if (tokType === _catch) {
                            var clause = startNode();
                            next();
                            expect(_parenL);
                            clause.param = parseIdent();
                            if (strict && isStrictBadIdWord(clause.param.name))
                                raise(clause.param.start, "Binding " + clause.param.name + " in strict mode");
                            expect(_parenR);
                            clause.guard = null;
                            clause.body = parseBlock();
                            node.handler = finishNode(clause, "CatchClause");
                        }
                        node.guardedHandlers = empty;
                        node.finalizer = eat(_finally) ? parseBlock() : null;
                        if (!node.handler && !node.finalizer)
                            raise(node.start, "Missing catch or finally clause");
                        return finishNode(node, "TryStatement");

                    case _var:
                        next();
                        parseVar(node);
                        semicolon();
                        return finishNode(node, "VariableDeclaration");

                    case _while:
                        next();
                        node.test = parseParenExpression();
                        labels.push(loopLabel);
                        node.body = parseStatement();
                        labels.pop();
                        return finishNode(node, "WhileStatement");

                    case _with:
                        if (strict) raise(tokStart, "'with' in strict mode");
                        next();
                        node.object = parseParenExpression();
                        node.body = parseStatement();
                        return finishNode(node, "WithStatement");

                    case _braceL:
                        return parseBlock();

                    case _semi:
                        next();
                        return finishNode(node, "EmptyStatement");

                    // If the statement does not start with a statement keyword or a
                    // brace, it's an ExpressionStatement or LabeledStatement. We
                    // simply start parsing an expression, and afterwards, if the
                    // next token is a colon and the expression was a simple
                    // Identifier node, we switch to interpreting it as a label.

                    default:
                        var maybeName = tokVal, expr = parseExpression();
                        if (starttype === _name && expr.type === "Identifier" && eat(_colon)) {
                            for (var i = 0; i < labels.length; ++i)
                                if (labels[i].name === maybeName) raise(expr.start, "Label '" + maybeName +
                                                                                    "' is already declared");
                            var kind = tokType.isLoop ? "loop" : tokType === _switch ? "switch" : null;
                            labels.push({name: maybeName, kind: kind});
                            node.body = parseStatement();
                            labels.pop();
                            node.label = expr;
                            return finishNode(node, "LabeledStatement");
                        } else {
                            node.expression = expr;
                            semicolon();
                            return finishNode(node, "ExpressionStatement");
                        }
                }
            }

            // Used for constructs like `switch` and `if` that insist on
            // parentheses around their expression.

            function parseParenExpression() {
                expect(_parenL);
                var val = parseExpression();
                expect(_parenR);
                return val;
            }

            // Parse a semicolon-enclosed block of statements, handling `"use
            // strict"` declarations when `allowStrict` is true (used for
            // function bodies).

            function parseBlock(allowStrict) {
                var node = startNode(), first = true, strict = false, oldStrict;
                node.body = [];
                expect(_braceL);
                while (!eat(_braceR)) {
                    var stmt = parseStatement();
                    node.body.push(stmt);
                    if (first && allowStrict && isUseStrict(stmt)) {
                        oldStrict = strict;
                        setStrict(strict = true);
                    }
                    first = false;
                }
                if (strict && !oldStrict) setStrict(false);
                return finishNode(node, "BlockStatement");
            }

            // Parse a regular `for` loop. The disambiguation code in
            // `parseStatement` will already have parsed the init statement or
            // expression.

            function parseFor(node, init) {
                node.init = init;
                expect(_semi);
                node.test = tokType === _semi ? null : parseExpression();
                expect(_semi);
                node.update = tokType === _parenR ? null : parseExpression();
                expect(_parenR);
                node.body = parseStatement();
                labels.pop();
                return finishNode(node, "ForStatement");
            }

            // Parse a `for`/`in` loop.

            function parseForIn(node, init) {
                node.left = init;
                node.right = parseExpression();
                expect(_parenR);
                node.body = parseStatement();
                labels.pop();
                return finishNode(node, "ForInStatement");
            }

            // Parse a list of variable declarations.

            function parseVar(node, noIn) {
                node.declarations = [];
                node.kind = "var";
                for (; ;) {
                    var decl = startNode();
                    decl.id = parseIdent();
                    if (strict && isStrictBadIdWord(decl.id.name))
                        raise(decl.id.start, "Binding " + decl.id.name + " in strict mode");
                    decl.init = eat(_eq) ? parseExpression(true, noIn) : null;
                    node.declarations.push(finishNode(decl, "VariableDeclarator"));
                    if (!eat(_comma)) break;
                }
                return node;
            }

            // ### Expression parsing

            // These nest, from the most general expression type at the top to
            // 'atomic', nondivisible expression types at the bottom. Most of
            // the functions will simply let the function(s) below them parse,
            // and, *if* the syntactic construct they handle is present, wrap
            // the AST node that the inner parser gave them in another node.

            // Parse a full expression. The arguments are used to forbid comma
            // sequences (in argument lists, array literals, or object literals)
            // or the `in` operator (in for loops initalization expressions).

            function parseExpression(noComma, noIn) {
                var expr = parseMaybeAssign(noIn);
                if (!noComma && tokType === _comma) {
                    var node = startNodeFrom(expr);
                    node.expressions = [expr];
                    while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));
                    return finishNode(node, "SequenceExpression");
                }
                return expr;
            }

            // Parse an assignment expression. This includes applications of
            // operators like `+=`.

            function parseMaybeAssign(noIn) {
                var left = parseMaybeConditional(noIn);
                if (tokType.isAssign) {
                    var node = startNodeFrom(left);
                    node.operator = tokVal;
                    node.left = left;
                    next();
                    node.right = parseMaybeAssign(noIn);
                    checkLVal(left);
                    return finishNode(node, "AssignmentExpression");
                }
                return left;
            }

            // Parse a ternary conditional (`?:`) operator.

            function parseMaybeConditional(noIn) {
                var expr = parseExprOps(noIn);
                if (eat(_question)) {
                    var node = startNodeFrom(expr);
                    node.test = expr;
                    node.consequent = parseExpression(true);
                    expect(_colon);
                    node.alternate = parseExpression(true, noIn);
                    return finishNode(node, "ConditionalExpression");
                }
                return expr;
            }

            // Start the precedence parser.

            function parseExprOps(noIn) {
                return parseExprOp(parseMaybeUnary(), -1, noIn);
            }

            // Parse binary operators with the operator precedence parsing
            // algorithm. `left` is the left-hand side of the operator.
            // `minPrec` provides context that allows the function to stop and
            // defer further parser to one of its callers when it encounters an
            // operator that has a lower precedence than the set it is parsing.

            function parseExprOp(left, minPrec, noIn) {
                var prec = tokType.binop;
                if (prec != null && (!noIn || tokType !== _in)) {
                    if (prec > minPrec) {
                        var node = startNodeFrom(left);
                        node.left = left;
                        node.operator = tokVal;
                        var op = tokType;
                        next();
                        node.right = parseExprOp(parseMaybeUnary(), prec, noIn);
                        var exprNode = finishNode(node, (op === _logicalOR || op ===
                                                                              _logicalAND) ? "LogicalExpression" : "BinaryExpression");
                        return parseExprOp(exprNode, minPrec, noIn);
                    }
                }
                return left;
            }

            // Parse unary operators, both prefix and postfix.

            function parseMaybeUnary() {
                if (tokType.prefix) {
                    var node = startNode(), update = tokType.isUpdate;
                    node.operator = tokVal;
                    node.prefix = true;
                    tokRegexpAllowed = true;
                    next();
                    node.argument = parseMaybeUnary();
                    if (update) checkLVal(node.argument);
                    else if (strict && node.operator === "delete" &&
                             node.argument.type === "Identifier")
                        raise(node.start, "Deleting local variable in strict mode");
                    return finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
                }
                var expr = parseExprSubscripts();
                while (tokType.postfix && !canInsertSemicolon()) {
                    var node = startNodeFrom(expr);
                    node.operator = tokVal;
                    node.prefix = false;
                    node.argument = expr;
                    checkLVal(expr);
                    next();
                    expr = finishNode(node, "UpdateExpression");
                }
                return expr;
            }

            // Parse call, dot, and `[]`-subscript expressions.

            function parseExprSubscripts() {
                return parseSubscripts(parseExprAtom());
            }

            function parseSubscripts(base, noCalls) {
                if (eat(_dot)) {
                    var node = startNodeFrom(base);
                    node.object = base;
                    node.property = parseIdent(true);
                    node.computed = false;
                    return parseSubscripts(finishNode(node, "MemberExpression"), noCalls);
                } else if (eat(_bracketL)) {
                    var node = startNodeFrom(base);
                    node.object = base;
                    node.property = parseExpression();
                    node.computed = true;
                    expect(_bracketR);
                    return parseSubscripts(finishNode(node, "MemberExpression"), noCalls);
                } else if (!noCalls && eat(_parenL)) {
                    var node = startNodeFrom(base);
                    node.callee = base;
                    node.arguments = parseExprList(_parenR, false);
                    return parseSubscripts(finishNode(node, "CallExpression"), noCalls);
                } else return base;
            }

            // Parse an atomic expression — either a single token that is an
            // expression, an expression started by a keyword like `function` or
            // `new`, or an expression wrapped in punctuation like `()`, `[]`,
            // or `{}`.

            function parseExprAtom() {
                switch (tokType) {
                    case _this:
                        var node = startNode();
                        next();
                        return finishNode(node, "ThisExpression");
                    case _name:
                        return parseIdent();
                    case _num:
                    case _string:
                    case _regexp:
                        var node = startNode();
                        node.value = tokVal;
                        node.raw = input.slice(tokStart, tokEnd);
                        next();
                        return finishNode(node, "Literal");

                    case _null:
                    case _true:
                    case _false:
                        var node = startNode();
                        node.value = tokType.atomValue;
                        node.raw = tokType.keyword;
                        next();
                        return finishNode(node, "Literal");

                    case _parenL:
                        var tokStartLoc1 = tokStartLoc, tokStart1 = tokStart;
                        next();
                        var val = parseExpression();
                        val.start = tokStart1;
                        val.end = tokEnd;
                        if (options.locations) {
                            val.loc.start = tokStartLoc1;
                            val.loc.end = tokEndLoc;
                        }
                        if (options.ranges)
                            val.range = [tokStart1, tokEnd];
                        expect(_parenR);
                        return val;

                    case _bracketL:
                        var node = startNode();
                        next();
                        node.elements = parseExprList(_bracketR, true, true);
                        return finishNode(node, "ArrayExpression");

                    case _braceL:
                        return parseObj();

                    case _function:
                        var node = startNode();
                        next();
                        return parseFunction(node, false);

                    case _new:
                        return parseNew();

                    default:
                        unexpected();
                }
            }

            // New's precedence is slightly tricky. It must allow its argument
            // to be a `[]` or dot subscript expression, but not a call — at
            // least, not without wrapping it in parentheses. Thus, it uses the

            function parseNew() {
                var node = startNode();
                next();
                node.callee = parseSubscripts(parseExprAtom(), true);
                if (eat(_parenL)) node.arguments = parseExprList(_parenR, false);
                else node.arguments = empty;
                return finishNode(node, "NewExpression");
            }

            // Parse an object literal.

            function parseObj() {
                var node = startNode(), first = true, sawGetSet = false;
                node.properties = [];
                next();
                while (!eat(_braceR)) {
                    if (!first) {
                        expect(_comma);
                        if (options.allowTrailingCommas && eat(_braceR)) break;
                    } else first = false;

                    var prop = {type: "Property", key: parsePropertyName()}, isGetSet = false, kind;
                    if (eat(_colon)) {
                        prop.value = parseExpression(true);
                        kind = prop.kind = "init";
                    } else if (options.ecmaVersion >= 5 && prop.key.type === "Identifier" &&
                               (prop.key.name === "get" || prop.key.name === "set")) {
                        isGetSet = sawGetSet = true;
                        kind = prop.kind = prop.key.name;
                        prop.key = parsePropertyName();
                        if (tokType !== _parenL) unexpected();
                        prop.value = parseFunction(startNode(), false);
                    } else unexpected();

                    // getters and setters are not allowed to clash — either with
                    // each other or with an init property — and in strict mode,
                    // init properties are also not allowed to be repeated.

                    if (prop.key.type === "Identifier" && (strict || sawGetSet)) {
                        for (var i = 0; i < node.properties.length; ++i) {
                            var other = node.properties[i];
                            if (other.key.name === prop.key.name) {
                                var conflict = kind == other.kind || isGetSet && other.kind === "init" ||
                                               kind === "init" && (other.kind === "get" || other.kind === "set");
                                if (conflict && !strict && kind === "init" && other.kind === "init") conflict = false;
                                if (conflict) raise(prop.key.start, "Redefinition of property");
                            }
                        }
                    }
                    node.properties.push(prop);
                }
                return finishNode(node, "ObjectExpression");
            }

            function parsePropertyName() {
                if (tokType === _num || tokType === _string) return parseExprAtom();
                return parseIdent(true);
            }

            // Parse a function declaration or literal (depending on the
            // `isStatement` parameter).

            function parseFunction(node, isStatement) {
                if (tokType === _name) node.id = parseIdent();
                else if (isStatement) unexpected();
                else node.id = null;
                node.params = [];
                var first = true;
                expect(_parenL);
                while (!eat(_parenR)) {
                    if (!first) expect(_comma); else first = false;
                    node.params.push(parseIdent());
                }

                // Start a new scope with regard to labels and the `inFunction`
                // flag (restore them to their old value afterwards).
                var oldInFunc = inFunction, oldLabels = labels;
                inFunction = true;
                labels = [];
                node.body = parseBlock(true);
                inFunction = oldInFunc;
                labels = oldLabels;

                // If this is a strict mode function, verify that argument names
                // are not repeated, and it does not try to bind the words `eval`
                // or `arguments`.
                if (strict || node.body.body.length && isUseStrict(node.body.body[0])) {
                    for (var i = node.id ? -1 : 0; i < node.params.length; ++i) {
                        var id = i < 0 ? node.id : node.params[i];
                        if (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name))
                            raise(id.start, "Defining '" + id.name + "' in strict mode");
                        if (i >= 0) for (var j = 0; j < i; ++j) if (id.name === node.params[j].name)
                            raise(id.start, "Argument name clash in strict mode");
                    }
                }

                return finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
            }

            // Parses a comma-separated list of expressions, and returns them as
            // an array. `close` is the token type that ends the list, and
            // `allowEmpty` can be turned on to allow subsequent commas with
            // nothing in between them to be parsed as `null` (which is needed
            // for array literals).

            function parseExprList(close, allowTrailingComma, allowEmpty) {
                var elts = [], first = true;
                while (!eat(close)) {
                    if (!first) {
                        expect(_comma);
                        if (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;
                    } else first = false;

                    if (allowEmpty && tokType === _comma) elts.push(null);
                    else elts.push(parseExpression(true));
                }
                return elts;
            }

            // Parse the next token as an identifier. If `liberal` is true (used
            // when parsing properties), it will also convert keywords into
            // identifiers.

            function parseIdent(liberal) {
                var node = startNode();
                node.name = tokType === _name ? tokVal : (liberal && !options.forbidReserved && tokType.keyword) ||
                                                         unexpected();
                tokRegexpAllowed = false;
                next();
                return finishNode(node, "Identifier");
            }

        });
    }).call(acornExports);

    JSParsingTools.parse = acornExports.parse || acornExports.acorn.parse;
    // ------------------------------------------

    // --------------- Code Gen -----------------
    var codeGetExports = {};

    (function (exports) {
        /*
         Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
         Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
         Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
         Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
         Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
         Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
         Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
         Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
         Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
         Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
         Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

         Redistribution and use in source and binary forms, with or without
         modification, are permitted provided that the following conditions are met:

         * Redistributions of source code must retain the above copyright
         notice, this list of conditions and the following disclaimer.
         * Redistributions in binary form must reproduce the above copyright
         notice, this list of conditions and the following disclaimer in the
         documentation and/or other materials provided with the distribution.

         THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
         AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
         IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
         ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
         DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
         (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
         LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
         ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
         (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
         THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
         */

        'use strict';

        var isArray,
            json,
            renumber,
            hexadecimal,
            quotes,
            escapeless,
            parentheses,
            semicolons,
            safeConcatenation,
            directive,
            extra,
            parse,
            FORMAT_MINIFY,
            FORMAT_DEFAULTS;

        var Syntax = {
            AssignmentExpression: 'AssignmentExpression',
            ArrayExpression: 'ArrayExpression',
            ArrayPattern: 'ArrayPattern',
            ArrowFunctionExpression: 'ArrowFunctionExpression',
            BlockStatement: 'BlockStatement',
            BinaryExpression: 'BinaryExpression',
            BreakStatement: 'BreakStatement',
            CallExpression: 'CallExpression',
            CatchClause: 'CatchClause',
            ClassBody: 'ClassBody',
            ClassDeclaration: 'ClassDeclaration',
            ClassExpression: 'ClassExpression',
            ComprehensionBlock: 'ComprehensionBlock',
            ComprehensionExpression: 'ComprehensionExpression',
            ConditionalExpression: 'ConditionalExpression',
            ContinueStatement: 'ContinueStatement',
            DirectiveStatement: 'DirectiveStatement',
            DoWhileStatement: 'DoWhileStatement',
            DebuggerStatement: 'DebuggerStatement',
            EmptyStatement: 'EmptyStatement',
            ExportBatchSpecifier: 'ExportBatchSpecifier',
            ExportDeclaration: 'ExportDeclaration',
            ExportSpecifier: 'ExportSpecifier',
            ExpressionStatement: 'ExpressionStatement',
            ForStatement: 'ForStatement',
            ForInStatement: 'ForInStatement',
            ForOfStatement: 'ForOfStatement',
            FunctionDeclaration: 'FunctionDeclaration',
            FunctionExpression: 'FunctionExpression',
            GeneratorExpression: 'GeneratorExpression',
            Identifier: 'Identifier',
            IfStatement: 'IfStatement',
            ImportSpecifier: 'ImportSpecifier',
            ImportDeclaration: 'ImportDeclaration',
            Literal: 'Literal',
            LabeledStatement: 'LabeledStatement',
            LogicalExpression: 'LogicalExpression',
            MemberExpression: 'MemberExpression',
            MethodDefinition: 'MethodDefinition',
            ModuleDeclaration: 'ModuleDeclaration',
            NewExpression: 'NewExpression',
            ObjectExpression: 'ObjectExpression',
            ObjectPattern: 'ObjectPattern',
            Program: 'Program',
            Property: 'Property',
            ReturnStatement: 'ReturnStatement',
            SequenceExpression: 'SequenceExpression',
            SpreadElement: 'SpreadElement',
            SwitchStatement: 'SwitchStatement',
            SwitchCase: 'SwitchCase',
            TaggedTemplateExpression: 'TaggedTemplateExpression',
            TemplateElement: 'TemplateElement',
            TemplateLiteral: 'TemplateLiteral',
            ThisExpression: 'ThisExpression',
            ThrowStatement: 'ThrowStatement',
            TryStatement: 'TryStatement',
            UnaryExpression: 'UnaryExpression',
            UpdateExpression: 'UpdateExpression',
            VariableDeclaration: 'VariableDeclaration',
            VariableDeclarator: 'VariableDeclarator',
            WhileStatement: 'WhileStatement',
            WithStatement: 'WithStatement',
            YieldExpression: 'YieldExpression'
        };

        var Precedence = {
            Sequence: 0,
            Yield: 1,
            Assignment: 1,
            Conditional: 2,
            ArrowFunction: 2,
            LogicalOR: 3,
            LogicalAND: 4,
            BitwiseOR: 5,
            BitwiseXOR: 6,
            BitwiseAND: 7,
            Equality: 8,
            Relational: 9,
            BitwiseSHIFT: 10,
            Additive: 11,
            Multiplicative: 12,
            Unary: 13,
            Postfix: 14,
            Call: 15,
            New: 16,
            TaggedTemplate: 17,
            Member: 18,
            Primary: 19
        };

        var BinaryPrecedence = {
            '||': Precedence.LogicalOR,
            '&&': Precedence.LogicalAND,
            '|': Precedence.BitwiseOR,
            '^': Precedence.BitwiseXOR,
            '&': Precedence.BitwiseAND,
            '==': Precedence.Equality,
            '!=': Precedence.Equality,
            '===': Precedence.Equality,
            '!==': Precedence.Equality,
            'is': Precedence.Equality,
            'isnt': Precedence.Equality,
            '<': Precedence.Relational,
            '>': Precedence.Relational,
            '<=': Precedence.Relational,
            '>=': Precedence.Relational,
            'in': Precedence.Relational,
            'instanceof': Precedence.Relational,
            '<<': Precedence.BitwiseSHIFT,
            '>>': Precedence.BitwiseSHIFT,
            '>>>': Precedence.BitwiseSHIFT,
            '+': Precedence.Additive,
            '-': Precedence.Additive,
            '*': Precedence.Multiplicative,
            '%': Precedence.Multiplicative,
            '/': Precedence.Multiplicative
        };

        function getDefaultOptions() {
            // default options
            return {
                indent: null,
                base: null,
                parse: null,
                format: {
                    indent: {
                        style: '    ',
                        base: 0
                    },
                    newline: '\n',
                    space: ' ',
                    json: false,
                    renumber: false,
                    hexadecimal: false,
                    quotes: 'single',
                    escapeless: false,
                    compact: false,
                    parentheses: true,
                    semicolons: true,
                    safeConcatenation: false
                },
                directive: false,
                raw: true,
                verbatim: null
            };
        }

        //-------------------------------------------------===------------------------------------------------------
        //                                            Lexical utils
        //-------------------------------------------------===------------------------------------------------------

        //Const
        var NON_ASCII_WHITESPACES = [
            0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005,
            0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000,
            0xFEFF
        ];

        //Regular expressions
        var NON_ASCII_IDENTIFIER_CHARACTERS_REGEXP = new RegExp(
            '[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376' +
            '\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-' +
            '\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA' +
            '\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-' +
            '\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-' +
            '\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-' +
            '\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-' +
            '\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38' +
            '\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83' +
            '\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9' +
            '\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-' +
            '\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-' +
            '\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E' +
            '\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-' +
            '\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-' +
            '\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-' +
            '\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE' +
            '\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44' +
            '\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-' +
            '\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A' +
            '\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-' +
            '\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9' +
            '\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84' +
            '\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-' +
            '\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5' +
            '\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-' +
            '\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-' +
            '\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD' +
            '\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B' +
            '\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E' +
            '\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-' +
            '\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-' +
            '\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-' +
            '\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F' +
            '\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115' +
            '\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188' +
            '\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-' +
            '\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-' +
            '\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A' +
            '\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5' +
            '\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697' +
            '\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873' +
            '\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-' +
            '\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-' +
            '\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC' +
            '\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-' +
            '\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D' +
            '\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74' +
            '\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-' +
            '\uFFD7\uFFDA-\uFFDC]'
        );


        //Methods
        function isIdentifierCh(cp) {
            if (cp < 0x80) {
                return cp >= 97 && cp <= 122 ||      // a..z
                       cp >= 65 && cp <= 90 ||       // A..Z
                       cp >= 48 && cp <= 57 ||       // 0..9
                       cp === 36 || cp === 95 ||     // $ (dollar) and _ (underscore)
                       cp === 92;                    // \ (backslash)
            }

            var ch = String.fromCharCode(cp);

            return NON_ASCII_IDENTIFIER_CHARACTERS_REGEXP.test(ch);
        }

        function isLineTerminator(cp) {
            return cp === 0x0A || cp === 0x0D || cp === 0x2028 || cp === 0x2029;
        }

        function isWhitespace(cp) {
            return cp === 0x20 || cp === 0x09 || isLineTerminator(cp) || cp === 0x0B || cp === 0x0C || cp === 0xA0 ||
                   (cp >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(cp) >= 0);
        }

        function isDecimalDigit(cp) {
            return cp >= 48 && cp <= 57;
        }

        function stringRepeat(str, num) {
            var result = '';

            for (num |= 0; num > 0; num >>>= 1, str += str) {
                if (num & 1) {
                    result += str;
                }
            }

            return result;
        }

        isArray = Array.isArray;
        if (!isArray) {
            isArray = function isArray(array) {
                return Object.prototype.toString.call(array) === '[object Array]';
            };
        }


        function updateDeeply(target, override) {
            var key, val;

            function isHashObject(target) {
                return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
            }

            for (key in override) {
                if (override.hasOwnProperty(key)) {
                    val = override[key];
                    if (isHashObject(val)) {
                        if (isHashObject(target[key])) {
                            updateDeeply(target[key], val);
                        } else {
                            target[key] = updateDeeply({}, val);
                        }
                    } else {
                        target[key] = val;
                    }
                }
            }
            return target;
        }

        function generateNumber(value) {
            var result, point, temp, exponent, pos;

            if (value === 1 / 0) {
                return json ? 'null' : renumber ? '1e400' : '1e+400';
            }

            result = '' + value;
            if (!renumber || result.length < 3) {
                return result;
            }

            point = result.indexOf('.');
            //NOTE: 0x30 == '0'
            if (!json && result.charCodeAt(0) === 0x30 && point === 1) {
                point = 0;
                result = result.slice(1);
            }
            temp = result;
            result = result.replace('e+', 'e');
            exponent = 0;
            if ((pos = temp.indexOf('e')) > 0) {
                exponent = +temp.slice(pos + 1);
                temp = temp.slice(0, pos);
            }
            if (point >= 0) {
                exponent -= temp.length - point - 1;
                temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
            }
            pos = 0;

            //NOTE: 0x30 == '0'
            while (temp.charCodeAt(temp.length + pos - 1) === 0x30) {
                --pos;
            }
            if (pos !== 0) {
                exponent -= pos;
                temp = temp.slice(0, pos);
            }
            if (exponent !== 0) {
                temp += 'e' + exponent;
            }
            if ((temp.length < result.length ||
                 (hexadecimal && value > 1e12 && Math.floor(value) === value &&
                  (temp = '0x' + value.toString(16)).length
                  < result.length)) &&
                +temp === value) {
                result = temp;
            }

            return result;
        }

        // Generate valid RegExp expression.
        // This function is based on https://github.com/Constellation/iv Engine

        function escapeRegExpCharacter(ch, previousIsBackslash) {
            // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
            if ((ch & ~1) === 0x2028) {
                return (previousIsBackslash ? 'u' : '\\u') + ((ch === 0x2028) ? '2028' : '2029');
            } else if (ch === 10 || ch === 13) {  // \n, \r
                return (previousIsBackslash ? '' : '\\') + ((ch === 10) ? 'n' : 'r');
            }
            return String.fromCharCode(ch);
        }

        function generateRegExp(reg) {
            var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;

            result = reg.toString();

            if (reg.source) {
                // extract flag from toString result
                match = result.match(/\/([^/]*)$/);
                if (!match) {
                    return result;
                }

                flags = match[1];
                result = '';

                characterInBrack = false;
                previousIsBackslash = false;
                for (i = 0, iz = reg.source.length; i < iz; ++i) {
                    ch = reg.source.charCodeAt(i);

                    if (!previousIsBackslash) {
                        if (characterInBrack) {
                            if (ch === 93) {  // ]
                                characterInBrack = false;
                            }
                        } else {
                            if (ch === 47) {  // /
                                result += '\\';
                            } else if (ch === 91) {  // [
                                characterInBrack = true;
                            }
                        }
                        result += escapeRegExpCharacter(ch, previousIsBackslash);
                        previousIsBackslash = ch === 92;  // \
                    } else {
                        // if new RegExp("\\\n') is provided, create /\n/
                        result += escapeRegExpCharacter(ch, previousIsBackslash);
                        // prevent like /\\[/]/
                        previousIsBackslash = false;
                    }
                }

                return '/' + result + '/' + flags;
            }

            return result;
        }

        function escapeAllowedCharacter(code, next) {
            var hex, result = '\\';

            switch (code) {
                case 0x08:          // \b
                    result += 'b';
                    break;
                case 0x0C:          // \f
                    result += 'f';
                    break;
                case 0x09:          // \t
                    result += 't';
                    break;
                default:
                    hex = code.toString(16).toUpperCase();
                    if (json || code > 0xFF) {
                        result += 'u' + '0000'.slice(hex.length) + hex;
                    }

                    else if (code === 0x0000 && !isDecimalDigit(next)) {
                        result += '0';
                    }

                    else if (code === 0x000B) {     // \v
                        result += 'x0B';
                    }

                    else {
                        result += 'x' + '00'.slice(hex.length) + hex;
                    }
                    break;
            }

            return result;
        }

        function escapeDisallowedCharacter(code) {
            var result = '\\';
            switch (code) {
                case 0x5C       // \
                :
                    result += '\\';
                    break;
                case 0x0A       // \n
                :
                    result += 'n';
                    break;
                case 0x0D       // \r
                :
                    result += 'r';
                    break;
                case 0x2028:
                    result += 'u2028';
                    break;
                case 0x2029:
                    result += 'u2029';
                    break;
            }

            return result;
        }

        function escapeDirective(str) {
            var i, iz, code, quote;

            quote = quotes === 'double' ? '"' : '\'';
            for (i = 0, iz = str.length; i < iz; ++i) {
                code = str.charCodeAt(i);
                if (code === 0x27) {            // '
                    quote = '"';
                    break;
                } else if (code === 0x22) {     // "
                    quote = '\'';
                    break;
                } else if (code === 0x5C) {     // \
                    ++i;
                }
            }

            return quote + str + quote;
        }

        function escapeString(str) {
            var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;
            //TODO http://jsperf.com/character-counting/8
            for (i = 0, len = str.length; i < len; ++i) {
                code = str.charCodeAt(i);
                if (code === 0x27) {           // '
                    ++singleQuotes;
                } else if (code === 0x22) { // "
                    ++doubleQuotes;
                } else if (code === 0x2F && json) { // /
                    result += '\\';
                } else if (isLineTerminator(code) || code === 0x5C) { // \
                    result += escapeDisallowedCharacter(code);
                    continue;
                } else if ((json && code < 0x20) ||                                     // SP
                           !(json || escapeless || (code >= 0x20 && code <= 0x7E))) {   // SP, ~
                    result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
                    continue;
                }
                result += String.fromCharCode(code);
            }

            single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
            quote = single ? '\'' : '"';

            if (!(single ? singleQuotes : doubleQuotes)) {
                return quote + result + quote;
            }

            str = result;
            result = quote;

            for (i = 0, len = str.length; i < len; ++i) {
                code = str.charCodeAt(i);
                if ((code === 0x27 && single) || (code === 0x22 && !single)) {    // ', "
                    result += '\\';
                }
                result += String.fromCharCode(code);
            }

            return result + quote;
        }


        function join(l, r) {
            if (!l.length)
                return r;

            if (!r.length)
                return l;

            var lCp = l.charCodeAt(l.length - 1),
                rCp = r.charCodeAt(0);

            if (isIdentifierCh(lCp) && isIdentifierCh(rCp) ||
                lCp === rCp && (lCp === 0x2B || lCp === 0x2D) ||   // + +, - -
                lCp === 0x2F && rCp === 0x69) {                    // /re/ instanceof foo
                return l + _.space + r;
            }

            else if (isWhitespace(lCp) || isWhitespace(rCp))
                return l + r;

            return l + _.optSpace + r;
        }

        function shiftIndent() {
            var prevIndent = _.indent;

            _.indent += _.indentUnit;
            return prevIndent;
        }

        function adoptionPrefix($stmt) {
            if ($stmt.type === Syntax.BlockStatement)
                return _.optSpace;

            if ($stmt.type === Syntax.EmptyStatement)
                return '';

            return _.newline + _.indent + _.indentUnit;
        }

        function adoptionSuffix($stmt) {
            if ($stmt.type === Syntax.BlockStatement)
                return _.optSpace;

            return _.newline + _.indent;
        }

        //Subentities generators
        function generateVerbatim($expr, settings) {
            var verbatim = $expr[extra.verbatim],
                strVerbatim = typeof verbatim === 'string',
                precedence = !strVerbatim && verbatim.precedence !== void 0 ? verbatim.precedence : Precedence.Sequence,
                parenthesize = precedence < settings.precedence,
                content = strVerbatim ? verbatim : verbatim.content,
                chunks = content.split(/\r\n|\n/),
                chunkCount = chunks.length;

            if (parenthesize)
                _.js += '(';

            _.js += chunks[0];

            for (var i = 1; i < chunkCount; i++)
                _.js += _.newline + _.indent + chunks[i];

            if (parenthesize)
                _.js += ')';
        }

        function generateFunctionParams($node) {
            var $params = $node.params,
                $rest = $node.rest,
                $defaults = $node.defaults,
                paramCount = $params.length,
                lastParamIdx = paramCount - 1,
                hasDefaults = !!$defaults,
                arrowFuncWithSingleParam = $node.type === Syntax.ArrowFunctionExpression && !$rest &&
                                           (!hasDefaults || $defaults.length === 0) &&
                                           paramCount === 1 &&
                                           $params[0].type === Syntax.Identifier;

            //NOTE: arg => { } case
            if (arrowFuncWithSingleParam)
                _.js += $params[0].name;

            else {
                _.js += '(';

                for (var i = 0; i < paramCount; ++i) {
                    var $param = $params[i];

                    if (hasDefaults && $defaults[i]) {
                        var $fakeAssign = {
                            left: $param,
                            right: $defaults[i],
                            operator: '='
                        };

                        ExprGen.AssignmentExpression($fakeAssign, Preset.e4);
                    }

                    else {
                        if ($params[i].type === Syntax.Identifier)
                            _.js += $param.name;

                        else
                            ExprGen[$param.type]($param, Preset.e4);
                    }

                    if (i !== lastParamIdx)
                        _.js += ',' + _.optSpace;
                }

                if ($rest) {
                    if (paramCount)
                        _.js += ',' + _.optSpace;

                    _.js += '...' + $rest.name;
                }

                _.js += ')';
            }
        }

        function generateFunctionBody($node) {
            var $body = $node.body;

            generateFunctionParams($node);

            if ($node.type === Syntax.ArrowFunctionExpression)
                _.js += _.optSpace + '=>';

            if ($node.expression) {
                _.js += _.optSpace;

                var exprJs = exprToJs($body, Preset.e4);

                if (exprJs.charAt(0) === '{')
                    exprJs = '(' + exprJs + ')';

                _.js += exprJs;
            }

            else {
                _.js += adoptionPrefix($body);
                StmtGen[$body.type]($body, Preset.s8);
            }
        }


        //-------------------------------------------------===------------------------------------------------------
        //                                Syntactic entities generation presets
        //-------------------------------------------------===------------------------------------------------------

        var Preset = {
            e1: function (allowIn) {
                return {
                    precedence: Precedence.Assignment,
                    allowIn: allowIn,
                    allowCall: true,
                    allowUnparenthesizedNew: true
                };
            },

            e2: function (allowIn) {
                return {
                    precedence: Precedence.LogicalOR,
                    allowIn: allowIn,
                    allowCall: true,
                    allowUnparenthesizedNew: true
                };
            },

            e3: {
                precedence: Precedence.Call,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: false
            },

            e4: {
                precedence: Precedence.Assignment,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: true
            },

            e5: {
                precedence: Precedence.Sequence,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: true
            },

            e6: function (allowUnparenthesizedNew) {
                return {
                    precedence: Precedence.New,
                    allowIn: true,
                    allowCall: false,
                    allowUnparenthesizedNew: allowUnparenthesizedNew
                };
            },

            e7: {
                precedence: Precedence.Unary,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: true
            },

            e8: {
                precedence: Precedence.Postfix,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: true
            },

            e9: {
                precedence: void 0,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: true
            },

            e10: {
                precedence: Precedence.Call,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: true
            },

            e11: function (allowCall) {
                return {
                    precedence: Precedence.Call,
                    allowIn: true,
                    allowCall: allowCall,
                    allowUnparenthesizedNew: false
                };
            },

            e12: {
                precedence: Precedence.Primary,
                allowIn: false,
                allowCall: false,
                allowUnparenthesizedNew: true
            },

            e13: {
                precedence: Precedence.Primary,
                allowIn: true,
                allowCall: true,
                allowUnparenthesizedNew: true
            },


            e14: {
                precedence: Precedence.Sequence,
                allowIn: false,
                allowCall: true,
                allowUnparenthesizedNew: true
            },


            e15: function (allowCall) {
                return {
                    precedence: Precedence.Sequence,
                    allowIn: true,
                    allowCall: allowCall,
                    allowUnparenthesizedNew: true
                };
            },

            e16: function (precedence, allowIn) {
                return {
                    precedence: precedence,
                    allowIn: allowIn,
                    allowCall: true,
                    allowUnparenthesizedNew: true
                };
            },

            e17: function (allowIn) {
                return {
                    precedence: Precedence.Call,
                    allowIn: allowIn,
                    allowCall: true,
                    allowUnparenthesizedNew: true
                }
            },

            e18: function (allowIn) {
                return {
                    precedence: Precedence.Assignment,
                    allowIn: allowIn,
                    allowCall: true,
                    allowUnparenthesizedNew: true
                }
            },

            e19: {
                precedence: Precedence.Sequence,
                allowIn: true,
                allowCall: true,
                semicolonOptional: false
            },

            s1: function (functionBody, semicolonOptional) {
                return {
                    allowIn: true,
                    functionBody: false,
                    directiveContext: functionBody,
                    semicolonOptional: semicolonOptional
                };
            },

            s2: {
                allowIn: true,
                functionBody: false,
                directiveContext: false,
                semicolonOptional: true
            },

            s3: function (allowIn) {
                return {
                    allowIn: allowIn,
                    functionBody: false,
                    directiveContext: false,
                    semicolonOptional: false
                };
            },

            s4: function (semicolonOptional) {
                return {
                    allowIn: true,
                    functionBody: false,
                    directiveContext: false,
                    semicolonOptional: semicolonOptional
                };
            },

            s5: function (semicolonOptional) {
                return {
                    allowIn: true,
                    functionBody: false,
                    directiveContext: true,
                    semicolonOptional: semicolonOptional,
                };
            },

            s6: {
                allowIn: false,
                functionBody: false,
                directiveContext: false,
                semicolonOptional: false
            },

            s7: {
                allowIn: true,
                functionBody: false,
                directiveContext: false,
                semicolonOptional: false
            },

            s8: {
                allowIn: true,
                functionBody: true,
                directiveContext: false,
                semicolonOptional: false
            }
        };


        //-------------------------------------------------===-------------------------------------------------------
        //                                             Expressions
        //-------------------------------------------------===-------------------------------------------------------

        //Regular expressions
        var FLOATING_OR_OCTAL_REGEXP = /[.eExX]|^0[0-9]+/,
            LAST_DECIMAL_DIGIT_REGEXP = /[0-9]$/;


        //Common expression generators
        function generateLogicalOrBinaryExpression($expr, settings) {
            var op = $expr.operator,
                precedence = BinaryPrecedence[$expr.operator],
                parenthesize = precedence < settings.precedence,
                allowIn = settings.allowIn || parenthesize,
                operandGenSettings = Preset.e16(precedence, allowIn),
                exprJs = exprToJs($expr.left, operandGenSettings);

            parenthesize |= op === 'in' && !allowIn;

            if (parenthesize)
                _.js += '(';

            // 0x2F = '/'
            if (exprJs.charCodeAt(exprJs.length - 1) === 0x2F && isIdentifierCh(op.charCodeAt(0)))
                exprJs = exprJs + _.space + op;

            else
                exprJs = join(exprJs, op);

            operandGenSettings.precedence++;

            var rightJs = exprToJs($expr.right, operandGenSettings);

            //NOTE: If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
            if (op === '/' && rightJs.charAt(0) === '/' || op.slice(-1) === '<' && rightJs.slice(0, 3) === '!--')
                exprJs += _.space + rightJs;

            else
                exprJs = join(exprJs, rightJs);

            _.js += exprJs;

            if (parenthesize)
                _.js += ')';
        }

        function generateArrayPatternOrExpression($expr) {
            var $elems = $expr.elements,
                elemCount = $elems.length;

            if (elemCount) {
                var lastElemIdx = elemCount - 1,
                    multiline = elemCount > 1,
                    prevIndent = shiftIndent(),
                    itemPrefix = _.newline + _.indent;

                _.js += '[';

                for (var i = 0; i < elemCount; i++) {
                    var $elem = $elems[i];

                    if (multiline)
                        _.js += itemPrefix;

                    if ($elem)
                        ExprGen[$elem.type]($elem, Preset.e4);

                    if (i !== lastElemIdx || !$elem)
                        _.js += ',';
                }

                _.indent = prevIndent;

                if (multiline)
                    _.js += _.newline + _.indent;

                _.js += ']';
            }

            else
                _.js += '[]';
        }

        function generateImportOrExportSpecifier($expr) {
            _.js += $expr.id.name;

            if ($expr.name)
                _.js += _.space + 'as' + _.space + $expr.name.name;
        }

        function generateGeneratorOrComprehensionExpression($expr) {
            //NOTE: GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
            var $blocks = $expr.blocks,
                $filter = $expr.filter,
                isGenerator = $expr.type === Syntax.GeneratorExpression,
                exprJs = isGenerator ? '(' : '[',
                bodyJs = exprToJs($expr.body, Preset.e4);

            if ($blocks) {
                var prevIndent = shiftIndent(),
                    blockCount = $blocks.length;

                for (var i = 0; i < blockCount; ++i) {
                    var blockJs = exprToJs($blocks[i], Preset.e5);

                    exprJs = i > 0 ? join(exprJs, blockJs) : (exprJs + blockJs);
                }

                _.indent = prevIndent;
            }

            if ($filter) {
                var filterJs = exprToJs($filter, Preset.e5);

                exprJs = join(exprJs, 'if' + _.optSpace);
                exprJs = join(exprJs, '(' + filterJs + ')');
            }

            exprJs = join(exprJs, bodyJs);
            exprJs += isGenerator ? ')' : ']';

            _.js += exprJs;
        }


        //Expression raw generator dictionary
        var ExprRawGen = {
            SequenceExpression: function generateSequenceExpression($expr, settings) {
                var $children = $expr.expressions,
                    childrenCount = $children.length,
                    lastChildIdx = childrenCount - 1,
                    parenthesize = Precedence.Sequence < settings.precedence,
                    exprGenSettings = Preset.e1(settings.allowIn || parenthesize);

                if (parenthesize)
                    _.js += '(';

                for (var i = 0; i < childrenCount; i++) {
                    var $child = $children[i];

                    ExprGen[$child.type]($child, exprGenSettings);

                    if (i !== lastChildIdx)
                        _.js += ',' + _.optSpace;
                }

                if (parenthesize)
                    _.js += ')';
            },

            AssignmentExpression: function generateAssignmentExpression($expr, settings) {
                var $left = $expr.left,
                    $right = $expr.right,
                    parenthesize = Precedence.Assignment < settings.precedence,
                    allowIn = settings.allowIn || parenthesize;

                if (parenthesize)
                    _.js += '(';

                ExprGen[$left.type]($left, Preset.e17(allowIn));
                _.js += _.optSpace + $expr.operator + _.optSpace;
                ExprGen[$right.type]($right, Preset.e18(allowIn));

                if (parenthesize)
                    _.js += ')';
            },

            ArrowFunctionExpression: function generateArrowFunctionExpression($expr, settings) {
                var parenthesize = Precedence.ArrowFunction < settings.precedence;

                if (parenthesize)
                    _.js += '(';

                generateFunctionBody($expr);

                if (parenthesize)
                    _.js += ')';
            },

            ConditionalExpression: function generateConditionalExpression($expr, settings) {
                var $test = $expr.test,
                    $conseq = $expr.consequent,
                    $alt = $expr.alternate,
                    parenthesize = Precedence.Conditional < settings.precedence,
                    allowIn = settings.allowIn || parenthesize,
                    testGenSettings = Preset.e2(allowIn),
                    branchGenSettings = Preset.e1(allowIn);

                if (parenthesize)
                    _.js += '(';

                ExprGen[$test.type]($test, testGenSettings);
                _.js += _.optSpace + '?' + _.optSpace;
                ExprGen[$conseq.type]($conseq, branchGenSettings);
                _.js += _.optSpace + ':' + _.optSpace;
                ExprGen[$alt.type]($alt, branchGenSettings);

                if (parenthesize)
                    _.js += ')';
            },

            LogicalExpression: generateLogicalOrBinaryExpression,

            BinaryExpression: generateLogicalOrBinaryExpression,

            CallExpression: function generateCallExpression($expr, settings) {
                var $callee = $expr.callee,
                    $args = $expr['arguments'],
                    argCount = $args.length,
                    lastArgIdx = argCount - 1,
                    parenthesize = !settings.allowCall || Precedence.Call < settings.precedence;

                if (parenthesize)
                    _.js += '(';

                ExprGen[$callee.type]($callee, Preset.e3);
                _.js += '(';

                for (var i = 0; i < argCount; ++i) {
                    var $arg = $args[i];

                    ExprGen[$arg.type]($arg, Preset.e4);

                    if (i !== lastArgIdx)
                        _.js += ',' + _.optSpace;
                }

                _.js += ')';

                if (parenthesize)
                    _.js += ')';
            },

            NewExpression: function generateNewExpression($expr, settings) {
                var $args = $expr['arguments'],
                    parenthesize = Precedence.New < settings.precedence,
                    argCount = $args.length,
                    lastArgIdx = argCount - 1,
                    withCall = !settings.allowUnparenthesizedNew || parentheses || argCount > 0,
                    calleeJs = exprToJs($expr.callee, Preset.e6(!withCall));

                if (parenthesize)
                    _.js += '(';

                _.js += join('new', calleeJs);

                if (withCall) {
                    _.js += '(';

                    for (var i = 0; i < argCount; ++i) {
                        var $arg = $args[i];

                        ExprGen[$arg.type]($arg, Preset.e4);

                        if (i !== lastArgIdx)
                            _.js += ',' + _.optSpace;
                    }

                    _.js += ')';
                }

                if (parenthesize)
                    _.js += ')';
            },

            MemberExpression: function generateMemberExpression($expr, settings) {
                var $obj = $expr.object,
                    $prop = $expr.property,
                    parenthesize = Precedence.Member < settings.precedence,
                    isNumObj = !$expr.computed && $obj.type === Syntax.Literal && typeof $obj.value === 'number';

                if (parenthesize)
                    _.js += '(';

                if (isNumObj) {

                    //NOTE: When the following conditions are all true:
                    //   1. No floating point
                    //   2. Don't have exponents
                    //   3. The last character is a decimal digit
                    //   4. Not hexadecimal OR octal number literal
                    // then we should add a floating point.

                    var numJs = exprToJs($obj, Preset.e11(settings.allowCall)),
                        withPoint = LAST_DECIMAL_DIGIT_REGEXP.test(numJs) && !FLOATING_OR_OCTAL_REGEXP.test(numJs);

                    _.js += withPoint ? (numJs + '.') : numJs;
                }

                else
                    ExprGen[$obj.type]($obj, Preset.e11(settings.allowCall));

                if ($expr.computed) {
                    _.js += '[';
                    ExprGen[$prop.type]($prop, Preset.e15(settings.allowCall));
                    _.js += ']';
                }

                else
                    _.js += '.' + $prop.name;

                if (parenthesize)
                    _.js += ')';
            },

            UnaryExpression: function generateUnaryExpression($expr, settings) {
                var parenthesize = Precedence.Unary < settings.precedence,
                    op = $expr.operator,
                    argJs = exprToJs($expr.argument, Preset.e7);

                if (parenthesize)
                    _.js += '(';

                //NOTE: delete, void, typeof
                // get `typeof []`, not `typeof[]`
                if (_.optSpace === '' || op.length > 2)
                    _.js += join(op, argJs);

                else {
                    _.js += op;

                    //NOTE: Prevent inserting spaces between operator and argument if it is unnecessary
                    // like, `!cond`
                    var leftCp = op.charCodeAt(op.length - 1),
                        rightCp = argJs.charCodeAt(0);

                    // 0x2B = '+', 0x2D =  '-'
                    if (leftCp === rightCp && (leftCp === 0x2B || leftCp === 0x2D) ||
                        isIdentifierCh(leftCp) && isIdentifierCh(rightCp)) {
                        _.js += _.space;
                    }

                    _.js += argJs;
                }

                if (parenthesize)
                    _.js += ')';
            },

            YieldExpression: function generateYieldExpression($expr, settings) {
                var $arg = $expr.argument,
                    js = $expr.delegate ? 'yield*' : 'yield',
                    parenthesize = Precedence.Yield < settings.precedence;

                if (parenthesize)
                    _.js += '(';

                if ($arg) {
                    var argJs = exprToJs($arg, Preset.e4);

                    js = join(js, argJs);
                }

                _.js += js;

                if (parenthesize)
                    _.js += ')';
            },

            UpdateExpression: function generateUpdateExpression($expr, settings) {
                var $arg = $expr.argument,
                    $op = $expr.operator,
                    prefix = $expr.prefix,
                    precedence = prefix ? Precedence.Unary : Precedence.Postfix,
                    parenthesize = precedence < settings.precedence;

                if (parenthesize)
                    _.js += '(';

                if (prefix) {
                    _.js += $op;
                    ExprGen[$arg.type]($arg, Preset.e8);

                }

                else {
                    ExprGen[$arg.type]($arg, Preset.e8);
                    _.js += $op;
                }

                if (parenthesize)
                    _.js += ')';
            },

            FunctionExpression: function generateFunctionExpression($expr) {
                var isGenerator = !!$expr.generator;

                _.js += isGenerator ? 'function*' : 'function';

                if ($expr.id) {
                    _.js += isGenerator ? _.optSpace : _.space;
                    _.js += $expr.id.name;
                }
                else
                    _.js += _.optSpace;

                generateFunctionBody($expr);
            },

            ExportBatchSpecifier: function generateExportBatchSpecifier() {
                _.js += '*';
            },

            ArrayPattern: generateArrayPatternOrExpression,

            ArrayExpression: generateArrayPatternOrExpression,

            ClassExpression: function generateClassExpression($expr) {
                var $id = $expr.id,
                    $super = $expr.superClass,
                    $body = $expr.body,
                    exprJs = 'class';

                if ($id) {
                    var idJs = exprToJs($id, Preset.e9);

                    exprJs = join(exprJs, idJs);
                }

                if ($super) {
                    var superJs = exprToJs($super, Preset.e4);

                    superJs = join('extends', superJs);
                    exprJs = join(exprJs, superJs);
                }

                _.js += exprJs + _.optSpace;
                StmtGen[$body.type]($body, Preset.s2);
            },

            MethodDefinition: function generateMethodDefinition($expr) {
                var exprJs = $expr['static'] ? 'static' + _.optSpace : '',
                    keyJs = exprToJs($expr.key, Preset.e5);

                if ($expr.computed)
                    keyJs = '[' + keyJs + ']';

                if ($expr.kind === 'get' || $expr.kind === 'set') {
                    keyJs = join($expr.kind, keyJs);
                    _.js += join(exprJs, keyJs);
                }

                else {
                    if ($expr.value.generator)
                        _.js += exprJs + '*' + keyJs;

                    else
                        _.js += join(exprJs, keyJs);
                }

                generateFunctionBody($expr.value);
            },

            Property: function generateProperty($expr) {
                var $val = $expr.value,
                    $kind = $expr.kind,
                    keyJs = exprToJs($expr.key, Preset.e5);

                if ($expr.computed)
                    keyJs = '[' + keyJs + ']';

                if ($kind === 'get' || $kind === 'set') {
                    _.js += $kind + _.space + keyJs;
                    generateFunctionBody($val);
                }

                else {
                    if ($expr.shorthand)
                        _.js += keyJs;

                    else if ($expr.method) {
                        _.js += $val.generator ? ('*' + keyJs) : keyJs;
                        generateFunctionBody($val)
                    }

                    else {
                        _.js += keyJs + ':' + _.optSpace;
                        ExprGen[$val.type]($val, Preset.e4);
                    }
                }
            },

            ObjectExpression: function generateObjectExpression($expr) {
                var $props = $expr.properties,
                    propCount = $props.length;

                if (propCount) {
                    var lastPropIdx = propCount - 1,
                        prevIndent = shiftIndent();

                    _.js += '{';

                    for (var i = 0; i < propCount; i++) {
                        var $prop = $props[i],
                            propType = $prop.type || Syntax.Property;

                        _.js += _.newline + _.indent;
                        ExprGen[propType]($prop, Preset.e5);

                        if (i !== lastPropIdx)
                            _.js += ',';
                    }

                    _.indent = prevIndent;
                    _.js += _.newline + _.indent + '}';
                }

                else
                    _.js += '{}';
            },

            ObjectPattern: function generateObjectPattern($expr) {
                var $props = $expr.properties,
                    propCount = $props.length;

                if (propCount) {
                    var lastPropIdx = propCount - 1,
                        multiline = false;

                    if (propCount === 1)
                        multiline = $props[0].value.type !== Syntax.Identifier;

                    else {
                        for (var i = 0; i < propCount; i++) {
                            if (!$props[i].shorthand) {
                                multiline = true;
                                break;
                            }
                        }
                    }

                    _.js += multiline ? ('{' + _.newline) : '{';

                    var prevIndent = shiftIndent(),
                        propSuffix = ',' + (multiline ? _.newline : _.optSpace);

                    for (var i = 0; i < propCount; i++) {
                        var $prop = $props[i];

                        if (multiline)
                            _.js += _.indent;

                        ExprGen[$prop.type]($prop, Preset.e5);

                        if (i !== lastPropIdx)
                            _.js += propSuffix;
                    }

                    _.indent = prevIndent;
                    _.js += multiline ? (_.newline + _.indent + '}') : '}';
                }
                else
                    _.js += '{}';
            },

            ThisExpression: function generateThisExpression() {
                _.js += 'this';
            },

            Identifier: function generateIdentifier($expr) {
                _.js += $expr.name;
            },

            ImportSpecifier: generateImportOrExportSpecifier,

            ExportSpecifier: generateImportOrExportSpecifier,

            Literal: function generateLiteral($expr) {
                if (extra.raw && $expr.raw !== void 0)
                    _.js += $expr.raw;

                else if ($expr.value === null)
                    _.js += 'null';

                else {
                    var valueType = typeof $expr.value;

                    if (valueType === 'string')
                        _.js += escapeString($expr.value);

                    else if (valueType === 'number')
                        _.js += generateNumber($expr.value);

                    else if (valueType === 'boolean')
                        _.js += $expr.value ? 'true' : 'false';

                    else
                        _.js += generateRegExp($expr.value);
                }
            },

            GeneratorExpression: generateGeneratorOrComprehensionExpression,

            ComprehensionExpression: generateGeneratorOrComprehensionExpression,

            ComprehensionBlock: function generateComprehensionBlock($expr) {
                var $left = $expr.left,
                    leftJs = void 0,
                    rightJs = exprToJs($expr.right, Preset.e5);

                if ($left.type === Syntax.VariableDeclaration)
                    leftJs = $left.kind + _.space + stmtToJs($left.declarations[0], Preset.s6);

                else
                    leftJs = exprToJs($left, Preset.e10);

                leftJs = join(leftJs, $expr.of ? 'of' : 'in');

                _.js += 'for' + _.optSpace + '(' + join(leftJs, rightJs) + ')';
            },

            SpreadElement: function generateSpreadElement($expr) {
                var $arg = $expr.argument;

                _.js += '...';
                ExprGen[$arg.type]($arg, Preset.e4);
            },

            TaggedTemplateExpression: function generateTaggedTemplateExpression($expr, settings) {
                var $tag = $expr.tag,
                    $quasi = $expr.quasi,
                    parenthesize = Precedence.TaggedTemplate < settings.precedence;

                if (parenthesize)
                    _.js += '(';

                ExprGen[$tag.type]($tag, Preset.e11(settings.allowCall));
                ExprGen[$quasi.type]($quasi, Preset.e12);

                if (parenthesize)
                    _.js += ')';
            },

            TemplateElement: function generateTemplateElement($expr) {
                //NOTE: Don't use "cooked". Since tagged template can use raw template
                // representation. So if we do so, it breaks the script semantics.
                _.js += $expr.value.raw;
            },

            TemplateLiteral: function generateTemplateLiteral($expr) {
                var $quasis = $expr.quasis,
                    $childExprs = $expr.expressions,
                    quasiCount = $quasis.length,
                    lastQuasiIdx = quasiCount - 1;

                _.js += '`';

                for (var i = 0; i < quasiCount; ++i) {
                    var $quasi = $quasis[i];

                    ExprGen[$quasi.type]($quasi, Preset.e13);

                    if (i !== lastQuasiIdx) {
                        var $childExpr = $childExprs[i];

                        _.js += '${' + _.optSpace;
                        ExprGen[$childExpr.type]($childExpr, Preset.e5);
                        _.js += _.optSpace + '}';
                    }
                }

                _.js += '`';
            }
        };


        //-------------------------------------------------===------------------------------------------------------
        //                                              Statements
        //-------------------------------------------------===------------------------------------------------------


        //Regular expressions
        var EXPR_STMT_UNALLOWED_EXPR_REGEXP = /^{|^class(?:\s|{)|^function(?:\s|\*|\()/;


        //Common statement generators
        function generateTryStatementHandlers(stmtJs, $finalizer, handlers) {
            var handlerCount = handlers.length,
                lastHandlerIdx = handlerCount - 1;

            for (var i = 0; i < handlerCount; ++i) {
                var handlerJs = stmtToJs(handlers[i], Preset.s7);

                stmtJs = join(stmtJs, handlerJs);

                if ($finalizer || i !== lastHandlerIdx)
                    stmtJs += adoptionSuffix(handlers[i].body);
            }

            return stmtJs;
        }

        function generateForStatementIterator($op, $stmt, settings) {
            var $body = $stmt.body,
                $left = $stmt.left,
                bodySemicolonOptional = !semicolons && settings.semicolonOptional,
                prevIndent1 = shiftIndent(),
                stmtJs = 'for' + _.optSpace + '(';

            if ($left.type === Syntax.VariableDeclaration) {
                var prevIndent2 = shiftIndent();

                stmtJs += $left.kind + _.space + stmtToJs($left.declarations[0], Preset.s6);
                _.indent = prevIndent2;
            }

            else
                stmtJs += exprToJs($left, Preset.e10);

            stmtJs = join(stmtJs, $op);

            var rightJs = exprToJs($stmt.right, Preset.e5);

            stmtJs = join(stmtJs, rightJs) + ')';

            _.indent = prevIndent1;

            _.js += stmtJs + adoptionPrefix($body);
            StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
        }


        //Statement generator dictionary
        var StmtRawGen = {
            BlockStatement: function generateBlockStatement($stmt, settings) {
                var $body = $stmt.body,
                    len = $body.length,
                    lastIdx = len - 1,
                    prevIndent = shiftIndent();

                _.js += '{' + _.newline;

                //NOTE: extremely stupid solution for the T170848. We can't preserver all comments, because it's
                //ultra slow, but we make a trick: if we have a function body without content then we add
                //empty block comment into it. A lot of popular sites uses this ads library which fails if we don't
                //do that.
                if (settings.functionBody && !$body.length)
                    _.js += '/**/';

                for (var i = 0; i < len; i++) {
                    var $item = $body[i];

                    _.js += _.indent;
                    StmtGen[$item.type]($item, Preset.s1(settings.functionBody, i === lastIdx));
                    _.js += _.newline;
                }

                _.indent = prevIndent;
                _.js += _.indent + '}';
            },

            BreakStatement: function generateBreakStatement($stmt, settings) {
                if ($stmt.label)
                    _.js += 'break ' + $stmt.label.name;

                else
                    _.js += 'break';

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            ContinueStatement: function generateContinueStatement($stmt, settings) {
                if ($stmt.label)
                    _.js += 'continue ' + $stmt.label.name;

                else
                    _.js += 'continue';

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            ClassBody: function generateClassBody($stmt) {
                var $body = $stmt.body,
                    itemCount = $body.length,
                    lastItemIdx = itemCount - 1,
                    prevIndent = shiftIndent();

                _.js += '{' + _.newline;

                for (var i = 0; i < itemCount; i++) {
                    var $item = $body[i],
                        itemType = $item.type || Syntax.Property;

                    _.js += _.indent;
                    ExprGen[itemType]($item, Preset.e5);

                    if (i !== lastItemIdx)
                        _.js += _.newline;
                }

                _.indent = prevIndent;
                _.js += _.newline + _.indent + '}';
            },

            ClassDeclaration: function generateClassDeclaration($stmt) {
                var $body = $stmt.body,
                    $super = $stmt.superClass,
                    js = 'class ' + $stmt.id.name;

                if ($super) {
                    var superJs = exprToJs($super, Preset.e4);

                    js += _.space + join('extends', superJs);
                }

                _.js += js + _.optSpace;
                StmtGen[$body.type]($body, Preset.s2);
            },

            DirectiveStatement: function generateDirectiveStatement($stmt, settings) {
                if (extra.raw && $stmt.raw)
                    _.js += $stmt.raw;

                else
                    _.js += escapeDirective($stmt.directive);

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            DoWhileStatement: function generateDoWhileStatement($stmt, settings) {
                var $body = $stmt.body,
                    $test = $stmt.test,
                    bodyJs = adoptionPrefix($body) +
                             stmtToJs($body, Preset.s7) +
                             adoptionSuffix($body);

                //NOTE: Because `do 42 while (cond)` is Syntax Error. We need semicolon.
                var stmtJs = join('do', bodyJs);

                _.js += join(stmtJs, 'while' + _.optSpace + '(');
                ExprGen[$test.type]($test, Preset.e5);
                _.js += ')';

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            CatchClause: function generateCatchClause($stmt) {
                var $param = $stmt.param,
                    $guard = $stmt.guard,
                    $body = $stmt.body,
                    prevIndent = shiftIndent();

                _.js += 'catch' + _.optSpace + '(';
                ExprGen[$param.type]($param, Preset.e5);

                if ($guard) {
                    _.js += ' if ';
                    ExprGen[$guard.type]($guard, Preset.e5);
                }

                _.indent = prevIndent;
                _.js += ')' + adoptionPrefix($body);
                StmtGen[$body.type]($body, Preset.s7);
            },

            DebuggerStatement: function generateDebuggerStatement($stmt, settings) {
                _.js += 'debugger';

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            EmptyStatement: function generateEmptyStatement() {
                _.js += ';';
            },

            ExportDeclaration: function generateExportDeclaration($stmt, settings) {
                var $specs = $stmt.specifiers,
                    $decl = $stmt.declaration,
                    withSemicolon = semicolons || !settings.semicolonOptional;

                // export default AssignmentExpression[In] ;
                if ($stmt['default']) {
                    var declJs = exprToJs($decl, Preset.e4);

                    _.js += join('export default', declJs);

                    if (withSemicolon)
                        _.js += ';';
                }

                // export * FromClause ;
                // export ExportClause[NoReference] FromClause ;
                // export ExportClause ;
                else if ($specs) {
                    var stmtJs = 'export';

                    if ($specs.length === 0)
                        stmtJs += _.optSpace + '{' + _.optSpace + '}';

                    else if ($specs[0].type === Syntax.ExportBatchSpecifier) {
                        var specJs = exprToJs($specs[0], Preset.e5);

                        stmtJs = join(stmtJs, specJs);
                    }

                    else {
                        var prevIndent = shiftIndent(),
                            specCount = $specs.length,
                            lastSpecIdx = specCount - 1;

                        stmtJs += _.optSpace + '{';

                        for (var i = 0; i < specCount; ++i) {
                            stmtJs += _.newline + _.indent;
                            stmtJs += exprToJs($specs[i], Preset.e5);

                            if (i !== lastSpecIdx)
                                stmtJs += ',';
                        }

                        _.indent = prevIndent;
                        stmtJs += _.newline + _.indent + '}';
                    }

                    if ($stmt.source) {
                        _.js += join(stmtJs, 'from' + _.optSpace);
                        ExprGen.Literal($stmt.source);
                    }

                    else
                        _.js += stmtJs;

                    if (withSemicolon)
                        _.js += ';';
                }

                // export VariableStatement
                // export Declaration[Default]
                else if ($decl) {
                    var declJs = stmtToJs($decl, Preset.s4(!withSemicolon));

                    _.js += join('export', declJs);
                }
            },

            ExpressionStatement: function generateExpressionStatement($stmt, settings) {
                var exprJs = exprToJs($stmt.expression, Preset.e5),
                    parenthesize = EXPR_STMT_UNALLOWED_EXPR_REGEXP.test(exprJs) ||
                                   (directive &&
                                    settings.directiveContext &&
                                    $stmt.expression.type === Syntax.Literal &&
                                    typeof $stmt.expression.value === 'string');

                //NOTE: '{', 'function', 'class' are not allowed in expression statement.
                // Therefore, they should be parenthesized.
                if (parenthesize)
                    _.js += '(' + exprJs + ')';

                else
                    _.js += exprJs;

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            ImportDeclaration: function generateImportDeclaration($stmt, settings) {
                var $specs = $stmt.specifiers,
                    stmtJs = 'import',
                    specCount = $specs.length;

                //NOTE: If no ImportClause is present,
                // this should be `import ModuleSpecifier` so skip `from`
                // ModuleSpecifier is StringLiteral.
                if (specCount) {
                    var hasBinding = !!$specs[0]['default'],
                        firstNamedIdx = hasBinding ? 1 : 0,
                        lastSpecIdx = specCount - 1;

                    // ImportedBinding
                    if (hasBinding)
                        stmtJs = join(stmtJs, $specs[0].id.name);

                    // NamedImports
                    if (firstNamedIdx < specCount) {
                        if (hasBinding)
                            stmtJs += ',';

                        stmtJs += _.optSpace + '{';

                        // import { ... } from "...";
                        if (firstNamedIdx === lastSpecIdx)
                            stmtJs += _.optSpace + exprToJs($specs[firstNamedIdx], Preset.e5) + _.optSpace;

                        else {
                            var prevIndent = shiftIndent();

                            // import {
                            //    ...,
                            //    ...,
                            // } from "...";
                            for (var i = firstNamedIdx; i < specCount; i++) {
                                stmtJs += _.newline + _.indent + exprToJs($specs[i], Preset.e5);

                                if (i !== lastSpecIdx)
                                    stmtJs += ',';
                            }

                            _.indent = prevIndent;
                            stmtJs += _.newline + _.indent;
                        }

                        stmtJs += '}' + _.optSpace;
                    }

                    stmtJs = join(stmtJs, 'from')
                }

                _.js += stmtJs + _.optSpace;
                ExprGen.Literal($stmt.source);

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            VariableDeclarator: function generateVariableDeclarator($stmt, settings) {
                var $id = $stmt.id,
                    $init = $stmt.init,
                    genSettings = Preset.e1(settings.allowIn);

                if ($init) {
                    ExprGen[$id.type]($id, genSettings);
                    _.js += _.optSpace + '=' + _.optSpace;
                    ExprGen[$init.type]($init, genSettings);
                }

                else {
                    if ($id.type === Syntax.Identifier)
                        _.js += $id.name;

                    else
                        ExprGen[$id.type]($id, genSettings);
                }
            },

            VariableDeclaration: function generateVariableDeclaration($stmt, settings) {
                var $decls = $stmt.declarations,
                    len = $decls.length,
                    prevIndent = len > 1 ? shiftIndent() : _.indent,
                    declGenSettings = Preset.s3(settings.allowIn);

                _.js += $stmt.kind;

                for (var i = 0; i < len; i++) {
                    var $decl = $decls[i];

                    _.js += i === 0 ? _.space : (',' + _.optSpace);
                    StmtGen[$decl.type]($decl, declGenSettings);
                }

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';

                _.indent = prevIndent;
            },

            ThrowStatement: function generateThrowStatement($stmt, settings) {
                var argJs = exprToJs($stmt.argument, Preset.e5);

                _.js += join('throw', argJs);

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            TryStatement: function generateTryStatement($stmt) {
                var $block = $stmt.block,
                    $finalizer = $stmt.finalizer,
                    stmtJs = 'try' +
                             adoptionPrefix($block) +
                             stmtToJs($block, Preset.s7) +
                             adoptionSuffix($block);

                var $handlers = $stmt.handlers || $stmt.guardedHandlers;

                if ($handlers)
                    stmtJs = generateTryStatementHandlers(stmtJs, $finalizer, $handlers);

                if ($stmt.handler) {
                    $handlers = isArray($stmt.handler) ? $stmt.handler : [$stmt.handler];
                    stmtJs = generateTryStatementHandlers(stmtJs, $finalizer, $handlers);
                }

                if ($finalizer) {
                    stmtJs = join(stmtJs, 'finally' + adoptionPrefix($finalizer));
                    stmtJs += stmtToJs($finalizer, Preset.s7);
                }

                _.js += stmtJs;
            },

            SwitchStatement: function generateSwitchStatement($stmt) {
                var $cases = $stmt.cases,
                    $discr = $stmt.discriminant,
                    prevIndent = shiftIndent();

                _.js += 'switch' + _.optSpace + '(';
                ExprGen[$discr.type]($discr, Preset.e5);
                _.js += ')' + _.optSpace + '{' + _.newline;
                _.indent = prevIndent;

                if ($cases) {
                    var caseCount = $cases.length,
                        lastCaseIdx = caseCount - 1;

                    for (var i = 0; i < caseCount; i++) {
                        var $case = $cases[i];

                        _.js += _.indent;
                        StmtGen[$case.type]($case, Preset.s4(i === lastCaseIdx));
                        _.js += _.newline;
                    }
                }

                _.js += _.indent + '}';
            },

            SwitchCase: function generateSwitchCase($stmt, settings) {
                var $conseqs = $stmt.consequent,
                    $firstConseq = $conseqs[0],
                    $test = $stmt.test,
                    i = 0,
                    conseqSemicolonOptional = !semicolons && settings.semicolonOptional,
                    conseqCount = $conseqs.length,
                    lastConseqIdx = conseqCount - 1,
                    prevIndent = shiftIndent();

                if ($test) {
                    var testJs = exprToJs($test, Preset.e5);

                    _.js += join('case', testJs) + ':';
                }

                else
                    _.js += 'default:';


                if (conseqCount && $firstConseq.type === Syntax.BlockStatement) {
                    i++;
                    _.js += adoptionPrefix($firstConseq);
                    StmtGen[$firstConseq.type]($firstConseq, Preset.s7);
                }

                for (; i < conseqCount; i++) {
                    var $conseq = $conseqs[i],
                        semicolonOptional = i === lastConseqIdx && conseqSemicolonOptional;

                    _.js += _.newline + _.indent;
                    StmtGen[$conseq.type]($conseq, Preset.s4(semicolonOptional));
                }

                _.indent = prevIndent;
            },

            IfStatement: function generateIfStatement($stmt, settings) {
                var $conseq = $stmt.consequent,
                    $test = $stmt.test,
                    prevIndent = shiftIndent(),
                    semicolonOptional = !semicolons && settings.semicolonOptional;

                _.js += 'if' + _.optSpace + '(';
                ExprGen[$test.type]($test, Preset.e5);
                _.js += ')';
                _.indent = prevIndent;
                _.js += adoptionPrefix($conseq);

                if ($stmt.alternate) {
                    var conseq = stmtToJs($conseq, Preset.s7) + adoptionSuffix($conseq),
                        alt = stmtToJs($stmt.alternate, Preset.s4(semicolonOptional));

                    if ($stmt.alternate.type === Syntax.IfStatement)
                        alt = 'else ' + alt;

                    else
                        alt = join('else', adoptionPrefix($stmt.alternate) + alt);

                    _.js += join(conseq, alt);
                }

                else
                    StmtGen[$conseq.type]($conseq, Preset.s4(semicolonOptional));
            },

            ForStatement: function generateForStatement($stmt, settings) {
                var $init = $stmt.init,
                    $test = $stmt.test,
                    $body = $stmt.body,
                    $update = $stmt.update,
                    bodySemicolonOptional = !semicolons && settings.semicolonOptional,
                    prevIndent = shiftIndent();

                _.js += 'for' + _.optSpace + '(';

                if ($init) {
                    if ($init.type === Syntax.VariableDeclaration)
                        StmtGen[$init.type]($init, Preset.s6);

                    else {
                        ExprGen[$init.type]($init, Preset.e14);
                        _.js += ';';
                    }
                }

                else
                    _.js += ';';

                if ($test) {
                    _.js += _.optSpace;
                    ExprGen[$test.type]($test, Preset.e5);
                }

                _.js += ';';

                if ($update) {
                    _.js += _.optSpace;
                    ExprGen[$update.type]($update, Preset.e5);
                }

                _.js += ')';
                _.indent = prevIndent;
                _.js += adoptionPrefix($body);
                StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
            },

            ForInStatement: function generateForInStatement($stmt, settings) {
                generateForStatementIterator('in', $stmt, settings);
            },

            ForOfStatement: function generateForOfStatement($stmt, settings) {
                generateForStatementIterator('of', $stmt, settings);
            },

            LabeledStatement: function generateLabeledStatement($stmt, settings) {
                var $body = $stmt.body,
                    bodySemicolonOptional = !semicolons && settings.semicolonOptional,
                    prevIndent = _.indent;

                _.js += $stmt.label.name + ':' + adoptionPrefix($body);

                if ($body.type !== Syntax.BlockStatement)
                    prevIndent = shiftIndent();

                StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
                _.indent = prevIndent;
            },

            ModuleDeclaration: function generateModuleDeclaration($stmt, settings) {
                _.js += 'module' + _.space + $stmt.id.name + _.space + 'from' + _.optSpace;

                ExprGen.Literal($stmt.source);

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            Program: function generateProgram($stmt) {
                var $body = $stmt.body,
                    len = $body.length,
                    lastIdx = len - 1;

                if (safeConcatenation && len > 0)
                    _.js += '\n';

                for (var i = 0; i < len; i++) {
                    var $item = $body[i];

                    _.js += _.indent;
                    StmtGen[$item.type]($item, Preset.s5(!safeConcatenation && i === lastIdx));

                    if (i !== lastIdx)
                        _.js += _.newline;
                }
            },

            FunctionDeclaration: function generateFunctionDeclaration($stmt) {
                var isGenerator = !!$stmt.generator;

                _.js += isGenerator ? ('function*' + _.optSpace) : ('function' + _.space );
                _.js += $stmt.id.name;
                generateFunctionBody($stmt);
            },

            ReturnStatement: function generateReturnStatement($stmt, settings) {
                var $arg = $stmt.argument;

                if ($arg) {
                    var argJs = exprToJs($arg, Preset.e5);

                    _.js += join('return', argJs);
                }

                else
                    _.js += 'return';

                if (semicolons || !settings.semicolonOptional)
                    _.js += ';';
            },

            WhileStatement: function generateWhileStatement($stmt, settings) {
                var $body = $stmt.body,
                    $test = $stmt.test,
                    bodySemicolonOptional = !semicolons && settings.semicolonOptional,
                    prevIndent = shiftIndent();

                _.js += 'while' + _.optSpace + '(';
                ExprGen[$test.type]($test, Preset.e5);
                _.js += ')';
                _.indent = prevIndent;

                _.js += adoptionPrefix($body);
                StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
            },

            WithStatement: function generateWithStatement($stmt, settings) {
                var $body = $stmt.body,
                    $obj = $stmt.object,
                    bodySemicolonOptional = !semicolons && settings.semicolonOptional,
                    prevIndent = shiftIndent();

                _.js += 'with' + _.optSpace + '(';
                ExprGen[$obj.type]($obj, Preset.e5);
                _.js += ')';
                _.indent = prevIndent;
                _.js += adoptionPrefix($body);
                StmtGen[$body.type]($body, Preset.s4(bodySemicolonOptional));
            }
        };

        function generateStatement($stmt, option) {
            StmtGen[$stmt.type]($stmt, option);
        }

        //CodeGen
        //-----------------------------------------------------------------------------------
        function exprToJs($expr, settings) {
            var savedJs = _.js;
            _.js = '';

            ExprGen[$expr.type]($expr, settings);

            var src = _.js;
            _.js = savedJs;

            return src;
        }

        function stmtToJs($stmt, settings) {
            var savedJs = _.js;
            _.js = '';

            StmtGen[$stmt.type]($stmt, settings);

            var src = _.js;
            _.js = savedJs;

            return src;
        }

        function run($node) {
            _.js = '';

            if (StmtGen[$node.type])
                StmtGen[$node.type]($node, Preset.s7);

            else
                ExprGen[$node.type]($node, Preset.e19);

            return _.js;
        }

        function wrapExprGen(gen) {
            return function ($expr, settings) {
                if (extra.verbatim && $expr.hasOwnProperty(extra.verbatim))
                    generateVerbatim($expr, settings);

                else
                    gen($expr, settings);
            }
        }

        function createExprGenWithExtras() {
            var gens = {};

            for (var key in ExprRawGen) {
                if (ExprRawGen.hasOwnProperty(key))
                    gens[key] = wrapExprGen(ExprRawGen[key]);
            }

            return gens;
        }


        //Strings
        var _ = {
            js: '',
            newline: '\n',
            optSpace: ' ',
            space: ' ',
            indentUnit: '    ',
            indent: ''
        };


        //Generators
        var ExprGen = void 0,
            StmtGen = StmtRawGen;


        function generate($node, options) {
            var defaultOptions = getDefaultOptions(), result, pair;

            if (options != null) {
                //NOTE: Obsolete options
                //
                //   `options.indent`
                //   `options.base`
                //
                // Instead of them, we can use `option.format.indent`.
                if (typeof options.indent === 'string') {
                    defaultOptions.format.indent.style = options.indent;
                }
                if (typeof options.base === 'number') {
                    defaultOptions.format.indent.base = options.base;
                }
                options = updateDeeply(defaultOptions, options);
                _.indentUnit = options.format.indent.style;
                if (typeof options.base === 'string') {
                    _.indent = options.base;
                } else {
                    _.indent = stringRepeat(_.indentUnit, options.format.indent.base);
                }
            } else {
                options = defaultOptions;
                _.indentUnit = options.format.indent.style;
                _.indent = stringRepeat(_.indentUnit, options.format.indent.base);
            }
            json = options.format.json;
            renumber = options.format.renumber;
            hexadecimal = json ? false : options.format.hexadecimal;
            quotes = json ? 'double' : options.format.quotes;
            escapeless = options.format.escapeless;

            _.newline = options.format.newline;
            _.optSpace = options.format.space;

            if (options.format.compact)
                _.newline = _.optSpace = _.indentUnit = _.indent = '';

            _.space = _.optSpace ? _.optSpace : ' ';
            parentheses = options.format.parentheses;
            semicolons = options.format.semicolons;
            safeConcatenation = options.format.safeConcatenation;
            directive = options.directive;
            parse = json ? null : options.parse;
            extra = options;

            if (extra.verbatim)
                ExprGen = createExprGenWithExtras();

            else
                ExprGen = ExprRawGen;

            return run($node);
        }

        FORMAT_MINIFY = {
            indent: {
                style: '',
                base: 0
            },
            renumber: true,
            hexadecimal: true,
            quotes: 'auto',
            escapeless: true,
            compact: true,
            parentheses: false,
            semicolons: false
        };

        FORMAT_DEFAULTS = getDefaultOptions().format;

        exports.generate = generate;
        exports.Precedence = updateDeeply({}, Precedence);
        exports.browser = false;
        exports.FORMAT_MINIFY = FORMAT_MINIFY;
        exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;

    })(codeGetExports);

    JSParsingTools.generate = codeGetExports.generate;
    // ------------------------------------------

    if (typeof module !== 'undefined' && module.exports)
        module.exports = JSParsingTools;
    else {
        HammerheadClient.define('Shared.JSParsingTools', function () {
            this.exports = JSParsingTools;
        });
    }
})();
(function () {
    var JSProcessor = {};

    var isNode = typeof module !== 'undefined' && module.exports;

    var JSParsingTools = isNode ? require('./js_parsing_tools') : HammerheadClient.get('Shared.JSParsingTools');

    // Const
    JSProcessor.GET_LOCATION_METH_NAME = '__get$Loc';
    JSProcessor.SET_LOCATION_METH_NAME = '__set$Loc';
    JSProcessor.SET_PROPERTY_METH_NAME = '__set$';
    JSProcessor.GET_PROPERTY_METH_NAME = '__get$';
    JSProcessor.CALL_METHOD_METH_NAME = '__call$';
    JSProcessor.PROCESS_SCRIPT_METH_NAME = '__proc$Script';

    JSProcessor.FOR_IN_TEMP_VAR_NAME = '__set$temp';
    JSProcessor.DOCUMENT_WRITE_BEGIN_PARAM = '__begin$';
    JSProcessor.DOCUMENT_WRITE_END_PARAM = '__end$';

    var HTML_COMMENT_REG_EXP = /(^|\n)\s*<!--[.\r]*(\n|$)/g;

    JSProcessor.MOCK_ACCESSORS = [
        'var __w$undef_ = typeof window === "undefined",\r\n',
        JSProcessor.GET_LOCATION_METH_NAME, '=__w$undef_?function(l){return l}:window.', JSProcessor.GET_LOCATION_METH_NAME, ',\r\n',
        JSProcessor.SET_LOCATION_METH_NAME, '=__w$undef_?function(l,v){return l = v}:window.', JSProcessor.SET_LOCATION_METH_NAME, ',\r\n',
        JSProcessor.SET_PROPERTY_METH_NAME, '=__w$undef_?function(o,p,v){return o[p] = v}:window.', JSProcessor.SET_PROPERTY_METH_NAME, ',\r\n',
        JSProcessor.GET_PROPERTY_METH_NAME, '=__w$undef_?function(o,p){return o[p]}:window.', JSProcessor.GET_PROPERTY_METH_NAME, ',\r\n',
        JSProcessor.CALL_METHOD_METH_NAME, '=__w$undef_?function(o,p,a){return o[p].apply(o,a)}:window.', JSProcessor.CALL_METHOD_METH_NAME, ',\r\n',
        JSProcessor.PROCESS_SCRIPT_METH_NAME, '=__w$undef_?function(s){return s}:window.', JSProcessor.PROCESS_SCRIPT_METH_NAME, ';\r\n'
    ].join('');

    var SYNTAX = {
        AssignmentExpression: 'AssignmentExpression',
        ArrayExpression: 'ArrayExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        Program: 'Program',
        Property: 'Property',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SwitchStatement: 'SwitchStatement',
        SwitchCase: 'SwitchCase',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement'
    };

    var codegenOpts = {
        format: {
            quotes: 'double',
            escapeless: true
        }
    };

    JSProcessor.isJSON = function (code) {
        if (JSProcessor.isObject(code)) {
            try {
                JSON.parse(code);

                return true;
            } catch (e) {
            }
        }

        return false;
    };

    JSProcessor.isArray = function (code) {
        return /^\s*\[[\s\S]*\]\s*$/.test(code);
    };

    JSProcessor.isObject = function (code) {
        return /^\s*\{[\s\S]*\}\s*$/.test(code);
    };

    JSProcessor.isScriptProcessed = function (code) {
        return new RegExp([
            JSProcessor.GET_LOCATION_METH_NAME,
            JSProcessor.SET_LOCATION_METH_NAME,
            JSProcessor.SET_PROPERTY_METH_NAME,
            JSProcessor.GET_PROPERTY_METH_NAME,
            JSProcessor.CALL_METHOD_METH_NAME,
            JSProcessor.PROCESS_SCRIPT_METH_NAME
        ].join('|').replace(/\$/, '\\$')).test(code);
    };

    JSProcessor.wrappedMethods = {
        postMessage: true,
        write: true,
        writeln: true
    };

    JSProcessor.wrappedProperties = {
        action: true,
        activeElement: true,
        attributes: true,
        autocomplete: true,
        background: true,
        backgroundImage: true,
        borderImage: true,
        cookie: true,
        cssText: true,
        cursor: true,
        data: true,
        domain: true,
        files: true,
        firstChild: true,
        firstElementChild: true,
        host: true,
        hostname: true,
        href: true,
        innerHTML: true,
        lastChild: true,
        lastElementChild: true,
        length: true,
        listStyle: true,
        listStyleImage: true,
        location: true,
        manifest: true,
        onbeforeunload: true,
        onerror: true,
        onmessage: true,
        origin: true,
        pathname: true,
        port: true,
        protocol: true,
        referrer: true,
        sandbox: true,
        search: true,
        src: true,
        target: true,
        text: true,
        textContent: true,
        URL: true,
        value: true,
        which: true
    };

    function htmlCommentsReplacer(code) {
        code = code.replace(HTML_COMMENT_REG_EXP, '\n');

        if (HTML_COMMENT_REG_EXP.test(code))
            code = htmlCommentsReplacer(code);

        return code;
    }

    function needToWrapProperty(property) {
        return JSProcessor.wrappedProperties[property] && JSProcessor.wrappedProperties.hasOwnProperty(property);
    }

    function needToWrapMethod(meth) {
        return JSProcessor.wrappedMethods[meth] && JSProcessor.wrappedMethods.hasOwnProperty(meth);
    }

    JSProcessor.isDataScript = function (code) {
        return JSProcessor.isObject(code) || JSProcessor.isArray(code);
    };

    JSProcessor.process = function (code, beautify) {
        var isJSON = JSProcessor.isJSON(code),
            isObject = JSProcessor.isObject(code);

        codegenOpts.json = isJSON;

        // T226589. Js parser removes next line after '<!--'
        var result = htmlCommentsReplacer(code),
            ast = null;

        try {
            ast = JSParsingTools.parse((isObject && !isJSON) ? '(' + result + ')' : 'function temp(){\n' + result + '\n}');
        } catch (e) {
            try {
                if (isObject && !isJSON) {
                    ast = JSParsingTools.parse('function temp(){\n' + result + '\n}');
                    isObject = false;
                } else
                    return code;
            } catch (err) {
                return code;
            }
        }

        var modified = modify(ast);

        if (!modified)
            return code;

        codegenOpts.format.compact = !beautify;

        result = JSParsingTools.generate(ast, codegenOpts);

        if (isObject && !isJSON)
            result = result.replace(/^\(|\);\s*$/g, '');
        else
            result = result.replace(/^\s*function\s+temp\s*\(\s*\)\s*{\s*/, '').replace(/\s*}\s*$/, '');

        if (!/;\s*$/.test(code))
            result = result.replace(/;\s*$/, '');

        return result;
    };

    // Modify conditions
    var modifiers = [
        {
            modifier: documentWrite,
            condition: function (astNode) {
                // { ... [obj].write([html]); ... [obj].writeln([html]); ... }
                if (astNode.type === SYNTAX.BlockStatement || astNode.type === SYNTAX.Program)
                    return getDocumentWriteStatementIndices(astNode.body).length > 1;

                return false;
            }
        },
        {
            modifier: functionCtor,
            condition: function (astNode) {
                // new Function(...)
                if (astNode.type === SYNTAX.NewExpression && astNode.callee.name === 'Function')
                    return true;

                return false;
            }
        },
        {
            modifier: forin,
            condition: function (astNode) {
                // for(var key in obj)
                if (astNode.type === SYNTAX.ForInStatement) {
                    // for (obj[prop] in src), for (obj['prop'] in src), for (obj.href in src)
                    if (astNode.left.type === SYNTAX.MemberExpression)
                        return true;
                }

                return false;
            }
        },
        {
            modifier: evalArgument,
            condition: function (astNode) {
                if (astNode.type === SYNTAX.CallExpression) {
                    // eval([...]), setTimeout([...]), setInterval([...])
                    if (astNode.callee.type === SYNTAX.Identifier && /^(eval|setTimeout|setInterval)$/.test(astNode.callee.name))
                        return true;

                    // [obj].eval([...]), [obj]['eval']([...]), [obj].setTimeout([...]), [obj]['setTimeout']([...]), [obj].setInterval([...]), [obj]['setInterval']([...])
                    if (astNode.callee.type === SYNTAX.MemberExpression &&
                        /^(eval|setTimeout|setInterval)$/.test(astNode.callee.property.name || astNode.callee.property.value))
                        return true;
                }

                return false;
            }
        },
        {
            modifier: callEvalArgument,
            condition: function (astNode) {
                if (astNode.type === SYNTAX.CallExpression) {
                    // [obj].eval.call([...]), [obj][eval].call([...]), [obj].setTimeout.call([...]), [obj][setTimeout].call([...]),
                    // [obj].setInterval.call([...]), [obj][setInterval].call([...])
                    if (astNode.callee.type === SYNTAX.MemberExpression && astNode.callee.property.name === 'call') {
                        var obj = astNode.callee.object;

                        if (obj.type === SYNTAX.MemberExpression && /^(eval|setTimeout|setInterval)$/.test(obj.property.value || obj.property.name))
                            return true;
                    }

                    // eval.call([...]), setTimeout.call([...]), setInterval.call([...])
                    if (astNode.callee.type === SYNTAX.MemberExpression && astNode.callee.property.name === 'call' &&
                        /^(eval|setTimeout|setInterval)$/.test(astNode.callee.object.name))
                        return true;
                }

                return false;
            }
        },
        {
            modifier: applyEvalArgument,
            condition: function (astNode) {
                if (astNode.type === SYNTAX.CallExpression) {
                    // [obj].eval.apply([...]), [obj][eval].apply([...]), [obj].setTimeout.apply([...]), [obj][setTimeout].apply([...]),
                    // [obj].setInterval.apply([...]), [obj][setInterval].apply([...])
                    if (astNode.callee.type === SYNTAX.MemberExpression && astNode.callee.property.name === 'apply') {
                        var obj = astNode.callee.object;

                        if (obj.type === SYNTAX.MemberExpression && /^(eval|setTimeout|setInterval)$/.test(obj.property.value || obj.property.name))
                            return true;
                    }

                    // eval.apply([...]), setTimeout.apply([...]), setInterval.apply([...])
                    if (astNode.callee.type === SYNTAX.MemberExpression && astNode.callee.property.name === 'apply' &&
                        /^(eval|setTimeout|setInterval)$/.test(astNode.callee.object.name))
                        return true;
                }

                return false;
            }
        },
        {
            modifier: getLocation,
            condition: function (astNode, parent) {
                if (astNode.type === SYNTAX.Identifier) {
                    if (astNode.name !== 'location')
                        return false;

                    // var location = [value];
                    if (parent.type === SYNTAX.VariableDeclarator && parent.id === astNode)
                        return false;

                    // location = [value]
                    if (parent.type === SYNTAX.AssignmentExpression && parent.left === astNode)
                        return false;

                    // [object].location || location.[field]
                    if (parent.type === SYNTAX.MemberExpression)
                        return false;

                    // { location: [value] }
                    if (parent.type === SYNTAX.Property && parent.key === astNode)
                        return false;

                    // location++ || location-- || ++location || --location
                    if (parent.type === SYNTAX.UpdateExpression && parent.operator === '++' || parent.operator === '--')
                        return false;

                    // function (location) { ... } || function func(location) { ... }
                    if ((parent.type === SYNTAX.FunctionExpression ||
                        parent.type === SYNTAX.FunctionDeclaration) && parent.params.indexOf(astNode) !== -1)
                        return false;

                    // Already  modified: __getGlobalProperty('location', location)
                    if (parent.type === SYNTAX.CallExpression && parent.callee.name === JSProcessor.GET_LOCATION_METH_NAME)
                        return false;

                    return true;
                }

                return false;
            }
        },
        {
            modifier: getLocationMember,
            condition: function (astNode, parent) {
                // [object].[field]
                if (astNode.type === SYNTAX.MemberExpression) {
                    // for(location.[field] in [source])
                    if (parent.type === SYNTAX.ForInStatement && parent.left === astNode)
                        return false;

                    // location.[field]
                    if (astNode.object.name === 'location')
                        return true;
                }

                return false;
            }
        },
        {
            modifier: setLocation,
            condition: function (astNode) {
                // [object] = [value]
                if (astNode.type === SYNTAX.AssignmentExpression && astNode.operator === '=') {
                    var leftOperand = astNode.left;

                    // location = [value]
                    if (leftOperand.type === SYNTAX.Identifier && leftOperand.name === 'location')
                        return true;
                }

                return false;
            }
        },
        {
            modifier: memberSet,
            condition: function (astNode) {
                // [object] = [value]
                if (astNode.type === SYNTAX.AssignmentExpression && !astNode.computed && astNode.operator === '=') {
                    var leftOperand = astNode.left;

                    // [object].[field] = []
                    if (leftOperand.type === SYNTAX.MemberExpression &&
                        leftOperand.property.type === SYNTAX.Identifier) {
                        // [object].location = [value]
                        if (needToWrapProperty(leftOperand.property.name))
                            return true;
                    }
                }

                return false;
            }
        },
        {
            modifier: callMethod,
            condition: function (astNode) {
                // [object]()
                if (astNode.type === SYNTAX.CallExpression) {
                    // [object].[field]() || [object][[field]]()
                    if (astNode.callee.type === SYNTAX.MemberExpression) {
                        if (astNode.callee.computed && astNode.callee.property.type === SYNTAX.Literal && !needToWrapMethod(astNode.callee.property.value))
                            return false;

                        if (!astNode.callee.computed && !needToWrapMethod(astNode.callee.property.name))
                            return false;

                        return true;
                    }
                }

                return false;
            }
        },
        {
            modifier: memberGet,
            condition: function (astNode, parent) {
                // [object].[field]
                if (astNode.type === SYNTAX.MemberExpression && !astNode.computed) {
                    if (!needToWrapProperty(astNode.property.name))
                        return false;

                    // [object].[field] = [value]
                    if (parent.type === SYNTAX.AssignmentExpression && parent.left === astNode)
                        return false;

                    // delete [object].[field]
                    if (parent.type === SYNTAX.UnaryExpression && parent.operator === 'delete')
                        return false;

                    // [object].[field]()
                    if (parent.type === SYNTAX.CallExpression && parent.callee === astNode)
                        return false;

                    // [object].[field]++ || [object].[field]-- || ++[object].[field] || --[object].[field]
                    if (parent.type === SYNTAX.UpdateExpression && parent.operator === '++' || parent.operator === '--')
                        return false;

                    // new ([object].[field])() || new ([object].[field])
                    if (parent.type === SYNTAX.NewExpression && parent.callee === astNode)
                        return false;

                    // for([object].[field] in [source])
                    if (parent.type === SYNTAX.ForInStatement && parent.left === astNode)
                        return false;

                    return true;
                }

                return false;
            }
        },
        {
            modifier: computedMemberGet,
            condition: function (astNode, parent) {
                // [object][[field]]
                if (astNode.type === SYNTAX.MemberExpression && astNode.computed) {

                    // [object][[field]] = [value]
                    if (parent.type === SYNTAX.AssignmentExpression && parent.left === astNode)
                        return false;

                    // delete [object][[field]]
                    if (parent.type === SYNTAX.UnaryExpression && parent.operator === 'delete')
                        return false;

                    // [object].[field]++ || [object].[field]-- || ++[object].[field] || --[object].[field]
                    if (parent.type === SYNTAX.UpdateExpression && parent.operator === '++' || parent.operator === '--')
                        return false;

                    // [object][[field]]()
                    if (parent.type === SYNTAX.CallExpression && parent.callee === astNode)
                        return false;

                    // new ([object][[field]])() || new ([object][[field]])
                    if (parent.type === SYNTAX.NewExpression && parent.callee === astNode)
                        return false;

                    // for([object].[[field]] in [source])
                    if (parent.type === SYNTAX.ForInStatement && parent.left === astNode)
                        return false;

                    if (astNode.property.type === SYNTAX.Literal && !needToWrapProperty(astNode.property.value))
                        return false;

                    return true;
                }

                return false;
            }
        },
        {
            modifier: computedMemberSet,
            condition: function (astNode) {
                // [object] = [value]
                if (astNode.type === SYNTAX.AssignmentExpression && astNode.operator === '=') {
                    // [object][[field]] = [value]
                    if (astNode.left.type === SYNTAX.MemberExpression && astNode.left.computed) {
                        // [object].location = [value]
                        if (astNode.left.property.type === SYNTAX.Literal)
                            return needToWrapProperty(astNode.left.property.value);

                        return true;
                    }
                }

                return false;
            }
        },
        {
            modifier: concatOperator,
            condition: function (astNode) {
                // [object] += [value]
                if (astNode.type === SYNTAX.AssignmentExpression && astNode.operator === '+=')
                    return true;

                return false;
            }
        }
    ];

    function modify(ast, parent, key) {
        var modified = false;

        if (!ast || (typeof ast !== 'object'))
            return modified;

        if (ast.type) {
            for (var i = 0; i < modifiers.length; i++) {
                if (modifiers[i].condition(ast, parent)) {
                    var needToModify = modifiers[i].modifier(ast, parent, key);

                    modified = true;
                    if (needToModify)
                        modified = modify(parent[key], parent, key) || modified;
                }
            }
        }

        for (var astKey in ast) {
            if (ast.hasOwnProperty(astKey)) {
                var childNode = ast[astKey];

                if (Object.prototype.toString.call(childNode) === '[object Array]') {
                    for (var j = 0; j < childNode.length; j++)
                        modified = modify(childNode[j], ast, astKey) || modified;
                } else
                    modified = modify(childNode, ast, astKey) || modified;
            }
        }

        return modified;
    }

    // AST templates
    function getProcessScriptMethAst(args) {
        return {
            type: SYNTAX.CallExpression,
            callee: {
                type: SYNTAX.Identifier,
                name: JSProcessor.PROCESS_SCRIPT_METH_NAME
            },
            arguments: [
                args[0]
            ]
        };
    }

    function getGetLocationMethAst() {
        return {
            type: SYNTAX.CallExpression,
            callee: {
                type: SYNTAX.Identifier,
                name: JSProcessor.GET_LOCATION_METH_NAME
            },
            arguments: [
                {
                    type: SYNTAX.Identifier,
                    name: 'location'
                }
            ]
        };
    }

    function getSetLocationMethAst(value) {
        return {
            type: SYNTAX.CallExpression,
            callee: {
                type: SYNTAX.MemberExpression,
                computed: false,
                object: {
                    type: SYNTAX.FunctionExpression,
                    id: null,
                    params: [],
                    defaults: [],
                    body: {
                        type: SYNTAX.BlockStatement,
                        body: [
                            {
                                type: SYNTAX.ReturnStatement,
                                argument: {
                                    type: SYNTAX.LogicalExpression,
                                    operator: '||',
                                    left: {
                                        type: SYNTAX.CallExpression,
                                        callee: {
                                            type: SYNTAX.Identifier,
                                            name: JSProcessor.SET_LOCATION_METH_NAME
                                        },
                                        arguments: [
                                            {
                                                type: SYNTAX.Identifier,
                                                name: 'location'
                                            },
                                            value
                                        ]
                                    },
                                    right: {
                                        type: SYNTAX.AssignmentExpression,
                                        operator: '=',
                                        left: {
                                            type: SYNTAX.Identifier,
                                            name: 'location'
                                        },
                                        right: value
                                    }
                                }
                            }
                        ]
                    },
                    "rest": null,
                    "generator": false,
                    "expression": false
                },
                property: {
                    type: SYNTAX.Identifier,
                    name: "apply"
                }
            },
            arguments: [
                {
                    type: SYNTAX.ThisExpression
                }
            ]
        };
    }

    function getSetMethAst(propertyName, obj, value) {
        return {
            type: SYNTAX.CallExpression,
            callee: {
                type: SYNTAX.Identifier,
                name: JSProcessor.SET_PROPERTY_METH_NAME
            },
            arguments: [
                obj, {
                    type: SYNTAX.Literal,
                    value: propertyName,
                    raw: '"' + propertyName + '"'
                },
                value
            ]
        };
    }

    function getCallMethodMthAst(owner, meth, args) {
        return {
            type: SYNTAX.CallExpression,
            callee: {
                type: SYNTAX.Identifier,
                name: JSProcessor.CALL_METHOD_METH_NAME
            },
            arguments: [
                owner,
                meth,
                {
                    type: SYNTAX.ArrayExpression,
                    elements: args
                }
            ]
        };
    }

    function getGetMethAst(propertyName, owner) {
        return {
            type: SYNTAX.CallExpression,
            callee: {
                type: SYNTAX.Identifier,
                name: JSProcessor.GET_PROPERTY_METH_NAME
            },
            arguments: [
                owner, {
                    type: SYNTAX.Literal,
                    value: propertyName,
                    raw: '"' + propertyName + '"'
                }
            ]
        };
    }

    function getGetComputedMethAst(property, owner) {
        return {
            type: SYNTAX.CallExpression,
            callee: {
                type: SYNTAX.Identifier,
                name: JSProcessor.GET_PROPERTY_METH_NAME
            },
            arguments: [
                owner,
                property
            ]
        };
    }

    function getSetComputedMethAst(property, owner, value) {
        return {
            type: SYNTAX.CallExpression,
            callee: {
                type: SYNTAX.Identifier,
                name: JSProcessor.SET_PROPERTY_METH_NAME
            },
            arguments: [
                owner,
                property,
                value
            ]
        };
    }

    function getConcatOperatorAst(left, right) {
        return {
            type: SYNTAX.AssignmentExpression,
            operator: '=',
            left: left,
            right: {
                "type": SYNTAX.BinaryExpression,
                "operator": '+',
                left: left,
                right: right
            }
        };
    }

    function getDocumentWriteArgAst(arg) {
        return {
            type: SYNTAX.Literal,
            value: arg,
            raw: '\'' + arg + '\''
        };
    }

    function getDocumentWriteStatementIndices(statements) {
        var indices = [];

        var isExpressionStatement = function (statement) {
                return statement.type === SYNTAX.ExpressionStatement;
            },
            isCallStatement = function (statement) {
                return statement.expression.type === SYNTAX.CallExpression;
            },
            isMember = function (statement) {
                return statement.expression.callee.type === SYNTAX.MemberExpression;
            },
            isDocumentWrite = function (statement) {
                return statement.expression.callee.property.name === 'write' ||
                    statement.expression.callee.property.name === 'writeln';
            };

        for (var i = 0; i < statements.length; i++) {
            var statement = statements[i];

            if (isExpressionStatement(statement) && isCallStatement(statement) && isMember(statement) && isDocumentWrite(statement)) {
                indices.push(i);
            }
        }

        return indices;
    }

    // Modifiers
    function updateAstNode(node, newNode, parent, key) {
        if (key === 'arguments' || key === 'elements' || key === 'expressions') {
            var index = parent[key].indexOf(node);

            parent[key][index] = newNode;
        } else
            parent[key] = newNode;
    }

    // for(obj[i++] in src), for(obj['href'] in src), for(obj.href in src)
    function forin(astNode) {
        // for(obj[i++] in src) --> for(__set$temp in src) { __set$(obj, i++, __set$temp); }
        var tempVarAst = {
            type: SYNTAX.Identifier,
            name: JSProcessor.FOR_IN_TEMP_VAR_NAME
        };

        astNode.body.body.unshift({
            type: SYNTAX.ExpressionStatement,
            expression: {
                type: SYNTAX.AssignmentExpression,
                operator: '=',
                left: astNode.left,
                right: tempVarAst
            }
        });

        astNode.left = {
            type: SYNTAX.VariableDeclaration,
            declarations: [
                {
                    type: SYNTAX.VariableDeclarator,
                    id: tempVarAst,
                    init: null
                }
            ],
            kind: 'var'
        };

        return true;
    }

    // new Function([, params], [body]);
    function functionCtor(astNode) {
        if (!astNode.arguments.length)
            return false;

        var lastArgIndex = astNode.arguments.length - 1;

        // new Function([, params], [body]); --> new Function([, params], __proc$Script([body]));
        astNode.arguments[lastArgIndex] = getProcessScriptMethAst([astNode.arguments[lastArgIndex]]);

        return false;
    }

    // { ... [obj].write([html]); ... [obj].writeln([html]); ... }
    function documentWrite(astNode) {
        var indices = getDocumentWriteStatementIndices(astNode.body);

        // { ... [obj].write([html]); ... [obj].writeln([html]); ... } -->
        // { ... [obj].write([html], __begin$); ... [obj].writeln([html], __end$); ... }
        astNode.body[indices[0]].expression.arguments.push(getDocumentWriteArgAst(JSProcessor.DOCUMENT_WRITE_BEGIN_PARAM));
        astNode.body[indices[indices.length - 1]].expression.arguments.push(getDocumentWriteArgAst(JSProcessor.DOCUMENT_WRITE_END_PARAM));

        return false;
    }

    // eval(), window.eval(), window['eval']
    function evalArgument(astNode) {
        if (!astNode.arguments.length)
            return false;

        // eval(script) --> eval(__proc$Script(script))
        var newArg = getProcessScriptMethAst(astNode.arguments);

        astNode.arguments[0] = newArg;

        return false;
    }

    // eval.call(), window.eval.call(), window['eval'].call()
    function callEvalArgument(astNode) {
        // eval.call(window, script) --> eval.call(window, __proc$Script(script))
        var newArg = getProcessScriptMethAst([astNode.arguments[1]]);

        astNode.arguments[1] = newArg;

        return false;
    }

    // eval.apply(), window.eval.apply(), window['eval'].apply()
    function applyEvalArgument(astNode) {
        // eval.apply(window, [script]) --> eval.apply(window, [__proc$Script(script)])
        var newArg = getProcessScriptMethAst([astNode.arguments[1].elements[0]]);

        astNode.arguments[1].elements[0] = newArg;

        return false;
    }

    // location
    function getLocation(astNode, parent, key) {
        // location --> __get$Loc(location)
        var newNode = getGetLocationMethAst();

        updateAstNode(astNode, newNode, parent, key);

        return false;
    }

    // location.[field]
    function getLocationMember(astNode) {
        // location.[field]  --> __get$Loc(location).[field]
        // location[[field]] --> __get$(__get$Loc(location), [field])
        var newNode = getGetLocationMethAst(astNode.object);

        astNode.object = newNode;

        return false;
    }

    // location = [value]
    function setLocation(astNode, parent, key) {
        // location = [value] --> (function(){ return __set$Loc(location, [value]) || location = [value];}.apply(this))
        var newNode = getSetLocationMethAst(astNode.right);

        updateAstNode(astNode, newNode, parent, key);

        return false;
    }

    // [object].location = [value]
    function memberSet(astNode, parent, key) {
        // [any].location = [value] --> __set$([object], 'location', [value])
        var newNode = getSetMethAst(astNode.left.property.name, astNode.left.object, astNode.right);

        updateAstNode(astNode, newNode, parent, key);

        return true;
    }

    // [object].location
    function memberGet(astNode, parent, key) {
        // [object].location --> __get$([object], 'location')
        var newNode = getGetMethAst(astNode.property.name, astNode.object);

        updateAstNode(astNode, newNode, parent, key);

        return true;
    }

    // [object].[method]() || [object][[method]]()
    function callMethod(astNode, parent, key) {
        var meth = null;

        if (!astNode.callee.computed) {
            meth = {
                type: SYNTAX.Literal,
                value: astNode.callee.property.name,
                raw: '"' + astNode.callee.property.name + '"'
            };
        } else
            meth = astNode.callee.property;

        // [object].[method]([args]) --> _call$([object], [method], [args])
        // [object][[method]]([args]) --> _call$([object], [method], [args])
        var newNode = getCallMethodMthAst(astNode.callee.object, meth, astNode.arguments);

        updateAstNode(astNode, newNode, parent, key);

        return true;
    }

    // [object][[field]]
    function computedMemberGet(astNode, parent, key) {
        //[object][[field]] --> __get$([object], [field])
        var newNode = getGetComputedMethAst(astNode.property, astNode.object);

        updateAstNode(astNode, newNode, parent, key);

        return true;
    }

    // [object][[field]] = [value]
    function computedMemberSet(astNode, parent, key) {
        //[object][[field]] = [value] --> __set$([object], [field], [value])
        var newNode = getSetComputedMethAst(astNode.left.property, astNode.left.object, astNode.right);

        updateAstNode(astNode, newNode, parent, key);

        return true;
    }

    // [object] += [value]
    function concatOperator(astNode, parent, key) {
        //[object] += [value] --> [object] = [object] + [value]
        var newNode = getConcatOperatorAst(astNode.left, astNode.right);

        updateAstNode(astNode, newNode, parent, key);

        return true;
    }

    if (typeof module !== 'undefined' && module.exports)
        module.exports = JSProcessor;
    else {
        HammerheadClient.define('Shared.JSProcessor', function () {
            this.exports = JSProcessor;
        });
    }
})();
(function () {
    var PageProc = {};

    var isNode = typeof module !== 'undefined' && module.exports;

    var $ = null,
        JSProcessor = null,
        NativeMethods = null,
        SharedConst = null,
        Util = null,
        UrlUtil = null;

    if (isNode) {
        JSProcessor = require('./js_processor');
        SharedConst = require('./const');
        UrlUtil = require('./../lib/url_util');

        var eventEmitter = new (require('events').EventEmitter)();

        PageProc.on = eventEmitter.on.bind(eventEmitter);
        PageProc.off = eventEmitter.removeListener.bind(eventEmitter);
        PageProc.emit = eventEmitter.emit.bind(eventEmitter);

        module.exports = PageProc;
    }

    else {
        SharedConst = HammerheadClient.get('Shared.Const');
        JSProcessor = HammerheadClient.get('Shared.JSProcessor');

        HammerheadClient.define('Shared.PageProc', function (require) {
            $ = require('jQuery');
            NativeMethods = require('DOMSandbox.NativeMethods');
            UrlUtil = require('UrlUtil');
            Util = require('Util');

            var eventEmitter = new (require('Util').EventEmitter)();

            PageProc.on = eventEmitter.on.bind(eventEmitter);
            PageProc.off = eventEmitter.off.bind(eventEmitter);
            PageProc.emit = eventEmitter.emit.bind(eventEmitter);

            this.exports = PageProc;
        });
    }

    var CSS_URL_PROPERTY_VALUE_PATTERN = /(url\s*\(\s*)(?:(')([^\s']*)(')|(")([^\s"]*)(")|([^\s\)]*))(\s*\))|(@import\s+)(?:(')([^\s']*)(')|(")([^\s"]*)("))/g,
        EVENTS = ['onblur', 'onchange', 'onclick', 'oncontextmenu', 'oncopy', 'oncut',
            'ondblclick', 'onerror', 'onfocus', 'onfocusin', 'onfocusout', 'onhashchange', 'onkeydown',
            'onkeypress', 'onkeyup', 'onload', 'onmousedown', 'onmouseenter', 'onmouseleave',
            'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpaste', 'onreset',
            'onresize', 'onscroll', 'onselect', 'onsubmit', 'ontextinput', 'onunload', 'onwheel',
            'onpointerdown', 'onpoi nterup', 'onpointercancel', 'onpointermove', 'onpointerover', 'onpointerout',
            'onpointerenter', 'onpointerleave', 'ongotpointercapture', 'onlostpointercapture',
            'onmspointerdown', 'onmspointerup', 'onmspointercancel', 'onmspointermove', 'onmspointerover',
            'onmspointerout', 'onmspointerenter', 'onmspointerleave', 'onmsgotpointercapture', 'onmslostpointercapture'
        ],
        BOM_REGEX = new RegExp( // Byte Order Mark
            '^(\\xEF\\xBB\\xBF|' +
                '\\xFE\\xFF|' +
                '\\xFF\\xFE|' +
                '\\x00\\x00\\xFE\\xFF|' +
                '\\xFF\\xFE\\x00\\x00|' +
                '\\x2B\\x2F\\x76\\x38|' +
                '\\x2B\\x2F\\x76\\x39|' +
                '\\x2B\\x2F\\x76\\x2B|' +
                '\\x2B\\x2F\\x76\\x2F|' +
                '\\xF7\\x64\\x4C|' +
                '\\xDD\\x73\\x66\\x73|' +
                '\\x0E\\xFE\\xFF|' +
                '\\xFB\\xEE\\x28|' +
                '\\x84\\x31\\x95\\x33)'
        ),
        CDATA_REG_EX = /^(\s)*\/\/<!\[CDATA\[([\s\S]*)\/\/\]\]>(\s)*$/,
        EMPTY_URL_REG_EX = /^(\w+:)?\/\/\:0/,// Ignore '//:0/' url (http://www.myntra.com/)
        HTML_COMMENT_POSTFIX_REG_EX = /(\/\/[^\n]*|\n\s*)-->[^\n]*([\n\s]*)?$/,
        HTML_COMMENT_PREFIX_REG_EX = /^(\s)*<!--[^\n]*\n/,
        HTML_COMMENT_SIMPLE_POSTFIX_REG_EX = /-->\s*$/,
        HTML_STRING_REG_EX = /^\s*('|")\s*(<[\s\S]+>)\s*('|")\s*$/,
        JAVASCRIPT_PROTOCOL_REG_EX = /^\s*javascript\s*:/i,
        SOURCE_MAP_REG_EX = /#\s*sourceMappingURL\s*=\s*[^\s]+(\s|\*\/)/i,
        URL_ATTRS = [ 'href', 'src', 'action', 'manifest', 'data' ],
        URL_ATTR_TAGS = {
            href: ['a', 'link', 'image', 'area', 'base'],
            src: ['img', 'embed', 'script', 'source', 'video', 'audio', 'input', 'frame', 'iframe'],
            action: ['form'],
            manifest: ['html'],
            data: ['object']
        },
        OVERRIDE_DOM_METH_SCRIPT = 'window["' + SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME + '"]',
        SCRIPT_HEADER = '\r\ntypeof window !== "undefined" && ' + OVERRIDE_DOM_METH_SCRIPT + ' && ' + OVERRIDE_DOM_METH_SCRIPT + '();\r\n' + JSProcessor.MOCK_ACCESSORS,
        SCRIPT_HEADER_REG_EX = new RegExp('^\\s*typeof[^\\n]+' + SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME +
            '[^\\n]+\\n[^\\n]+\\n[^\\n]+\\n[^\\n]+\\n[^\\n]+\\n[^\\n]+\\n[^\\n]+\\n[^\\n]+__proc\\$Script;', 'i'),
        TARGET_ATTR_TAGS = {
            a: true,
            form: true,
            area: true,
            base: true
        },
        IFRAME_FLAG_TAGS = ['a', 'form'];

    PageProc.EVENTS = EVENTS;
    PageProc.HTML_STRING_REG_EX = HTML_STRING_REG_EX;
    PageProc.JAVASCRIPT_PROTOCOL_REG_EX = JAVASCRIPT_PROTOCOL_REG_EX;
    PageProc.SCRIPT_HEADER = SCRIPT_HEADER;
    PageProc.SCRIPT_HEADER_REG_EX = SCRIPT_HEADER_REG_EX;
    PageProc.TARGET_ATTR_TAGS = TARGET_ATTR_TAGS;
    PageProc.URL_ATTR_TAGS = URL_ATTR_TAGS;
    PageProc.URL_ATTRS = URL_ATTRS;

    PageProc.HTML_PROCESSING_REQUIRED = 'HTML_PROCESSING_REQUIRED';

    var getAttr = function (el, attr) {
        return isNode ? el.attribs[attr] : NativeMethods.getAttribute.call(el, attr);
    };

    var hasAttr = function (el, attr) {
        if (isNode)
            return attr in el.attribs;
        else {
            for (var i = 0; i < el.attributes.length; i++)
                if (el.attributes[i].name === attr)
                    return true;

            return false;
        }
    };

    var hasEventHandler = function (el) {
        if (isNode) {
            for (var attr in el.attribs) {
                if (EVENTS.indexOf(el.attribs[attr]))
                    return true;
            }

            return false;
        } else {
            var attrs = el.attributes;

            for (var i = 0; i < attrs.length; i++) {
                if (EVENTS.indexOf(attrs[i]))
                    return true;
            }

            return false;
        }
    };

    var getTagName = function (el) {
        return isNode ? el.name : el.tagName;
    };

    var setAttr = function (el, attr, value) {
        return isNode ? el.attribs[attr] = value : NativeMethods.setAttribute.call(el, attr, value);
    };

    var isTopParentIFrame = function (el) {
        var elWindow = el[SharedConst.DOM_SANDBOX_PROCESSED_CONTEXT];

        return elWindow && window.top === elWindow.parent;
    };

    // Element processors
    var processAutoComplete = function (el) {
            var storedUrlAttr = PageProc.getStoredAttrName('autocomplete'),
                processed = hasAttr(el, storedUrlAttr),
                attrValue = getAttr(el, processed ? storedUrlAttr : 'autocomplete');

            if (!processed)
                setAttr(el, storedUrlAttr, (attrValue || attrValue === '') ? attrValue : 'none');

            setAttr(el, 'autocomplete', 'off');
        },

        processJsAttr = function (el, attr, jsProtocol) {
            var storedUrlAttr = PageProc.getStoredAttrName(attr),
                processed = hasAttr(el, storedUrlAttr),
                attrValue = getAttr(el, processed ? storedUrlAttr : attr);

            var code = jsProtocol ? attrValue.replace(JAVASCRIPT_PROTOCOL_REG_EX, '') : attrValue,
                matches = code.match(HTML_STRING_REG_EX);

            var setAttributes = function (value, processedValue, processedAttrValue) {
                if (value !== processedValue) {
                    if (!processed)
                        setAttr(el, storedUrlAttr, attrValue);

                    setAttr(el, attr, processedAttrValue);
                }
            };

            if (matches && jsProtocol) {
                var html = matches[2];

                PageProc.emit(PageProc.HTML_PROCESSING_REQUIRED, html, function (processedHTML) {
                    var processedAttrValue = '';
                    /* jshint ignore:start */
                    processedAttrValue = 'javascript:\'' + processedHTML.replace(/'/g, "\\'") + '\'';
                    /* jshint ignore:end */
                    setAttributes(html, processedHTML, processedAttrValue);
                });

            } else {
                var processedCode = PageProc.processScript(code, true),
                    processedAttrValue = processedCode;

                /* jshint ignore:start */
                if (jsProtocol)
                    processedAttrValue = 'javascript:' + processedAttrValue;
                /* jshint ignore:end */

                setAttributes(code, processedCode, processedAttrValue);
            }
        },

        processEvtAttr = function (el) {
            for (var i = 0; i < EVENTS.length; i++) {
                var attrValue = getAttr(el, EVENTS[i]);

                if (attrValue)
                    processJsAttr(el, EVENTS[i], JAVASCRIPT_PROTOCOL_REG_EX.test(attrValue));
            }
        },

        processMetaElement = function (el, urlReplacer, pattern) {
            if (getAttr(el, 'http-equiv').toLowerCase() === 'refresh') {
                var attr = getAttr(el, pattern.urlAttr);

                attr = attr.replace(/(url=)(.*)$/i, function () {
                    return arguments[1] + urlReplacer(arguments[2]);
                });

                setAttr(el, pattern.urlAttr, attr);
            }
        },

        processSandboxedIframe = function (el) {
            var attrValue = getAttr(el, 'sandbox');

            if (attrValue.indexOf('allow-scripts') === -1) {
                var storedAttr = PageProc.getStoredAttrName('sandbox');

                setAttr(el, storedAttr, attrValue);
                setAttr(el, 'sandbox', attrValue + ' allow-scripts');
            }
        },

        processScriptElement = function (script) {
            var scriptContent = '';

            if (isNode) {
                // The $script.html() method is not used because it is not working properly, it adds garbage in the result.
                var contentChild = script.children.length ? script.children[0] : null;

                scriptContent = !!contentChild ? contentChild.data : '';
            } else {
                scriptContent = script.text;

                var scriptProcessedOnServer = JSProcessor.isScriptProcessed(scriptContent);

                if (scriptProcessedOnServer)
                    return;
            }

            if (!scriptContent)
                return;

            // NOTE: we do not process scripts that are not executed during a page loading. We process scripts with type
            // text/javascript, application/javascript etc. (list of MIME types is specified in the w3c.org html5
            // specification). If type is not set, it 'text/javascript' by default.
            var scriptType = getAttr(script, 'type'),
                executableScriptTypesRegEx = /(application\/((x-)?ecma|(x-)?java)script)|(text\/)(javascript(1\.{0-5})?|((x-)?ecma|x-java|js|live)script)/,
                isExecutableScript = !scriptType || executableScriptTypesRegEx.test(scriptType);

            if (isExecutableScript) {
                var result = scriptContent,
                    commentPrefix = '',
                    commentPrefixMatch = result.match(HTML_COMMENT_PREFIX_REG_EX),
                    commentPostfix = '',
                    commentPostfixMatch = null,
                    hasCDATA = CDATA_REG_EX.test(result);

                if (commentPrefixMatch) {
                    commentPrefix = commentPrefixMatch[0];
                    commentPostfixMatch = result.match(HTML_COMMENT_POSTFIX_REG_EX);

                    if (commentPostfixMatch)
                        commentPostfix = commentPostfixMatch[0];
                    else if (!HTML_COMMENT_SIMPLE_POSTFIX_REG_EX.test(commentPrefix))
                        commentPostfix = '//-->';

                    result = result.replace(commentPrefix, '').replace(commentPostfix, '');
                }

                if (hasCDATA)
                    result = result.replace(CDATA_REG_EX, '$2');

                result = commentPrefix + PageProc.processScript(result) + commentPostfix;

                if (hasCDATA)
                    result = '\n//<![CDATA[\n' + result + '//]]>';

                if (isNode)
                    script.children[0].data = result;
                else
                    script.text = result;
            }
        },

        processStyleAttr = function (el, urlReplacer) {
            var style = getAttr(el, 'style');

            if (style)
                setAttr(el, 'style', PageProc.processStylesheet(style, urlReplacer));
        },

        processStylesheetElement = function (el, urlReplacer) {
            if (isNode) {
                // The $el.html() method is not used because it is not working properly, it adds garbage in the result.
                var contentChild = el.children.length ? el.children[0] : null;

                if (contentChild && contentChild.data && urlReplacer)
                    contentChild.data = PageProc.processStylesheet(contentChild.data, urlReplacer, true);
            } else if (urlReplacer)
                el.innerHTML = PageProc.processStylesheet(el.innerHTML, urlReplacer, true);
        },

        processTargetBlank = function (el) {
            // NOTE: replace target='_blank' to avoid popups
            var attrValue = getAttr(el, 'target');

            // NOTE: Value may have whitespace
            attrValue = attrValue && attrValue.replace(/\s/g, '');

            if (attrValue === '_blank' || attrValue === 'blank')
                setAttr(el, 'target', '_self');
        },

        processUrlAttrs = function (el, urlReplacer, pattern, crossDomainPort, hasIFrameParent) {
            if (urlReplacer && pattern.urlAttr) {
                var storedUrlAttr = PageProc.getStoredAttrName(pattern.urlAttr),
                    resourceUrl = getAttr(el, pattern.urlAttr),
                    processedOnServer = !!getAttr(el, storedUrlAttr);

                // NOTE: page resource URL with proxy URL
                if ((resourceUrl || resourceUrl === '') && !processedOnServer) {
                    if (UrlUtil.isSupportedProtocol(resourceUrl) && !EMPTY_URL_REG_EX.test(resourceUrl)) {
                        var elTagName = getTagName(el).toLowerCase(),
                            isIframe = elTagName === 'iframe',
                            isScript = elTagName === 'script',
                            resourceType = null,
                            target = getAttr(el, 'target');

                        // On the server the elements shouldn't process with target=_parent,
                        // because we don't know who is the parent of the processing page (iframe or top window)
                        if (isNode && IFRAME_FLAG_TAGS.indexOf(elTagName) !== -1 && target === '_parent')
                            return;

                        if (isIframe || PageProc.isOpenLinkInIFrame(el, hasIFrameParent))
                            resourceType = UrlUtil.IFRAME;
                        else if (isScript)
                            resourceType = UrlUtil.SCRIPT;

                        var proxyUrl = resourceUrl ? urlReplacer(resourceUrl, resourceType) : '';

                        if (isIframe) {
                            var isRelativePath = !UrlUtil.parseUrl(resourceUrl).host;

                            if (!isRelativePath) {
                                var location = urlReplacer('/'),
                                    proxyUrlObj = UrlUtil.parseProxyUrl(location),
                                    originUrlObj = proxyUrlObj.originResourceInfo,
                                    originUrl = UrlUtil.formatUrl(originUrlObj);

                                // Cross-domain iframe
                                if (!UrlUtil.sameOriginCheck(originUrl, resourceUrl)) {
                                    var proxyHostname = UrlUtil.parseUrl(location).hostname;

                                    proxyUrl = resourceUrl ? UrlUtil.getCrossDomainIframeProxyUrl(resourceUrl, proxyHostname, crossDomainPort,
                                        proxyUrlObj.jobInfo.uid, proxyUrlObj.jobInfo.ownerToken) : '';
                                }
                            }
                        }
                        setAttr(el, storedUrlAttr, resourceUrl);

                        if (elTagName === 'img' && proxyUrl !== '')
                            setAttr(el, pattern.urlAttr, UrlUtil.resolveUrlAsOrigin(resourceUrl, urlReplacer));
                        else
                            setAttr(el, pattern.urlAttr, proxyUrl);
                    }
                }
            }
        },

        processUrlJsAttr = function (el, urlReplacer, pattern) {
            if (JAVASCRIPT_PROTOCOL_REG_EX.test(getAttr(el, pattern.urlAttr)))
                processJsAttr(el, pattern.urlAttr, true);
        };

    var SELECTORS = {
        HAS_HREF_ATTR: function (el) {
            var tagName = getTagName(el).toLowerCase();

            return URL_ATTR_TAGS.href.indexOf(tagName) !== -1;
        },
        HAS_SRC_ATTR: function (el) {
            var tagName = getTagName(el).toLowerCase();

            return URL_ATTR_TAGS.src.indexOf(tagName) !== -1;
        },
        HAS_ACTION_ATTR: function (el) {
            var tagName = getTagName(el).toLowerCase();

            return URL_ATTR_TAGS.action.indexOf(tagName) !== -1;
        },
        HAS_MANIFEST_ATTR: function (el) {
            var tagName = getTagName(el).toLowerCase();

            return URL_ATTR_TAGS.manifest.indexOf(tagName) !== -1;
        },
        HAS_DATA_ATTR: function (el) {
            var tagName = getTagName(el).toLowerCase();

            return URL_ATTR_TAGS.data.indexOf(tagName) !== -1;
        },
        HTTP_EQUIV_META: function (el) {
            var tagName = getTagName(el).toLowerCase();

            return tagName === 'meta' && hasAttr(el, 'http-equiv');
        },
        ALL: function () {
            return true;
        },
        IS_SCRIPT: function (el) {
            return getTagName(el).toLowerCase() === 'script';
        },
        IS_INPUT: function (el) {
            return getTagName(el).toLowerCase() === 'input';
        },
        IS_STYLE: function (el) {
            return getTagName(el).toLowerCase() === 'style';
        },
        HAS_EVENT_HANDLER: function (el) {
            return hasEventHandler(el);
        },
        IS_SANDBOXED_IFRAME: function (el) {
            return getTagName(el).toLowerCase() === 'iframe' && hasAttr(el, 'sandbox');
        }
    };

    var ELEMENT_PROCESSOR_PATTERNS = [
        { selector: SELECTORS.HAS_HREF_ATTR, urlAttr: 'href', elementProcessors: [processTargetBlank, processUrlAttrs, processUrlJsAttr] },
        { selector: SELECTORS.HAS_SRC_ATTR, urlAttr: 'src', elementProcessors: [processTargetBlank, processUrlAttrs, processUrlJsAttr] },
        { selector: SELECTORS.HAS_ACTION_ATTR, urlAttr: 'action', elementProcessors: [processTargetBlank, processUrlAttrs, processUrlJsAttr] },
        { selector: SELECTORS.HAS_MANIFEST_ATTR, urlAttr: 'manifest', elementProcessors: [processUrlAttrs, processUrlJsAttr] },
        { selector: SELECTORS.HAS_DATA_ATTR, urlAttr: 'data', elementProcessors: [processUrlAttrs, processUrlJsAttr] },
        { selector: SELECTORS.HTTP_EQUIV_META, urlAttr: 'content', elementProcessors: [processMetaElement] },
        { selector: SELECTORS.ALL, elementProcessors: [processStyleAttr] },
        { selector: SELECTORS.IS_SCRIPT, elementProcessors: [processScriptElement] },
        { selector: SELECTORS.IS_STYLE, elementProcessors: [processStylesheetElement] },
        { selector: SELECTORS.IS_INPUT, elementProcessors: [processAutoComplete] },
        { selector: SELECTORS.HAS_EVENT_HANDLER, elementProcessors: [processEvtAttr] },
        { selector: SELECTORS.IS_SANDBOXED_IFRAME, elementProcessors: [processSandboxedIframe]}
    ];

    var getElementForSelectorCheck = function (el) {
        //NOTE: we saved the browser definition by jquery for IE to not connect util and its only for IE9
        if (!isNode && $.browser.msie && parseInt($.browser.version, 10) === 9 && el.tagName.toLowerCase() === 'script') {
            var clone = NativeMethods.cloneNode.call(el, false);

            clone.src = clone.innerHTML = '';

            return clone;
        }

        return el;
    };

    var isTestCafeElement = function (el) {
        return typeof el.className === 'string' && el.className.indexOf(SharedConst.TEST_CAFE_UI_CLASSNAME_POSTFIX) > -1;
    };

    var isStylesheetProcessed = function (cssText) {
        return (new RegExp('^\\s*\\' + SharedConst.IS_STYLESHEET_PROCESSED_RULE)).test(cssText);
    };

    PageProc.processPage = function ($, urlReplacer, crossDomainPort, isIFrame) {
        var $base = $('base'),
            baseUrl = $base.length ? getAttr($base[0], 'href') : '',
            replacer = function (resourceUrl, resourceType) {
                return urlReplacer(resourceUrl, resourceType, baseUrl);
            },
            hasIFrameParent = function (el) {
                return isNode ? isIFrame : Util.hasIFrameParent(el);
            };

        var $all = $('*');

        for (var i = 0; i < ELEMENT_PROCESSOR_PATTERNS.length; i++) {
            var pattern = ELEMENT_PROCESSOR_PATTERNS[i];

            //NOTE: disable jshint W083 warning for this code
            /*jshint -W083 */
            $all.filter(function () {
                return pattern.selector(this);
            }).each(function () {
                    if (!this[SharedConst.ELEMENT_PROCESSED_FLAG]) {
                        for (var j = 0; j < pattern.elementProcessors.length; j++)
                            pattern.elementProcessors[j](this, replacer, pattern, crossDomainPort, hasIFrameParent);
                    }
                });
            /*jshint +W083 */
        }
    };

    PageProc.processElement = function (el, urlReplacer) {
        // NOTE: When the 'script' element created it is not executed. It occurs after the element is appended to a
        // document. But in IE 9 only, if you get script's 'document', 'children' or 'all' property, the script is executed
        // at the same time (before it is appended to a document). JQuery element's 'is' function implementation gets
        // 'document' property and the script is executed too early. Therefore we should check clone element instead it. (B237231)
        var elementForSelectorCheck = getElementForSelectorCheck(el);

        for (var i = 0; i < ELEMENT_PROCESSOR_PATTERNS.length; i++) {
            var pattern = ELEMENT_PROCESSOR_PATTERNS[i];

            if (pattern.selector(elementForSelectorCheck) && !isTestCafeElement(el)) {
                for (var j = 0; j < pattern.elementProcessors.length; j++)
                    pattern.elementProcessors[j](el, urlReplacer, pattern);
            }
        }
    };

// Utils
    PageProc.getStoredAttrName = function (attr) {
        return attr + SharedConst.DOM_SANDBOX_STORED_ATTR_POSTFIX;
    };

    PageProc.getBOM = function (text) {
        var match = text.match(BOM_REGEX);

        return match ? match[0] : null;
    };

    PageProc.processScript = function (text, withoutHeader) {
        var bom = PageProc.getBOM(text);

        if (bom)
            text = text.replace(bom, '');

        text = JSProcessor.process(text);

        // Overriding methods that work with the DOM.
        if (!JSProcessor.isDataScript(text) && !withoutHeader && text.indexOf(SharedConst.DOM_SANDBOX_OVERRIDE_DOM_METHOD_NAME) === -1)
            text = SCRIPT_HEADER + text;

        return bom ? bom + text : text;
    };

    PageProc.processManifest = function (manifest, urlReplacer) {
        var lines = manifest.split('\n'),
            trim = function (str) {
                return str.replace(/^\s+|\s+$/g, '');
            };

        for (var i = 0; i < lines.length; i++) {
            var line = trim(lines[i]);

            if (line && line !== 'CACHE MANIFEST' && line !== 'NETWORK:' && line !== 'FALLBACK:' &&
                line !== 'CACHE:' && line[0] !== '#' && line !== '*') {

                var isFallbackItem = line.indexOf(' ') !== -1;

                if (isFallbackItem) {
                    var urls = line.split(' ');

                    lines[i] = urlReplacer(urls[0]) + ' ' + urlReplacer(urls[1]);
                } else
                    lines[i] = urlReplacer(line);
            }
        }

        return lines.join('\n');
    };

    function replaceStylsheetUrls(css, processor) {
        return css.replace(CSS_URL_PROPERTY_VALUE_PATTERN, function () {
            var prefix = arguments[1] || arguments[10],
                openQuote = arguments[2] || arguments[5] || arguments[11] || arguments[14] || '',
                url = arguments[3] || arguments[6] || arguments[8] || arguments[12] || arguments[15],
                closeQuote = arguments[4] || arguments[7] || arguments[13] || arguments[16] || '',
                postfix = arguments[9] || '';

            return url ? (prefix + openQuote + processor(url) + closeQuote + postfix) : arguments[0];
        });
    }

    PageProc.processStylesheet = function (css, urlReplacer, isStylesheetTable) {
        if (typeof css === 'string' && !isStylesheetProcessed(css)) {
            var prefix = isStylesheetTable ? SharedConst.IS_STYLESHEET_PROCESSED_RULE + '\n' : '';

            // Replace :hover pseudo class
            css = css.replace(/\s*:\s*hover(\W)/gi, '[' + SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR + ']$1');

            // Remove source map directive
            css = css.replace(SOURCE_MAP_REG_EX, '$1');

            // NOTE: replace URLs in css rules with the proxy URLs.
            return prefix + replaceStylsheetUrls(css, urlReplacer);
        }

        return css;
    };

    PageProc.cleanUpStylesheet = function (css, parseProxyUrl, formatUrl) {
        if (typeof css === 'string') {
            css = css.replace(new RegExp('\\[' + SharedConst.TEST_CAFE_HOVER_PSEUDO_CLASS_ATTR + '\\](\\W)', 'ig'), ":hover$1");

            return replaceStylsheetUrls(css, function (url) {
                var originUrlObj = parseProxyUrl(url);

                if (originUrlObj)
                    return formatUrl(originUrlObj.originResourceInfo);

                return url;
            });
        }

        return css;
    };

    PageProc.isOpenLinkInIFrame = function (el, hasIFrameParent) {
        var tagName = getTagName(el).toLowerCase(),
            target = getAttr(el, 'target');

        hasIFrameParent = hasIFrameParent || Util.hasIFrameParent;

        if (target !== '_top') {
            var mustProcessTag = IFRAME_FLAG_TAGS.indexOf(tagName) !== -1,
                isNameTarget = target ? target[0] !== '_' : false;

            if (target === '_parent')
                return mustProcessTag && !isTopParentIFrame(el);

            if (mustProcessTag && (hasIFrameParent(el) || isNameTarget))
                return true;
        }

        return false;
    };
})();

(function () {
    var ServiceCommands = {
        GET_UPLOADED_FILES: 'GET_UPLOADED_FILES',
        SET_COOKIE: 'CMD_SET_COOKIE',
        UPLOAD_FILES: 'UPLOAD_FILES',
        GET_IFRAME_TASK_SCRIPT: 'GET_IFRAME_TASK_SCRIPT'
    };

    if (typeof module !== 'undefined' && module.exports)
        module.exports = ServiceCommands;
    else {
        HammerheadClient.define('Shared.ServiceCommands', function () {
            this.exports = ServiceCommands;
        });
    }
})();
(function () {
    var isNode = typeof module !== 'undefined' && module.exports;

    var UrlUtil      = {},
        SharedErrors = null;

    //Const
    var PROTOCOL_RE        = /(^(\w+?\:))/;
    var LEADING_SLASHES_RE = /^(\/\/)/;
    var HOST_RE            = /^(.*?)(\/|%|\?|;|#|$)/;
    var PORT_RE            = /:([0-9]*)$/;
    var QUERY_AND_HASH_RE  = /(\?.+|#[^#]*)$/;

    UrlUtil.REQUEST_DESCRIPTOR_QUERY_KEY        = '7929ba6d39aa4465';
    UrlUtil.REQUEST_DESCRIPTOR_VALUES_SEPARATOR = '!';

    UrlUtil.IFRAME = 'iframe';
    UrlUtil.SCRIPT = 'script';

    if (isNode) {
        SharedErrors   = require('./client_errs');
        module.exports = UrlUtil;
    }
    else {
        HammerheadClient.define('Shared.UrlUtil', function (require) {
            SharedErrors = require('Shared.Errors');
            this.exports = UrlUtil;
        });
    }

    function validateOriginUrl (url) {
        if (!/^https?:/.test(url)) {
            throw {
                code:      SharedErrors.URL_UTIL_PROTOCOL_IS_NOT_SUPPORTED,
                originUrl: url
            };
        }
    }

    UrlUtil.isSubDomain = function (domain, subDomain) {
        domain    = domain.replace(/^www./i, '');
        subDomain = subDomain.replace(/^www./i, '');

        if (domain === subDomain)
            return true;

        var index = subDomain.lastIndexOf(domain);

        return subDomain[index - 1] === '.' && subDomain.length === index + domain.length;
    };

    UrlUtil.sameOriginCheck = function (location, checkedUrl, parseUrl, resolveUrl) {
        if (!checkedUrl)
            return true;

        if (resolveUrl)
            checkedUrl = resolveUrl(checkedUrl);

        var parsedLocation      = parseUrl(location),
            parsedCheckedUrl    = parseUrl(checkedUrl, parsedLocation.protocol),
            parsedProxyLocation = UrlUtil.parseProxyUrl(location, parseUrl),
            parsedOriginUrl     = parsedProxyLocation ? parsedProxyLocation.originResourceInfo : parsedLocation,
            isRelative          = !parsedCheckedUrl.host;

        if (isRelative ||
            (parsedCheckedUrl.host === parsedLocation.host && parsedCheckedUrl.protocol === parsedLocation.protocol))
            return true;

        if (parsedOriginUrl) {
            var portsEq = (!parsedOriginUrl.port && !parsedCheckedUrl.port) ||
                          (parsedOriginUrl.port && (parsedOriginUrl.port.toString() === parsedCheckedUrl.port));

            if (parsedOriginUrl.protocol === parsedCheckedUrl.protocol && portsEq) {
                if (parsedOriginUrl.hostname === parsedCheckedUrl.hostname)
                    return true;

                return UrlUtil.isSubDomain(parsedOriginUrl.hostname, parsedCheckedUrl.hostname) ||
                       UrlUtil.isSubDomain(parsedCheckedUrl.hostname, parsedOriginUrl.hostname);
            }
        }

        return false;
    };

    UrlUtil.getProxyUrl = function (url, proxyHostname, proxyPort, jobUid, jobOwnerToken, resourceType) {
        validateOriginUrl(url);

        var params = [jobOwnerToken, jobUid];

        if (resourceType)
            params.push(resourceType);

        params = params.join(UrlUtil.REQUEST_DESCRIPTOR_VALUES_SEPARATOR);

        return 'http://' + proxyHostname + ':' + proxyPort + '/' + params + '/' + url;
    };

    UrlUtil.getDomain = function (parsed) {
        return UrlUtil.formatUrl({
            protocol: parsed.protocol,
            host:     parsed.host,
            hostname: parsed.hostname,
            port:     parsed.port
        });
    };

    //TODO
    UrlUtil.parseProxyUrlWrap = function (proxyUrl) {
        return UrlUtil.parseProxyUrl(proxyUrl, UrlUtil.parseUrl);
    };

    UrlUtil.parseProxyUrl = function (proxyUrl, parseUrl) {
        //TODO remove it
        //parseUrl = parsedUrl || UrlUtil.parseUrl;

        var parsedUrl = UrlUtil.parseUrl(proxyUrl);

        if (!parsedUrl.partAfterHost)
            return;

        var match = parsedUrl.partAfterHost.match(/^\/(\S+?)\/(https?:\/\/\S+)/);

        if (!match)
            return;

        var params = match[1].split(UrlUtil.REQUEST_DESCRIPTOR_VALUES_SEPARATOR);

        // NOTE: we should have at least job uid and owner token
        if (params.length < 2)
            return;

        return {
            originUrl:          match[2],
            originResourceInfo: parseUrl(match[2]),
            proxy:              {
                hostname: parsedUrl.hostname,
                port:     parsedUrl.port
            },
            jobInfo:            {
                ownerToken: params[0],
                uid:        params[1]
            },
            resourceType:       params[2] || null
        };
    };

    UrlUtil.getPathname = function (path) {
        return path.replace(QUERY_AND_HASH_RE, '');
    };

    UrlUtil.parseUrl = function (url) {
        var parsed = {};

        url = UrlUtil.prepareUrl(url);

        if (!url)
            return parsed;

        // Trim
        url = url.replace(/^\s+|\s+$/g, '');

        // Protocol
        var hasImplicitProtocol = false;
        var remainder           = url
            .replace(PROTOCOL_RE, function (str, protocol) {
                parsed.protocol = protocol;
                return '';
            })
            .replace(LEADING_SLASHES_RE, function () {
                hasImplicitProtocol = true;
                return '';
            });

        // NOTE: URL is relative
        if (!parsed.protocol && !hasImplicitProtocol) {
            parsed.partAfterHost = url;
            return parsed;
        }

        // Host
        parsed.partAfterHost = remainder
            .replace(HOST_RE, function (str, host, restPartSeparator) {
                parsed.host = host;
                return restPartSeparator;
            });

        if (parsed.host) {
            parsed.hostname = parsed.host.replace(PORT_RE, function (str, port) {
                parsed.port = port;
                return '';
            });
        }

        return parsed;
    };

    UrlUtil.isSupportedProtocol = function (url) {
        return !/^\s*(chrome-extension:|blob:|javascript:|about:|mailto:|tel:|data:|skype:|skypec2c:|file:|#)/i.test(url);
    };

    UrlUtil.resolveUrlAsOrigin = function (url, formatUrl, getProxyUrl, parseProxyUrl) {
        if (UrlUtil.isSupportedProtocol(url)) {
            var proxyUrl       = getProxyUrl(url),
                parsedProxyUrl = parseProxyUrl(proxyUrl);

            return formatUrl(parsedProxyUrl.originResourceInfo);
        }

        return url;
    };

    UrlUtil.formatUrl = function (parsedUrl) {
        // NOTE: URL is relative
        if (!parsedUrl.host && (!parsedUrl.hostname || !parsedUrl.port))
            return parsedUrl.partAfterHost;

        var url = parsedUrl.protocol || '';

        url += '//';

        if (parsedUrl.username || parsedUrl.password)
            url += parsedUrl.username + ':' + parsedUrl.password + '@';

        if (parsedUrl.host)
            url += parsedUrl.host;

        else {
            url += parsedUrl.hostname;

            if (parsedUrl.port)
                url += ':' + parsedUrl.port;
        }

        if (parsedUrl.partAfterHost)
            url += parsedUrl.partAfterHost;

        return url;
    };

    UrlUtil.prepareUrl = function (url) {
        if (url === null && /iPad|iPhone/i.test(window.navigator.userAgent))
            return '';
        else
            return (url + '').replace(/\n|\t/g, '');
    };

    UrlUtil.parseQueryString = function (search) {
        var queryStr    = search.substr(1),
            queryParsed = {};

        if (queryStr || search === '?') {
            queryStr.split('&').forEach(function (paramStr) {
                var paramParsed = paramStr.split('='),
                    key         = paramParsed.shift(),
                    value       = paramParsed.length ? paramParsed.join('=') : null;

                if (key === UrlUtil.REQUEST_DESCRIPTOR_QUERY_KEY)
                    value = decodeURIComponent(value);

                if (!queryParsed.hasOwnProperty(key))
                    queryParsed[key] = value;
                else if (queryParsed[key] instanceof Array)
                    queryParsed[key].push(value);
                else
                    queryParsed[key] = [queryParsed[key], value];
            });
        }

        return queryParsed;
    };

    UrlUtil.formatQuery = function (query) {
        var params = [];

        Object.keys(query).forEach(function (key) {
            var value = query[key];

            if (key === UrlUtil.REQUEST_DESCRIPTOR_QUERY_KEY)
                value = encodeURIComponent(value);

            if (!(value instanceof Array))
                value = [value];

            for (var i = 0; i < value.length; i++)
                params.push(key + (value[i] === null ? '' : ('=' + value[i])));
        });

        return params.length ? '?' + params.join('&') : '';
    };
})();
    }

    initHammerheadClient(window);
})();